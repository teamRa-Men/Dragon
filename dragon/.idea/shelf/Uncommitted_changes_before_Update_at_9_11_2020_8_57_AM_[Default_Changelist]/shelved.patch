Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Point;\r\n\r\npublic class ArcherTower extends Foundation {\r\n    static int cost;\r\n    float attackRange = (1f/2);\r\n\r\n    boolean hasAttacked = false;\r\n    public Point creationPoint = new Point();\r\n\r\n    float countdown = 0;\r\n    int attack = 0;\r\n\r\n    public static int tileNr = 1;\r\n\r\n    public ArcherTower( int x, int y, boolean isStanding, GameView activity){\r\n        super( x, y, tileNr, isStanding, activity );\r\n\r\n        cost = 160;\r\n        buildingType = 4;\r\n        maxHealth = 400;\r\n        health = maxHealth;\r\n\r\n        if(Math.random()<0.5f) {\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Tower1\");\r\n        }\r\n        else{\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Tower1\");\r\n        }\r\n        height = width*buildingImage.height()/buildingImage.width();\r\n        creationPoint.x = x+(width/2);\r\n        creationPoint.y = (int)((y - height*3/4));\r\n        System.out.println(\"Tower spawned\");\r\n    }\r\n\r\n\r\n    //adding physics to the arrows\r\n    public void Physics(float deltaTime){\r\n\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        if (Math.abs(GameView.instance.player.position.x-creationPoint.x)<GameView.instance.cameraSize*attackRange){\r\n            return true;}\r\n        return false;\r\n    }\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        float randomx = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/10;\r\n        float randomy = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/5;\r\n        Vector2 target = GameView.instance.player.aimFor();\r\n        float dx = target.x-creationPoint.x;\r\n        float dy =target.y-creationPoint.y;\r\n        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 1, dx+randomx, dy+randomy, 2);\r\n    }\r\n\r\n    public void update(float fixedDeltaTime){\r\n        super.update(fixedDeltaTime);\r\n        creationPoint.y = (int)((y - height*3/4));\r\n\r\n        System.out.println(health);\r\n        System.out.println(isStanding);\r\n\r\n        if(isStanding) {\r\n            countdown+=fixedDeltaTime;\r\n            //System.out.println(countdown);\r\n            if (inRange()) {\r\n\r\n                if (countdown > 1000) {\r\n\r\n                    if(countdown > 1200 && attack == 0) {\r\n                        Attack();\r\n\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown > 1400 && attack == 1) {\r\n                        Attack();\r\n\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown > 1600 && attack == 2) {\r\n                        Attack();\r\n\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown >= 1800){\r\n                        countdown = 0;\r\n                        attack= 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        else{\r\n            buildingImage = SpriteManager.instance.getBuildingSprite(\"TowerRuin\");\r\n\r\n            if(beenEmptied == false){\r\n                GoldPool.instance.spawnGold(x, y-3,goldRate/5);\r\n                beenEmptied = true;}\r\n\r\n            goldRate = 0;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void OnDamage() {\r\n        super.OnDamage();\r\n\r\n        if(health == 0 && isStanding){\r\n            isStanding = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 1;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(date 1604604500313)
@@ -63,8 +63,8 @@
         super.update(fixedDeltaTime);
         creationPoint.y = (int)((y - height*3/4));
 
-        System.out.println(health);
-        System.out.println(isStanding);
+        /*System.out.println(health);
+        System.out.println(isStanding);*/
 
         if(isStanding) {
             countdown+=fixedDeltaTime;
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.SocketTimeoutException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class Fortress extends Foundation {\r\n\r\n\r\n    //All the stuff the fortress needs and can do;\r\n\r\n    int lv;\r\n\r\n    int maxHealth = 500;\r\n\r\n    int currentGold;\r\n    int maxGold;\r\n    public int goldRate = 15;\r\n\r\n    int currentTilesLeft;\r\n    int currentTilesRight;\r\n    int maxTiles = 8;\r\n\r\n    public Point creationPoint = new Point();\r\n    float attackRange = (1f/2);\r\n\r\n    float countdown = 0;\r\n    int attack = 0;\r\n\r\n    ArrayList<Foundation> currentBuildingsRight = new ArrayList<Foundation>();\r\n    ArrayList<Foundation> currentBuildingsLeft = new ArrayList<Foundation>();\r\n    int maxBuildings;\r\n\r\n    //number of buildings in the village/town\r\n\r\n    public int currentTownInhabitants;\r\n    public int maxTownInhabitants; // defined by the houses/farms\r\n\r\n    //public Foundation[] buildings = new Foundation[5];\r\n\r\n    ArcherTower archertower;\r\n    boolean hasTaxed = false;\r\n\r\n    boolean hasFarm = false;\r\n    // attack function\r\n    public static int tileNr = 3;\r\n\r\n    float townFear;\r\n\r\n    ArrayList<String> BD = new ArrayList<>();\r\n    boolean muchFarms = true;\r\n    boolean muchFear = false;\r\n\r\n    int tower = 0;\r\n\r\n    //Fortress constructor, used when calling Fortress();\r\n\r\n    //this specific Fortress\r\n    public Fortress(int x, int y, boolean isStanding, GameView activity) {\r\n        super(x, y, tileNr, isStanding, activity);\r\n        buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress1\");\r\n        height = width * buildingImage.height() / buildingImage.width();\r\n\r\n        BD.add(\"House\");\r\n        BD.add(\"House\");\r\n        BD.add(\"House\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n\r\n\r\n        Random r = new Random();\r\n        x = r.nextInt();\r\n        buildingType = 1;\r\n        currentGold = 150;\r\n\r\n        maxBuildings = 5;\r\n        maxGold = 400;\r\n        lv = 0;\r\n\r\n        Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);\r\n    }\r\n\r\n    //new test with arraylists works pretty much, tiles and buildings still individual from each other\r\n\r\n    public void update(float deltaTime) {\r\n        if (creationPoint.y != (int)(GameView.instance.groundLevel - height*3/4) || creationPoint.x != x+width/2){\r\n            creationPoint.x = x+width/2;\r\n            creationPoint.y = (int)(GameView.instance.groundLevel - height/2);\r\n        }\r\n        /*System.out.println(creationPoint.x);\r\n        System.out.println(GameView.instance.player.position.x);\r\n        System.out.println(GameView.instance.player.position.x-creationPoint.x);\r\n        System.out.println(GameView.instance.cameraSize*attackRange);*/\r\n\r\n        int currentGold1 = currentGold;\r\n\r\n        if (currentGold < maxGold) {\r\n\r\n            //Money income\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2\r\n                    && (!hasTaxed)) {\r\n\r\n                goldRate = 15;\r\n\r\n                for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n                    goldRate = currentBuildingsRight.get(i).goldRate + goldRate;\r\n                }\r\n\r\n                for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n                    goldRate = currentBuildingsLeft.get(i).goldRate + goldRate;\r\n                }\r\n\r\n\r\n                currentGold = currentGold + (int) (goldRate * 1.2*GameView.instance.timeScale);\r\n\r\n\r\n                if (currentGold > maxGold) {\r\n                    currentGold = currentGold - (currentGold - maxGold);\r\n                }\r\n\r\n                for (int i = 0; i < BD.size(); i++) {\r\n                    System.out.print(BD.get(i) + \", \");\r\n                }\r\n                System.out.println(\"Town's Fear :\" + townFear);\r\n\r\n                hasTaxed = true;\r\n            }\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) > 0.7) hasTaxed = false;\r\n\r\n            if (currentGold != currentGold1) {\r\n                System.out.println(\"Goldrate : \" + goldRate);\r\n                System.out.println(\"Gold : \" + currentGold);\r\n            }\r\n        }\r\n\r\n        //=======================================================================================//\r\n\r\n        //Buildings\r\n\r\n        //=======================================================================================//\r\n\r\n\r\n        //System.out.println((int)(House.cost*((lv*1.75)+1)));\r\n\r\n        if (((currentBuildingsRight.size() + currentBuildingsLeft.size()) < maxBuildings)) {\r\n            spawnRandomBuilding();\r\n        }\r\n\r\n        tower = 0;\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n            if (currentBuildingsRight.get(i).buildingType == 4)\r\n                tower++;\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n            if (currentBuildingsLeft.get(i).buildingType == 4)\r\n                tower++;\r\n        }\r\n        //===================================================================================//\r\n\r\n        //Lv up conditions\r\n\r\n        //===================================================================================//\r\n\r\n        if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold / 10 * 9))\r\n                && lv == 0) {\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 300;\r\n            maxBuildings = 12;\r\n\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress2\");\r\n\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize * tileNr) + (currentTilesRight) * tilesize, y, true, activity));\r\n            currentTilesRight += 1;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft) * tilesize - ArcherTower.tileNr * tilesize, y, true, activity));\r\n            currentTilesLeft += 1;\r\n        }\r\n\r\n        if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold / 10 * 9))\r\n                && lv == 1) {\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 600;\r\n            maxBuildings = 18;\r\n\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress3\");\r\n\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize * tileNr) + (currentTilesRight) * tilesize, y, true, activity));\r\n            currentTilesRight += 1;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft) * tilesize - ArcherTower.tileNr * tilesize, y, true, activity));\r\n            currentTilesLeft += 1;\r\n        }\r\n\r\n        //====    =====  =====     =     ==  ====    ============================\r\n        //=   =   ==     =    =   = =    ==  =   =   ============================\r\n        //====    ==     =====   =====   ==  ====    ============================\r\n        //=   ==  =====  =      =     =  ==  =   ==  ============================\r\n\r\n        float tempfear;\r\n        if (!isStanding) {\r\n            repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n        }\r\n\r\n        else {\r\n            boolean repairingRight = false, repairingLeft = false;\r\n            tempfear = 0;\r\n\r\n            //RIGHT SIDE\r\n            for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n                currentBuildingsRight.get(i).update(deltaTime);\r\n\r\n                //repairing\r\n                if (!repairingRight && !currentBuildingsRight.get(i).isStanding) {\r\n\r\n                    if (currentBuildingsRight.get(i).buildingType == 2) {\r\n\r\n                        if ((townFear - 4) / 10 > tower / 2 && lv > 0) {\r\n                            System.out.println(\"converting house -> tower R\");\r\n                            int bx = currentBuildingsRight.get(i).x;\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx, y, true, activity));\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx, y, false, activity));\r\n                            currentBuildingsRight.get(i).health = 0;\r\n                        }\r\n                    }\r\n\r\n                    else if(currentBuildingsRight.get(i).buildingType == 4){\r\n\r\n                        if (townFear/10 < 2*lv && tower > 6) {\r\n                            System.out.println(\"converting tower -> house R\");\r\n                            int bx = currentBuildingsRight.get(i).x;\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx,y,true,activity));\r\n                        }\r\n                    }\r\n\r\n                    currentBuildingsRight.get(i).repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n                    repairingRight = true;\r\n\r\n                }\r\n\r\n                //gathering fear\r\n                tempfear += currentBuildingsRight.get(i).fear;\r\n            }\r\n\r\n            //LEFT SIDE\r\n            for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n                currentBuildingsLeft.get(i).update(deltaTime);\r\n\r\n                //repairing\r\n                if (!repairingLeft && !currentBuildingsLeft.get(i).isStanding) {\r\n\r\n\r\n                    if (currentBuildingsLeft.get(i).buildingType == 2) {\r\n                        System.out.println(\"this is a house L\");\r\n                        if ((townFear - 4) / 10 > tower / 2 && lv > 0) {\r\n                            System.out.println(\"converting house -> tower L\");\r\n                            int bx = currentBuildingsLeft.get(i).x;\r\n                            currentBuildingsLeft.set(i, new ArcherTower(bx, y, false, activity));\r\n                            currentBuildingsLeft.get(i).health = 0;\r\n                        }\r\n                    }\r\n\r\n                    else if(currentBuildingsLeft.get(i).buildingType == 4){\r\n\r\n                        if (townFear/10 < 2*lv && tower > 6) {\r\n                            System.out.println(\"converting tower -> house L\");\r\n                            int bx = currentBuildingsLeft.get(i).x;\r\n                            currentBuildingsLeft.set(i, new ArcherTower(bx,y,true,activity));\r\n                        }\r\n                    }\r\n                }\r\n                currentBuildingsLeft.get(i).repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n                repairingLeft = true;\r\n\r\n                tempfear += currentBuildingsLeft.get(i).fear;\r\n            }\r\n\r\n            //gathering fear\r\n            townFear = (tempfear / (currentBuildingsLeft.size() + currentBuildingsRight.size()));\r\n        }\r\n\r\n    if (inRange()) {\r\n        countdown+=GameView.instance.fixedDeltaTime;\r\n        System.out.println(countdown);\r\n        if (countdown > 1000) {\r\n\r\n            if (countdown > 1200 && attack == 0) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                 }\r\n\r\n            if (countdown > 1400 && attack == 1) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                }\r\n\r\n            if (countdown > 1600 && attack == 2) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                }\r\n\r\n            if (countdown >= 1800) {\r\n                countdown = 0;\r\n                attack = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void spawnRandomBuilding(){\r\n\r\n        double lr = (Math.random() - 0.5f);\r\n        int offset = 0;//tilesize/2;\r\n\r\n        ArrayList<Foundation> direction;\r\n        int directionTiles;\r\n\r\n        if(lr < 0){\r\n            direction = currentBuildingsLeft;\r\n        }\r\n        else{\r\n            direction = currentBuildingsRight;\r\n        }\r\n\r\n        int position;\r\n        if(direction ==  currentBuildingsLeft){\r\n            position = x-(currentTilesLeft*tilesize+offset);\r\n        }\r\n        else position = x + (tilesize*Fortress.tileNr) +currentTilesRight*tilesize + offset;\r\n\r\n        //////////////////////////////////////////////////////////////////\r\n        //deciding Building\r\n        //////////////////////////////////////////////////////////////////\r\n\r\n\r\n        Foundation building;\r\n        int frm = 0;\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            if(currentBuildingsRight.get(i).buildingType == 3)\r\n                frm++;\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            if(currentBuildingsLeft.get(i).buildingType == 3)\r\n                frm++;\r\n        }\r\n\r\n        if(goldRate < 100 && !muchFarms && frm < 5){BD.add(\"Farm\");BD.add(\"Farm\");BD.add(\"Farm\"); muchFarms = true;}\r\n        else if(goldRate >= 100 && muchFarms){BD.remove(\"Farm\");BD.remove(\"Farm\"); BD.remove(\"Farm\"); muchFarms = false;}\r\n\r\n        if(townFear >= 12 && !muchFear && lv>0){BD.add(\"Tower\");BD.add(\"Tower\");BD.add(\"Tower\");BD.add(\"Tower\"); muchFear = true;}\r\n        else if(townFear < 12 && muchFear){BD.remove(\"Tower\");BD.remove(\"Tower\");BD.remove(\"Tower\");BD.remove(\"Tower\"); muchFear = false;}\r\n\r\n        if(currentBuildingsRight.size() == 0 && currentBuildingsLeft.size() == 0){\r\n            if(direction == currentBuildingsLeft) {\r\n                position -= Farm.tileNr*tilesize;\r\n            }\r\n            building = new Farm(position,y,true,activity);\r\n            currentGold-=Farm.cost*((lv*1.50)+1);\r\n        }\r\n\r\n        else{\r\n            int random = (int)(-0.5+(Math.random()*BD.size()));\r\n\r\n            if(BD.get(random) == \"House\" && currentGold > House.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=House.tileNr*tilesize;\r\n                }\r\n                building = new House(position,y,true,activity);currentGold-=(int)(House.cost*((lv*1.75)+1));}\r\n\r\n            else if(BD.get(random) == \"Farm\" && currentGold > Farm.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=Farm.tileNr*tilesize;\r\n                }\r\n                building = new Farm(position,y,true,activity);currentGold-=(int)(Farm.cost*((lv*1.75)+1));}\r\n\r\n            else if(BD.get(random) == \"Tower\" && currentGold > ArcherTower.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=ArcherTower.tileNr*tilesize;\r\n                }\r\n                building = new ArcherTower(position,y,true,activity); currentGold-=(int)(ArcherTower.cost*((lv*1.75)+1));}\r\n            else return;\r\n        }\r\n\r\n        ///_______________________________________________///\r\n        //giving feedback to the Tiles right and Tiles left\r\n        ///===============================================///\r\n        if(direction == currentBuildingsLeft) {\r\n            currentTilesLeft += building.tileNr;\r\n        }\r\n        else {\r\n            currentTilesRight += building.tileNr;\r\n        }\r\n        direction.add(building);\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n\r\n            if (currentBuildingsLeft.get(i) != null) {\r\n\r\n                currentBuildingsLeft.get(i).draw(c);\r\n\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n\r\n            if (currentBuildingsRight.get(i) != null) {\r\n\r\n                currentBuildingsRight.get(i).draw(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void position(Fortress f) {\r\n\r\n    }\r\n\r\n    /*public void CombList(){\r\n\r\n        ArrayList <Foundation> townassets = new ArrayList<>();\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            townassets.add(currentBuildingsRight.get(i));\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            townassets.add(currentBuildingsLeft.get(i));\r\n        }\r\n      }*/\r\n\r\n    public void physics(float deltaTime){\r\n        super.physics(deltaTime);\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).physics(deltaTime);\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            currentBuildingsRight.get(i).physics(deltaTime);\r\n        }\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        //System.out.println(\"inRange\");\r\n        if (Math.abs(GameView.instance.player.position.x-creationPoint.x)<GameView.instance.cameraSize*attackRange){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        float randomx = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/10;\r\n        float randomy = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/5;\r\n        Vector2 target = GameView.instance.player.aimFor();\r\n        float dx = target.x-creationPoint.x;\r\n        float dy =target.y-creationPoint.y;\r\n        ProjectilePool.instance.shootArrow(creationPoint.x-width/4, creationPoint.y, 1, dx+randomx, dy+randomy, 2);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//TODO:\r\n//      Conditional Building output :\r\n//      Fortress size : 4 tiles: done\r\n//      Fortress Attacking :\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(date 1604612255398)
@@ -58,9 +58,14 @@
     ArrayList<String> BD = new ArrayList<>();
     boolean muchFarms = true;
     boolean muchFear = false;
-
     int tower = 0;
 
+    boolean summonedWizard = false;
+    boolean surrender = false;
+
+    Bitmap flag;
+    int flagy;
+
     //Fortress constructor, used when calling Fortress();
 
     //this specific Fortress
@@ -97,6 +102,7 @@
             creationPoint.x = x+width/2;
             creationPoint.y = (int)(GameView.instance.groundLevel - height/2);
         }
+
         /*System.out.println(creationPoint.x);
         System.out.println(GameView.instance.player.position.x);
         System.out.println(GameView.instance.player.position.x-creationPoint.x);
@@ -106,7 +112,7 @@
 
         if (currentGold < maxGold) {
 
-            //Money income
+            // MONEY INCOME
 
             if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2
                     && (!hasTaxed)) {
@@ -168,11 +174,12 @@
             if (currentBuildingsLeft.get(i).buildingType == 4)
                 tower++;
         }
-        //===================================================================================//
 
-        //Lv up conditions
-
-        //===================================================================================//
+        //  ==       =====   ====        ==           =====
+        //  ==        ==      =          ==           =============
+        //  ==         ==    =      =============         ==================
+        //  ==          ==  =            ==           ===============
+        //  ========     ===             ==           ===
 
         if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))
                 && (currentGold >= (maxGold / 10 * 9))
@@ -297,6 +304,11 @@
             townFear = (tempfear / (currentBuildingsLeft.size() + currentBuildingsRight.size()));
         }
 
+        //    =   ========  ==   ==
+        //   = =     ==     ==  ==
+        //  =====    ==     ====
+        // =     =   ==     ==  ===
+
     if (inRange()) {
         countdown+=GameView.instance.fixedDeltaTime;
         System.out.println(countdown);
@@ -326,8 +338,29 @@
                 }
             }
         }
-    }
+
+        //spawning thief
+        if((townFear > 20 && lv != 0 && (currentGold < maxGold/2)) || (goldRate < 200 && lv != 0)){
+            GameView.instance.npc_pool.spawnThiefs(x, (int) GameView.instance.groundLevel,1);
+        }
+
+        //spawning dragonslayer
+        if(townFear > 30 && lv != 0){
+            GameView.instance.npc_pool.spawnDragonLayers(x, (int) GameView.instance.groundLevel, 1);
+        }
+
+        //spawning wizard
+        if(townFear > 35 && lv ==2 && !summonedWizard){
+            GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);
+            summonedWizard = true;
+        }
+
+        if(townFear > 50 && !surrender){
+            surrender = true;
+        }
 
+        Flagposition(deltaTime);
+    }
 
 
     public void spawnRandomBuilding(){
@@ -418,9 +451,44 @@
         direction.add(building);
     }
 
+    public void Flagposition(float deltaTime){
+
+        countdown+=deltaTime;
+        int flagf = 0;
+
+
+        // replace with sprite animation class
+        if (countdown >= 0 && flagf == 0) {
+            flag = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagf1);
+            flagf += 1;
+        }
+
+        if (countdown >= 200 && flagf == 1) {
+            flag = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagf2);
+            flagf += 1;
+        }
+
+        if (countdown >= 400 && flagf == 2) {
+            flag = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagf3);
+            flagf = 0;
+        }
+
+        if(fear < 10){
+            flagy = (int)GameView.instance.groundLevel-((tilesize*3)/5*4);
+        }
+
+        if(fear > 10){
+            flagy = (int)GameView.instance.groundLevel-tilesize*2;
+        }
+    }
+
     @Override
     public void draw(Canvas c) {
         super.draw(c);
+
+        Bitmap flagpole = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagpole);
+        flagpole = Bitmap.createScaledBitmap(flagpole, tilesize, tilesize*2, false);
+
         for (int i = 0; i < currentBuildingsLeft.size(); i++) {
 
             if (currentBuildingsLeft.get(i) != null) {
@@ -437,6 +505,8 @@
                 currentBuildingsRight.get(i).draw(c);
             }
         }
+        c.drawBitmap(flagpole, x+GameView.instance.cameraDisp.x+tilesize*3,(int)(GameView.instance.groundLevel-flagpole.getHeight()),null);
+        c.drawBitmap(flag,x+GameView.instance.cameraDisp.x+tilesize*3,flagy,null);
     }
 
     public void position(Fortress f) {
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Farm extends Foundation{\r\n\r\n    ArrayList<Object> currentCattle = new ArrayList<Object>();\r\n    int maxCattle;\r\n    static int cost;\r\n\r\n    Bitmap cattle;\r\n    Rect cattleBorder;\r\n    Bitmap[] farmBuildings = new Bitmap[3];\r\n    int[] farmBuildingImage = new int[3];\r\n    ArrayList<Integer> Pos = new ArrayList<Integer>();\r\n    int[] spritePosition = new int[3];\r\n\r\n    boolean createdWooloo = false;\r\n\r\n    SpriteAnimation spriteAnim;\r\n\r\n    public static int tileNr = 3;\r\n    //   int[] spritePosition = new int[]{1,2,3}; // 0=1, 1=2 and so on.\r\n\r\n    public Farm(int x, int y, boolean isStanding, GameView activity){\r\n        super( x, y,tileNr, isStanding, activity);\r\n        int buildingSprite = (int) (Math.random()*2.9+1);\r\n        cost = 110;\r\n\r\n        if(buildingSprite == 3) {\r\n            spriteAnim = new SpriteAnimation(new Rect[]{SpriteManager.instance.getBuildingSprite(\"Farm\" + buildingSprite + \"1\"),\r\n                    SpriteManager.instance.getBuildingSprite(\"Farm\" + buildingSprite + \"2\"),\r\n                    SpriteManager.instance.getBuildingSprite(\"Farm\" + buildingSprite + \"3\")}, 1000);\r\n        }\r\n        else{\r\n            spriteAnim = new SpriteAnimation(new Rect[]{SpriteManager.instance.getBuildingSprite(\"Farm\" + buildingSprite + \"1\")}, 10000);\r\n        }\r\n        buildingImage = spriteAnim.getFrame(0);\r\n        height = tilesize;\r\n\r\n        buildingType = 3;\r\n\r\n        maxHealth = 200;\r\n        health = maxHealth;\r\n\r\n        maxCattle = 4;\r\n        collider = new Rect(x,y-height/2,x+width,y);\r\n    }\r\n\r\n    public void update(float fixedDeltaTime) {\r\n        super.update(fixedDeltaTime);\r\n\r\n        //===================\r\n        // ALIVE\r\n        //=======================\r\n\r\n        if(isStanding == true){\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2\r\n                    && (currentCattle.size() < maxCattle)\r\n                    && (createdWooloo == false)) {\r\n\r\n                Wooloo newWooloo = GameView.instance.npc_pool.spawnWooloo(x, (int) GameView.instance.groundLevel);\r\n\r\n                if (newWooloo != null) {\r\n                    currentCattle.add(newWooloo);\r\n                }\r\n\r\n                createdWooloo = true;\r\n            }\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) > 0.7) createdWooloo = false;\r\n\r\n            goldRate = currentCattle.size() * 10;\r\n            beenEmptied = false;\r\n            buildingImage = spriteAnim.getFrame(fixedDeltaTime,GameView.instance.timeScale);\r\n            fearCooldown();\r\n        }\r\n\r\n        //===========================\r\n\r\n        // IS DEAD\r\n\r\n        //============================\r\n\r\n        else{\r\n            if(beenEmptied == false){\r\n            GoldPool.instance.spawnGold(collider.centerX(), collider.centerY(),goldRate/4);\r\n            beenEmptied = true;}\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"FarmRuin\");\r\n            goldRate = 0;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void OnDamage() {\r\n        super.OnDamage();\r\n\r\n        if(health == 0 && isStanding){\r\n            isStanding = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n    }\r\n\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 3;\r\n    }\r\n}\r\n\r\n\r\n// TODO:\r\n//      Farms supposed to spawn random sprites on position, one should always be the main building:\r\n//      sprites to individual objects?\r\n//      Cattle and sheep spawn. (when Villagers present?)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farm.java	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farm.java	(date 1604614681219)
@@ -90,7 +90,7 @@
 
         else{
             if(beenEmptied == false){
-            GoldPool.instance.spawnGold(collider.centerX(), collider.centerY(),goldRate/4);
+            GoldPool.instance.spawnGold(collider.centerX(), collider.centerY(),goldRate/2);
             beenEmptied = true;}
             this.buildingImage = SpriteManager.instance.getBuildingSprite("FarmRuin");
             goldRate = 0;
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.widget.Button;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game engine\r\n//Handles logic, physics and graphics\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class GameView extends SurfaceView implements Runnable {\r\n    public static GameView instance;\r\n    int screenWidth, screenHeight, cameraSize;\r\n    Vector2 screenCenter;\r\n\r\n\r\n//    final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds\r\n    final float fixedDeltaTime = (int) (1000 / 30); // in milliseconds\r\n    public float timeScale = 1;\r\n    float deltaTime = fixedDeltaTime;\r\n\r\n    //Physics\r\n    public float groundLevel, upperBound, gravity = 0.3f;\r\n    int physicsIterations = 5;\r\n    Vector2 cameraDisp = Vector2.zero;\r\n\r\n    //Projectile\r\n    int projectileIndex = 0;//Next projectile in array to spawn\r\n    float shootSpeedVariance=0.1f, shootDirectionVariance = 10f;//Error in shooting speed and direction\r\n\r\n    //Logic\r\n    boolean isRunning = false;\r\n    Thread gameThread, drawThread;\r\n    //WaveController waveController;//Controls when enemies spawn\r\n    int enemyIndex = 0;//Next enemy in array to spawn\r\n    Vector2 moveBy;\r\n\r\n    //Scene\r\n    Scene scene;\r\n\r\n    //Game objects\r\n    //Game objects\r\n    public Dragon player;\r\n    GameObject ground;\r\n    NPC_Pool npc_pool;\r\n    GoldPool goldPool;\r\n    ProjectilePool projectilePool;\r\n    Lair lair;\r\n    Fortress fortress;\r\n    Hud hud;\r\n\r\n    //Drawing\r\n    SurfaceHolder holder;\r\n    Paint back = new Paint();\r\n    SpriteManager spriteManager;\r\n    boolean isDrawing = true;\r\n\r\n    public GameView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Initialization\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    void init(){\r\n        instance = this;\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        cameraSize = (int) (screenWidth);\r\n        screenCenter = new Vector2(screenWidth/2,screenHeight/2);\r\n        back.setColor(Color.WHITE);\r\n        holder = getHolder();\r\n\r\n        groundLevel = screenHeight*7/10;\r\n\r\n        spriteManager = new SpriteManager();\r\n        //Init scene\r\n\r\n        scene = new Scene();\r\n\r\n        //Player gameobject\r\n        Bitmap playerSprite = BitmapFactory.decodeResource(this.getResources(), R.drawable.empty);\r\n        player = new Dragon(playerSprite,0.5f,0.9f,screenHeight/20,screenHeight/20);\r\n        player.setDamagedSound(SoundEffects.DAMAGE);\r\n        player.setDestroyedSound(SoundEffects.DEATH);\r\n\r\n        lair = new Lair();\r\n\r\n\r\n        npc_pool = new NPC_Pool();\r\n\r\n        goldPool = new GoldPool();\r\n        //GoldPool.instance.spawnGold(screenHeight/2, screenWidth/4,100);\r\n        projectilePool = new ProjectilePool();\r\n\r\n\r\n\r\n        hud = new Hud();\r\n\r\n\r\n\r\n\r\n        fortress = new Fortress( screenWidth*2, (int)groundLevel, true, this);\r\n        npc_pool.spawnThiefs((int)fortress.x ,(int)groundLevel,1);\r\n        Game.instance.gameOver = false;\r\n\r\n        resume();\r\n\r\n    }\r\n\r\n    Vector2 randomPosition(){\r\n        Vector2 random = Vector2.getRandom();\r\n        random.x *= ground.width*0.3f;\r\n        random.y *= ground.height*0.3f;\r\n        return ground.position.add(random);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game loop\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    float totalFrame, numberFrame;\r\n    public void resume() {\r\n        isRunning = true;\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n    }\r\n\r\n    public void pause() {\r\n        isRunning = false;\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                gameThread.join();//execute completely and then stop\r\n                retry = false;\r\n            } catch (Exception e) {\r\n                gameThread.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        while (isRunning) {\r\n\r\n            long started = System.currentTimeMillis();\r\n            //Apply physics calculations per frame\r\n            for (int i = 0; i < physicsIterations; i++) {\r\n                physics();\r\n            }\r\n            long physicsTime = System.currentTimeMillis();\r\n            //System.out.println( \"physics \" + (physicsTime - started));\r\n\r\n            //Apply game logic to game objects\r\n\r\n            update();\r\n            long updateTime = System.currentTimeMillis();\r\n            //System.out.println( \"update \" + (updateTime-physicsTime));\r\n            if(isDrawing) {\r\n                draw();\r\n            }\r\n            long drawTime = System.currentTimeMillis() - updateTime;\r\n            System.out.println( \"draw main \" + drawTime);\r\n            totalFrame += drawTime;\r\n            numberFrame++;\r\n            //System.out.println(\"average draw \" + totalFrame/numberFrame);\r\n\r\n            //If the time between frames does not match the target FPS, delay or skip to match\r\n\r\n            deltaTime = (System.currentTimeMillis() - started);\r\n            int lag = (int) (fixedDeltaTime/timeScale - deltaTime);\r\n\r\n            //System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n            if (lag > 0) {\r\n                try {\r\n                    gameThread.sleep(lag);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            while (lag < 0) {\r\n                lag += fixedDeltaTime/timeScale;\r\n                //Apply physics calculations per frame\r\n                for (int i = 0; i < physicsIterations; i++) {\r\n                    physics();\r\n                }\r\n                //Apply game logic to game objects\r\n                update();\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Graphics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    private void draw() {\r\n        Canvas canvas = new Canvas();\r\n        try {\r\n            canvas = holder.lockCanvas(null);\r\n        }\r\n        catch (Exception e){\r\n\r\n        }\r\n        if (canvas != null) {\r\n            //90\r\n            //canvas.drawRect(0, 0, screenWidth * 1.2f, screenHeight, back);\r\n            scene.drawBackground(canvas);//40\r\n            lair.draw(canvas);//80\r\n            fortress.draw(canvas);//90\r\n            projectilePool.draw(canvas);//80\r\n            player.draw(canvas);//80\r\n            npc_pool.draw(canvas);//90\r\n            goldPool.draw(canvas);//\r\n            scene.drawForeground(canvas);//\r\n\r\n\r\n            hud.draw(canvas);\r\n            holder.unlockCanvasAndPost(canvas);\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Physics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void physics() {\r\n        cameraDisp.x = -player.position.x+screenWidth/2;\r\n        if(!Game.instance.gameOver) {\r\n\r\n            npc_pool.physics(fixedDeltaTime);\r\n            fortress.physics(deltaTime);\r\n            //Enemy motion\r\n            if (!player.destroyed) {\r\n                goldPool.physics(fixedDeltaTime / physicsIterations);\r\n                projectilePool.physics(fixedDeltaTime / physicsIterations);\r\n                player.physics(fixedDeltaTime / physicsIterations);\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game logic\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void update() {\r\n        if(player.visible){\r\n            player.update(fixedDeltaTime);\r\n            scene.update(fixedDeltaTime);\r\n            npc_pool.update(fixedDeltaTime);\r\n            projectilePool.update(fixedDeltaTime);\r\n            //System.out.println(fixedDeltaTime +\" \"+ deltaTime);\r\n            goldPool.update(fixedDeltaTime);\r\n            fortress.update(fixedDeltaTime);\r\n            hud.update(fixedDeltaTime);\r\n            lair.update(fixedDeltaTime);\r\n        }\r\n        else{\r\n            if(!Game.instance.gameOver) {\r\n                Game.instance.showGameOver = true;\r\n            }\r\n        }\r\n    }\r\n    public void movePlayerBy(Vector2 dv){\r\n\r\n        if(dv!=null){\r\n            this.moveBy = new Vector2(dv.x,dv.y);\r\n            player.moveBy(moveBy.multiply(player.maxMoveSpeed));\r\n\r\n        }\r\n        else {\r\n            player.moveBy(dv);\r\n        }\r\n    }\r\n\r\n    public float getGroundLevel(){\r\n        return  groundLevel;\r\n    }\r\n    public void breathFire(boolean breathingFire){\r\n\r\n        player.breathingFire = breathingFire;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(date 1604604500533)
@@ -131,7 +131,6 @@
 
 
         fortress = new Fortress( screenWidth*2, (int)groundLevel, true, this);
-        npc_pool.spawnThiefs((int)fortress.x ,(int)groundLevel,1);
         Game.instance.gameOver = false;
 
         resume();
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM_[Default_Changelist]/shelved.patch	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM_[Default_Changelist]/shelved.patch	(revision acb4fa292a4617066f4d3989926baf864f926a29)
@@ -1,494 +0,0 @@
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class NPC_Pool {\r\n    int size = 20;\r\n\r\n    ArrayList<Wooloo> npcWooloo = new ArrayList<Wooloo>();\r\n    ArrayList<RangedNPC>  npcRangedNPC = new ArrayList<RangedNPC>();\r\n    ArrayList<Wizard>  npcWizard = new ArrayList<Wizard>();\r\n    ArrayList<Farmers>  npcFarmers = new ArrayList<Farmers>();\r\n    public NPC_Pool(){\r\n        for(int i = 0 ;i < size; i++){\r\n            npcWooloo.add(new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/45000,100,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,500));\r\n            npcRangedNPC.add(new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,1));\r\n            npcWizard.add(new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/65000,500,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,25));\r\n\r\n//            if(i%2==0) {\r\n  //              npcFarmers.add(new Farmers(BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.villager), (float) GameView.instance.cameraSize / 25000, 500, GameView.instance.cameraSize / 20, GameView.instance.cameraSize / 20, 0));\r\n    //        }\r\n      //      else {\r\n                npcFarmers.add(new Farmers(BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.farmer_paper), (float) GameView.instance.cameraSize / 25000, 500, GameView.instance.cameraSize / 60, GameView.instance.cameraSize / 30, 0));\r\n        //    }\r\n        }\r\n    }\r\n    public Wooloo spawnWooloo (int spawnX, int spawnY){\r\n        for (int i = 0;i<size;i++){\r\n            if (!npcWooloo.get(i).alive) {\r\n                npcWooloo.get(i).spawn(spawnX,spawnY);\r\n                return npcWooloo.get(i);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public void spawnArcher (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcRangedNPC.get(i).alive && d < ammount) {\r\n                npcRangedNPC.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }public void spawnWizard (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcWizard.get(i).alive && d < ammount) {\r\n                npcWizard.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }public Farmers spawnFarmers (int spawnX, int spawnY){\r\n\r\n        for (int i = 0;i<size;i++){\r\n            if (!npcFarmers.get(i).alive) {\r\n                npcFarmers.get(i).spawn(spawnX,spawnY);\r\n                return npcFarmers.get(i);}\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void draw (Canvas canvas){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).alive){\r\n                npcWooloo.get(i).draw(canvas);\r\n            }if (npcRangedNPC.get(i).alive){\r\n                npcRangedNPC.get(i).draw(canvas);\r\n            }if (npcWizard.get(i).alive){\r\n                npcWizard.get(i).draw(canvas);\r\n            }if (npcFarmers.get(i).alive){\r\n                npcFarmers.get(i).draw(canvas);\r\n            }\r\n        }\r\n    }\r\n    public void update(float deltaTime){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).alive){\r\n                npcWooloo.get(i).update(deltaTime);\r\n            }if (npcRangedNPC.get(i).alive){\r\n                npcRangedNPC.get(i).update(deltaTime);\r\n            }if (npcWizard.get(i).alive){\r\n                npcWizard.get(i).update(deltaTime);\r\n            }if (npcFarmers.get(i).alive){\r\n                npcFarmers.get(i).update(deltaTime);\r\n            }\r\n        }\r\n    }\r\n    public void physics(float deltaTime){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).alive){\r\n                npcWooloo.get(i).physics(deltaTime);\r\n            }if (npcRangedNPC.get(i).alive){\r\n                npcRangedNPC.get(i).physics(deltaTime);\r\n            }if (npcWizard.get(i).alive){\r\n                npcWizard.get(i).physics(deltaTime);\r\n            }if (npcFarmers.get(i).alive){\r\n                npcFarmers.get(i).physics(deltaTime);\r\n            }\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(date 1604013852772)
-@@ -16,7 +16,7 @@
-         for(int i = 0 ;i < size; i++){
-             npcWooloo.add(new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/45000,100,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,500));
-             npcRangedNPC.add(new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,1));
--            npcWizard.add(new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/65000,500,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,25));
-+            npcWizard.add(new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.ottwizard),(float)GameView.instance.cameraSize/65000,500,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,25));
- 
- //            if(i%2==0) {
-   //              npcFarmers.add(new Farmers(BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.villager), (float) GameView.instance.cameraSize / 25000, 500, GameView.instance.cameraSize / 20, GameView.instance.cameraSize / 20, 0));
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\n\r\npublic class Farmers extends NPC {\r\n\r\n    public int farmX;\r\n    public boolean wasAttacked = false;\r\n    public boolean atFarm = false;\r\n    public boolean finished;\r\n\r\n    public Farmers(Bitmap bitmap, float speed, int maxHP, int width, int height,int FX) {\r\n        super(bitmap, speed, maxHP, width, height);\r\n        creationPoint.x = 0;\r\n        creationPoint.y = 0;\r\n        farmX = creationPoint.x+500;\r\n    }\r\n    public void doStuff(){\r\n         finished = false;\r\n    }\r\n\r\n    @Override\r\n    public void update(float deltaTime) {\r\n        if (!wasAttacked){\r\n            if (Math.abs(GameView.instance.player.position.x-npcX)<300){\r\n                flee = true;\r\n                target.x = (int) (npcX+(-(Math.signum(GameView.instance.player.position.x-npcX))*1500));\r\n                creationPoint.x= target.x;\r\n                wasAttacked = true;\r\n            }\r\n            if (atFarm && target.x == npcX){\r\n                if (countdown>=2000) {\r\n                    doStuff();\r\n                    if (finished == true){\r\n                        target.x = creationPoint.x;\r\n                        atFarm = false;\r\n                    }\r\n                }\r\n            }else if (npcX == target.x && !atFarm){\r\n                target.x = farmX;\r\n                atFarm = true;\r\n            }\r\n        }else {\r\n            if (Math.abs(GameView.instance.player.position.x-npcX)<300){\r\n                flee = true;\r\n                target.x = (int) (npcX+(-(Math.signum(GameView.instance.player.position.x-npcX))*1500));\r\n                creationPoint.x= target.x;\r\n            }else idle(500,Math.abs(npcX-target.x) < 10);\r\n        }\r\n        super.update(deltaTime);\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(date 1604013852746)
-@@ -11,10 +11,14 @@
- 
-     public Farmers(Bitmap bitmap, float speed, int maxHP, int width, int height,int FX) {
-         super(bitmap, speed, maxHP, width, height);
--        creationPoint.x = 0;
--        creationPoint.y = 0;
-+    }
-+
-+    @Override
-+    public void spawn(int spawnX, int spawnY) {
-+        super.spawn(spawnX, spawnY);
-         farmX = creationPoint.x+500;
-     }
-+
-     public void doStuff(){
-          finished = false;
-     }
-@@ -34,6 +38,7 @@
-                     if (finished == true){
-                         target.x = creationPoint.x;
-                         atFarm = false;
-+                        countdown = 0;
-                     }
-                 }
-             }else if (npcX == target.x && !atFarm){
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.graphics.RectF;\r\nimport android.text.BoringLayout;\r\n\r\nimport java.sql.Time;\r\nimport java.util.Timer;\r\nimport java.util.Vector;\r\n\r\npublic class NPC {\r\n    public Bitmap npcBitmap;\r\n    public int npcX,npcY,npcMaxHP,npcHp,npcWidth,npcHeight;\r\n    public Rect npcRect, npcCollider;\r\n    public float npcSpeed;\r\n    public Boolean alive = false;\r\n    public Point movement;\r\n    public Point target = new Point();\r\n    public float npcFleeSpeed;\r\n    public boolean flee = false;\r\n    public ActionController damagePeriod;\r\n    public int direction;\r\n    public int countdown;\r\n    double random;\r\n    public Point creationPoint = new Point();\r\n    public NPC (Bitmap bitmap, float speed, int maxHP, int width,int height) {\r\n        npcBitmap = bitmap;\r\n        npcX = 0;\r\n        npcY = 0;\r\n        npcMaxHP = maxHP;\r\n        npcHp = maxHP;\r\n        npcSpeed = speed;\r\n        npcFleeSpeed = (float) ((Math.random()*npcSpeed)+(npcSpeed*3));\r\n        npcWidth = width;\r\n        npcHeight = height;\r\n        npcRect = new Rect(npcX,npcY,width+npcX,height+npcY);\r\n        npcCollider = new Rect(npcX,npcY,width+npcX,height+npcY);\r\n        damagePeriod = new ActionController(0,5000,5000);\r\n        random = Math.random();\r\n    }\r\n    public void spawn (int spawnX, int spawnY){\r\n        npcX = spawnX;\r\n        npcY = spawnY;\r\n        creationPoint.x = spawnX;\r\n        creationPoint.y = spawnY;\r\n        alive = true;\r\n    }\r\n    public  void OnDamage () {\r\n        damagePeriod.triggerAction();\r\n        npcHp-=1;\r\n        if (npcHp<=0){\r\n            death();\r\n        }\r\n    }\r\n    public void death(){\r\n        alive = false;\r\n        npcX = 0;\r\n        npcY = 0;\r\n    }\r\n    float distTravel = 0;\r\n    public void draw(Canvas canvas){\r\n        if (alive){\r\n            RectF tempRect = new RectF(0,0,npcBitmap.getWidth(),npcBitmap.getHeight());\r\n            int top  = (int) (npcRect.top+Math.sin(distTravel/4+random*Math.PI*2)*3);\r\n\r\n            int left  = npcRect.left;\r\n            int right  = left+npcRect.width();\r\n            int bottom  = top+npcRect.height();\r\n            RectF destTempRect = new RectF(left,top,right,bottom);\r\n            Matrix matrix = new Matrix();\r\n            matrix.setRectToRect(tempRect,destTempRect, Matrix.ScaleToFit.FILL);\r\n            matrix.postScale(direction,1,destTempRect.centerX(),destTempRect.centerY());\r\n            canvas.drawBitmap(npcBitmap,matrix,Scene.instance.frontPaint);\r\n        }\r\n    }\r\n\r\n    public  boolean there = false;\r\n    public void moveToTarget(float deltaTime){\r\n        if (Math.abs(target.x-npcX) > 5){\r\n            if (!flee){\r\n                npcX+=direction*npcSpeed*deltaTime;\r\n                distTravel+=npcSpeed*deltaTime;\r\n            } else {\r\n                npcX+=direction*npcFleeSpeed*deltaTime;\r\n                distTravel+=npcFleeSpeed*deltaTime;\r\n            }\r\n        }\r\n        else {\r\n            distTravel = 0;\r\n        }\r\n    }\r\n    public void update(float deltaTime){\r\n        countdown+=deltaTime;\r\n        if (Math.abs(target.x-npcX)>1){\r\n            direction = (int) Math.signum(target.x-npcX);\r\n        }\r\n        moveToTarget(deltaTime);\r\n        npcY = (int) GameView.instance.groundLevel-npcRect.height();\r\n        npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),npcY);\r\n\r\n\r\n    }\r\n    public  void  physics(float deltaTime) {\r\n        npcCollider = new Rect(npcX, npcY, npcX + npcRect.width(), npcY + npcRect.height());\r\n        //System.out.println(\"npcphysics\");\r\n        if (GameView.instance.player.fireBreath.collision(npcCollider)&&!damagePeriod.performing){\r\n\r\n                //System.out.println(npcHp);\r\n                OnDamage();\r\n\r\n        }\r\n    }\r\n\r\n    public void idle(int boundry,boolean lessTen){\r\n        if (countdown >= Math.random()*1000+1000){\r\n            if (lessTen) {\r\n                flee = false;\r\n                double targetDistance = (Math.random() - 0.5) * boundry;\r\n                target.x = (int) (creationPoint.x + targetDistance);\r\n                countdown = 0;\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java	(date 1604013852762)
-@@ -45,8 +45,9 @@
-     public void spawn (int spawnX, int spawnY){
-         npcX = spawnX;
-         npcY = spawnY;
--        creationPoint.x = spawnX;
--        creationPoint.y = spawnY;
-+        creationPoint.x = npcX;
-+        creationPoint.y = npcY;
-+        target.x = npcX;
-         alive = true;
-     }
-     public  void OnDamage () {
-@@ -101,8 +102,6 @@
-         moveToTarget(deltaTime);
-         npcY = (int) GameView.instance.groundLevel-npcRect.height();
-         npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),npcY);
--
--
-     }
-     public  void  physics(float deltaTime) {
-         npcCollider = new Rect(npcX, npcY, npcX + npcRect.width(), npcY + npcRect.height());
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM_[Default_Changelist]/shelved.patch
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM_[Default_Changelist]/shelved.patch	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM_[Default_Changelist]/shelved.patch	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-@@ -1,397 +0,0 @@
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM_[Default_Changelist]/shelved.patch
--===================================================================
----- .idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM_[Default_Changelist]/shelved.patch	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ .idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM_[Default_Changelist]/shelved.patch	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--@@ -1,161 +0,0 @@
---Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.graphics.RectF;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game engine\r\n//Handles logic, physics and graphics\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class GameView extends SurfaceView implements Runnable {\r\n    public static GameView instance;\r\n    int screenWidth, screenHeight, cameraSize;\r\n    Vector2 screenCenter;\r\n    float zoom;\r\n\r\n    final static int FPS = 90;\r\n    final float fixedDeltaTime = (int) (1000 / FPS); // in milliseconds\r\n    float deltaTime = fixedDeltaTime;\r\n\r\n    //Physics\r\n    public float groundLevel, upperBound, gravity = 0.3f;\r\n    int physicsIterations = 5;\r\n    Vector2 cameraDisp = Vector2.zero;\r\n\r\n    //Projectile\r\n    int projectileIndex = 0;//Next projectile in array to spawn\r\n    float shootSpeedVariance=0.1f, shootDirectionVariance = 10f;//Error in shooting speed and direction\r\n\r\n    //Logic\r\n    boolean isRunning = false;\r\n    Thread gameThread, drawThread;\r\n    //WaveController waveController;//Controls when enemies spawn\r\n    int enemyIndex = 0;//Next enemy in array to spawn\r\n    Vector2 moveBy;\r\n\r\n    //Scene\r\n    Scene scene;\r\n\r\n    //Game objects\r\n    int maxEnemyCount = 3;\r\n    public Dragon player;\r\n    GameObject ground;\r\n    NPC_Pool npc_pool;\r\n    GoldController goldController;\r\n    Lair lair;\r\n\r\n\r\n    //Drawing\r\n    Bitmap wall;\r\n    SurfaceHolder holder;\r\n\r\n\r\n    public GameView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Initialization\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    void init(){\r\n        //Singleton\r\n        if(instance == null) {\r\n            instance = this;\r\n        }\r\n\r\n        //Dimensions\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        cameraSize = (int) (screenWidth);\r\n        screenCenter = new Vector2(screenWidth/2,screenHeight/2);\r\n\r\n        holder = getHolder();\r\n\r\n        groundLevel = screenHeight*7/10;\r\n\r\n        //Player gameobject\r\n        Bitmap playerSprite = BitmapFactory.decodeResource(this.getResources(), R.drawable.empty);\r\n        player = new Dragon(playerSprite,0.5f,0.9f,screenHeight/20,screenHeight/20);\r\n\r\n        npc_pool = new NPC_Pool();\r\n        npc_pool.spawnWooloo(500, (int) groundLevel);\r\n\r\n        goldController = new GoldController();\r\n        goldController.spawnGold(new Vector2(screenHeight/2, screenWidth/4),10);\r\n\r\n        player.setDamagedSound(SoundEffects.DAMAGE);\r\n        player.setDestroyedSound(SoundEffects.DEATH);\r\n\r\n        //Init scene\r\n        scene = new Scene();\r\n        lair = new Lair();\r\n\r\n        Game.instance.gameOver = false;\r\n\r\n        resume();\r\n\r\n    }\r\n\r\n    Vector2 randomPosition(){\r\n        Vector2 random = Vector2.getRandom();\r\n        random.x *= ground.width*0.3f;\r\n        random.y *= ground.height*0.3f;\r\n        return ground.position.add(random);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game loop\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    float totalFrame, numberFrame;\r\n    public void resume() {\r\n        isRunning = true;\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n\r\n    }\r\n\r\n    public void pause() {\r\n        isRunning = false;\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                gameThread.join();\r\n                retry = false;\r\n            } catch (Exception e) {\r\n                gameThread.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        while (isRunning) {\r\n\r\n            long started = System.currentTimeMillis();\r\n            //Apply physics calculations per frame\r\n            for (int i = 0; i < physicsIterations; i++) {\r\n                physics();\r\n            }\r\n            long physicsTime = System.currentTimeMillis();\r\n            //System.out.println( \"physics \" + (physicsTime - started));\r\n\r\n            //Apply ame logic to game objects\r\n\r\n            update();\r\n            long updateTime = System.currentTimeMillis();\r\n            //System.out.println( \"update \" + (updateTime-physicsTime));\r\n\r\n\r\n            draw();\r\n            //long drawTime = System.currentTimeMillis() - updateTime;\r\n            //System.out.println( \"draw main \" + drawTime);\r\n            //totalFrame += drawTime;\r\n            //numberFrame++;\r\n            //System.out.println(\"average main \" + totalFrame/numberFrame);\r\n\r\n            //If the time between frames does not match the target FPS, delay or skip to match\r\n\r\n            deltaTime = (System.currentTimeMillis() - started);\r\n            int lag = (int) (fixedDeltaTime - deltaTime);\r\n\r\n            //System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n            if (lag > 0) {\r\n                try {\r\n                    gameThread.sleep(lag);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            while (lag < 0) {\r\n                lag += fixedDeltaTime;\r\n                //Apply physics calculations per frame\r\n                for (int i = 0; i < physicsIterations; i++) {\r\n                    physics();\r\n                }\r\n                //Apply game logic to game objects\r\n                update();\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Graphics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    private void draw() {\r\n\r\n        Canvas canvas = holder.lockCanvas(null);\r\n\r\n        if (canvas != null) {\r\n\r\n\r\n            //Draw ground\r\n            //ground.draw(canvas);\r\n            scene.drawBackground(canvas);\r\n            lair.draw(canvas);\r\n            player.draw(canvas);\r\n            npc_pool.draw(canvas);\r\n\r\n            scene.drawForeground(canvas);\r\n\r\n            goldController.draw(canvas);\r\n\r\n            //Draw Controls\r\n            Vector2 dragFrom = Game.instance.dragFrom;\r\n            Vector2 dragTo = Game.instance.dragTo;\r\n            Paint p = new Paint();\r\n\r\n            p.setColor(Color.WHITE);\r\n            p.setAlpha(100);\r\n            if(dragFrom !=null && dragTo!=null) {\r\n                p.setStrokeWidth(20);\r\n                p.setStrokeCap(Paint.Cap.ROUND);\r\n                canvas.drawLine(dragFrom.x, dragFrom.y, dragTo.x, dragTo.y, p);\r\n            }\r\n\r\n            canvas.drawCircle(Game.instance.fireButton.x,Game.instance.fireButton.y,Game.instance.controlRadius,p);\r\n            Bitmap fireButtonSprite = BitmapFactory.decodeResource(Game.instance.getResources(),R.drawable.flame5_minimalism);\r\n            fireButtonSprite = Bitmap.createScaledBitmap(fireButtonSprite, Game.instance.controlRadius*2,Game.instance.controlRadius*2, false);\r\n            p.setColorFilter(new LightingColorFilter(Game.instance.getResources().getColor(R.color.colorFire),0));\r\n            if(player.breathingFire){\r\n                p.setAlpha(255);\r\n            }\r\n            canvas.drawBitmap(fireButtonSprite,Game.instance.fireButton.x-Game.instance.controlRadius, Game.instance.fireButton.y-Game.instance.controlRadius, p);\r\n            p.setTextSize(screenWidth/30);\r\n            p.setFakeBoldText(true);\r\n            p.setColor(Color.WHITE);\r\n\r\n\r\n\r\n            p.setTextAlign(Paint.Align.RIGHT);\r\n            canvas.drawText(player.goldHolding+\" G\",screenWidth, screenHeight/10,p);\r\n            holder.unlockCanvasAndPost(canvas);\r\n        }\r\n\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Physics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void physics() {\r\n        cameraDisp.x = -player.position.x+screenWidth/2;\r\n        if(!Game.instance.gameOver) {\r\n\r\n            npc_pool.physics(fixedDeltaTime);\r\n\r\n            //Enemy motion\r\n            if (!player.destroyed) {\r\n                goldController.physics(fixedDeltaTime / physicsIterations);\r\n                player.physics(fixedDeltaTime / physicsIterations);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //If gameobject is above ground level, apply gravity\r\n    public void gravity(GameObject g) {\r\n        if (g.position.y  < groundLevel) {\r\n            g.setVelocity(g.getVelocity().x, g.getVelocity().y + gravity * fixedDeltaTime / 1000 / physicsIterations);\r\n        } else {\r\n            g.onGrounded(groundLevel);\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game logic\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void update() {\r\n        if(player.visible){\r\n            player.update(fixedDeltaTime);\r\n            scene.update(fixedDeltaTime);\r\n            npc_pool.update(fixedDeltaTime);\r\n            //goldController.update(fixedDeltaTime);\r\n        }\r\n        else{\r\n            if(!Game.instance.gameOver) {\r\n                Game.instance.showGameOver = true;\r\n            }\r\n        }\r\n    }\r\n    public void movePlayerBy(Vector2 dv){\r\n\r\n        if(dv!=null){\r\n            this.moveBy = new Vector2(dv.x,dv.y);\r\n            player.moveBy(moveBy.multiply(player.maxMoveSpeed));\r\n\r\n        }\r\n        else {\r\n            player.moveBy(dv);\r\n        }\r\n    }\r\n\r\n    public float getGroundLevel(){\r\n        return  groundLevel;\r\n    }\r\n    public void breathFire(boolean breathingFire){\r\n        player.breathingFire = breathingFire;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(revision e00e1533172439953bacc29142dc22a7fd61f985)
---+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(date 1602637237503)
---@@ -58,7 +58,7 @@
---     NPC_Pool npc_pool;
---     GoldController goldController;
---     Lair lair;
----
---+    Fortress fortress;
--- 
---     //Drawing
---     Bitmap wall;
---@@ -124,6 +124,10 @@
---         scene = new Scene();
---         lair = new Lair();
--- 
---+        Bitmap b = BitmapFactory.decodeResource(getResources(),R.drawable.house);
---+        b = Bitmap.createScaledBitmap(b,100,100,false);
---+        fortress = new Fortress(b, 400, 400, 4, true, this);
---+
---         Game.instance.gameOver = false;
--- 
---         resume();
---Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Rect;\r\n\r\npublic class Foundation {\r\n\r\n    int tileSize = 1;\r\n    public final int TILE_SIZE = 100;\r\n\r\n    //current\r\n    int health;\r\n\r\n    int maxHealth;\r\n\r\n    protected GameView activity;\r\n\r\n    //current\r\n    int inhabitantsSize;\r\n\r\n    // matthews Villager function as an array,\r\n    // to tell the building how many villagers live inside\r\n\r\n    // if health 0 = false;\r\n    boolean isStanding;\r\n\r\n    public int x,y;\r\n    Rect collision;\r\n\r\n    Bitmap buildingImage;\r\n\r\n    public Foundation(Bitmap buildingImage,int x, int y, int tileNr, boolean isStanding, GameView activity){\r\n\r\n        this.activity = activity;\r\n        this.isStanding = true;\r\n\r\n        health = maxHealth;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        collision = new Rect(x,y,x+tileSize,y + tileSize);\r\n\r\n        this.buildingImage = buildingImage;\r\n\r\n\r\n\r\n    }\r\n\r\n    public void draw(Canvas c){\r\n        c.drawBitmap(buildingImage,x,y,null);\r\n    }\r\n\r\n    public int getTileNr(){\r\n        return 1;\r\n    }\r\n\r\n    public void physics(float deltaTime){\r\n\r\n    }\r\n\r\n    public void update(){\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n    //public newSlime[] Puddle = new newSlime[12];\r\n    //int puddleSize = 0;\r\n\r\n\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java	(revision e00e1533172439953bacc29142dc22a7fd61f985)
---+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java	(date 1602635798147)
---@@ -68,7 +68,3 @@
--- }
--- 
--- 
----    //public newSlime[] Puddle = new newSlime[12];
----    //int puddleSize = 0;
----
----
---Index: ../buildings_prototype/.idea/misc.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ ../buildings_prototype/.idea/misc.xml	(revision e00e1533172439953bacc29142dc22a7fd61f985)
---+++ ../buildings_prototype/.idea/misc.xml	(date 1602637206303)
---@@ -1,6 +1,6 @@
--- <?xml version="1.0" encoding="UTF-8"?>
--- <project version="4">
----  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
---+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
---     <output url="file://$PROJECT_DIR$/build/classes" />
---   </component>
---   <component name="ProjectType">
---Index: ../buildings_prototype/.idea/gradle.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <compositeConfiguration>\r\n          <compositeBuild compositeDefinitionSource=\"SCRIPT\" />\r\n        </compositeConfiguration>\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ ../buildings_prototype/.idea/gradle.xml	(revision e00e1533172439953bacc29142dc22a7fd61f985)
---+++ ../buildings_prototype/.idea/gradle.xml	(date 1602637206353)
---@@ -1,15 +1,20 @@
--- <?xml version="1.0" encoding="UTF-8"?>
--- <project version="4">
---+  <component name="GradleMigrationSettings" migrationVersion="1" />
---   <component name="GradleSettings">
---     <option name="linkedExternalProjectsSettings">
---       <GradleProjectSettings>
----        <compositeConfiguration>
----          <compositeBuild compositeDefinitionSource="SCRIPT" />
----        </compositeConfiguration>
---+        <option name="testRunner" value="PLATFORM" />
---         <option name="distributionType" value="DEFAULT_WRAPPED" />
---         <option name="externalProjectPath" value="$PROJECT_DIR$" />
---+        <option name="modules">
---+          <set>
---+            <option value="$PROJECT_DIR$" />
---+            <option value="$PROJECT_DIR$/app" />
---+          </set>
---+        </option>
---         <option name="resolveModulePerSourceSet" value="false" />
----        <option name="testRunner" value="PLATFORM" />
---+        <option name="useQualifiedModuleNames" value="true" />
---       </GradleProjectSettings>
---     </option>
---   </component>
---Index: ../buildings_prototype/.idea/vcs.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ ../buildings_prototype/.idea/vcs.xml	(date 1602636883608)
---+++ ../buildings_prototype/.idea/vcs.xml	(date 1602636883608)
---@@ -0,0 +1,6 @@
---+<?xml version="1.0" encoding="UTF-8"?>
---+<project version="4">
---+  <component name="VcsDirectoryMappings">
---+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
---+  </component>
---+</project>
---\ No newline at end of file
---Index: ../buildings_prototype/.idea/compiler.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ ../buildings_prototype/.idea/compiler.xml	(date 1602637206332)
---+++ ../buildings_prototype/.idea/compiler.xml	(date 1602637206332)
---@@ -0,0 +1,6 @@
---+<?xml version="1.0" encoding="UTF-8"?>
---+<project version="4">
---+  <component name="CompilerConfiguration">
---+    <bytecodeTargetLevel target="1.8" />
---+  </component>
---+</project>
---\ No newline at end of file
---Index: ../buildings_prototype/.idea/jarRepositories.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ ../buildings_prototype/.idea/jarRepositories.xml	(date 1602637238060)
---+++ ../buildings_prototype/.idea/jarRepositories.xml	(date 1602637238060)
---@@ -0,0 +1,25 @@
---+<?xml version="1.0" encoding="UTF-8"?>
---+<project version="4">
---+  <component name="RemoteRepositoriesConfiguration">
---+    <remote-repository>
---+      <option name="id" value="central" />
---+      <option name="name" value="Maven Central repository" />
---+      <option name="url" value="https://repo1.maven.org/maven2" />
---+    </remote-repository>
---+    <remote-repository>
---+      <option name="id" value="jboss.community" />
---+      <option name="name" value="JBoss Community repository" />
---+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
---+    </remote-repository>
---+    <remote-repository>
---+      <option name="id" value="BintrayJCenter" />
---+      <option name="name" value="BintrayJCenter" />
---+      <option name="url" value="https://jcenter.bintray.com/" />
---+    </remote-repository>
---+    <remote-repository>
---+      <option name="id" value="Google" />
---+      <option name="name" value="Google" />
---+      <option name="url" value="https://dl.google.com/dl/android/maven2/" />
---+    </remote-repository>
---+  </component>
---+</project>
---\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM__Default_Changelist_.xml
--===================================================================
----- .idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM__Default_Changelist_.xml	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ .idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM__Default_Changelist_.xml	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM_[Default_Changelist]" date="1602638896037" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_14_10_2020_2_27_PM_[Default_Changelist]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Update at 14/10/2020 2:27 PM [Default Changelist]" />
---</changelist>
--\ No newline at end of file
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Point;\r\n\r\npublic class ArcherTower extends Foundation {\r\n\r\n    float attackRange = (1f/2);\r\n\r\n    boolean hasAttacked = false;\r\n    public Point creationPoint = new Point();\r\n\r\n    public ActionController arrowRechargeTime;\r\n\r\n    float countdown = 0;\r\n    int attack = 0;\r\n\r\n    public ArcherTower( int x, int y, boolean isStanding, GameView activity){\r\n        super( x, y, 1, isStanding, activity );\r\n\r\n        height = width*2;\r\n\r\n        this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house);\r\n        this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width,height,false);\r\n        creationPoint.x = x+(width/2);\r\n        creationPoint.y = (int)GameView.instance.groundLevel - height;\r\n\r\n        arrowRechargeTime = new ActionController(1000, 1f ,2000);\r\n\r\n        System.out.println(\"Tower spawned\");\r\n    }\r\n\r\n\r\n    //adding physics to the arrows\r\n    public void Physics(float deltaTime){\r\n\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        if (Math.abs(GameView.instance.player.position.x-creationPoint.x)<GameView.instance.cameraSize*attackRange){\r\n            return true;}\r\n        return false;\r\n    }\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        float randomx = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/5;\r\n        float randomy = -(float)(Math.random())*attackRange*GameView.instance.cameraSize/5;\r\n\r\n        Vector2 target = GameView.instance.player.aimFor();\r\n        float dx = target.x-creationPoint.x;\r\n        float dy =target.y-creationPoint.y;\r\n\r\n        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 1, dx+randomx, dy+randomy, 2);\r\n    }\r\n\r\n    public void update(float fixedDeltaTime){\r\n        countdown+=fixedDeltaTime;\r\n\r\n        if(isStanding = true) {\r\n\r\n            arrowRechargeTime.update(fixedDeltaTime);\r\n            if (inRange()) {\r\n                arrowRechargeTime.triggerAction();\r\n                if (arrowRechargeTime.charging && (countdown > 40)) {\r\n\r\n                    if((int)countdown == 45 && attack == 0) {\r\n                        Attack();\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if((int)countdown == 50 && attack == 1) {\r\n                        Attack();\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if((int)countdown == 55 && attack == 2) {\r\n                        Attack();\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown >= 60){\r\n                    countdown = 0;\r\n                    attack= 0;}\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void OnDamage() {\r\n        super.OnDamage();\r\n\r\n        if(health == 0 && isStanding){\r\n            isStanding = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 1;\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(date 1603400664041)
--@@ -57,6 +57,8 @@
--     }
-- 
--     public void update(float fixedDeltaTime){
--+        super.update(fixedDeltaTime);
--+
--         countdown+=fixedDeltaTime;
-- 
--         if(isStanding = true) {
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.SocketTimeoutException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class Fortress extends Foundation {\r\n\r\n\r\n    //All the stuff the fortress needs and can do;\r\n\r\n    int lv;\r\n\r\n    int maxHealth = 500;\r\n\r\n    int currentGold;\r\n    int maxGold;\r\n    public int goldRate = 15;\r\n\r\n    int currentTilesLeft;\r\n    int currentTilesRight;\r\n    int maxTiles = 8;\r\n\r\n    public Point creationPoint = new Point();\r\n    float attackRange = (1f/2);\r\n\r\n    ArrayList<Foundation> currentBuildingsRight = new ArrayList<Foundation>();\r\n    ArrayList<Foundation> currentBuildingsLeft = new ArrayList<Foundation>();\r\n    int maxBuildings;\r\n\r\n    //number of buildings in the village/town\r\n\r\n    public int currentTownInhabitants;\r\n    public int maxTownInhabitants; // defined by the houses/farms\r\n\r\n    //public Foundation[] buildings = new Foundation[5];\r\n\r\n    ArcherTower archertower;\r\n    boolean hasTaxed = false;\r\n\r\n    boolean hasFarm = false;\r\n    // attack function\r\n\r\n\r\n    //Fortress constructor, used when calling Fortress();\r\n\r\n    //this specific Fortress\r\n    public Fortress(int x, int y, boolean isStanding, GameView activity) {\r\n        super(x, y,4, isStanding, activity);\r\n\r\n        new ArcherTower(x,y,true,activity);\r\n        new ArcherTower(x+tilesize*3,y,true, activity);\r\n\r\n        buildingImage = BitmapFactory.decodeResource(Game.instance.getResources(),R.drawable.fortress);\r\n        buildingImage = Bitmap.createScaledBitmap(buildingImage,width,height,false);\r\n        Random r = new Random();\r\n        x = r.nextInt();\r\n        buildingType = 1;\r\n        currentGold = 150;\r\n\r\n        maxBuildings = 5;\r\n        maxGold = 400;\r\n        lv = 0;\r\n\r\n        creationPoint.x = x+(width/2);\r\n        creationPoint.y = (int)GameView.instance.groundLevel - height;\r\n\r\n        Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);\r\n    }\r\n\r\n    //new test with arraylists works pretty much, tiles and buildings still individual from each other\r\n\r\n    public void update(float deltaTime) {\r\n\r\n        int currentGold1 = currentGold;\r\n\r\n        if(currentGold < maxGold){\r\n\r\n            //Money income\r\n            deltaTime = deltaTime/200;\r\n\r\n            if((Scene.instance.timeOfDay)/(Scene.instance.dayLength)<0.2\r\n                    && (!hasTaxed)){\r\n\r\n                goldRate = 15;\r\n\r\n                for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n                    goldRate = currentBuildingsRight.get(i).goldRate + goldRate;\r\n                }\r\n\r\n                for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n                    goldRate = currentBuildingsLeft.get(i).goldRate + goldRate;\r\n                }\r\n\r\n\r\n                currentGold = currentGold + (int)(goldRate*1.2);\r\n\r\n\r\n                if(currentGold > maxGold){\r\n                    currentGold = currentGold - (currentGold-maxGold);\r\n                }\r\n\r\n                hasTaxed = true;\r\n            }\r\n\r\n            if((Scene.instance.timeOfDay)/(Scene.instance.dayLength) > 0.7) hasTaxed = false;\r\n\r\n            if(currentGold != currentGold1){\r\n                System.out.println(\"Goldrate : \" + goldRate);\r\n                System.out.println(\"Gold : \" + currentGold);\r\n            }\r\n        }\r\n\r\n        //=======================================================================================//\r\n\r\n        //Buildings\r\n\r\n        //=======================================================================================//\r\n\r\n        if (((currentBuildingsRight.size() + currentBuildingsLeft.size()) < maxBuildings) && (currentGold > 100)) {\r\n\r\n            double lr = (Math.random() - 0.5f);\r\n            double rh = (Math.random() - 0.5f);\r\n            int offset = tilesize;\r\n\r\n            ArrayList<Foundation> direction;\r\n            int directionTiles;\r\n\r\n            if(lr < 0){\r\n                direction = currentBuildingsLeft;\r\n            }\r\n            else{\r\n                direction = currentBuildingsRight;\r\n            }\r\n\r\n            int position;\r\n            if(direction ==  currentBuildingsLeft){\r\n               position = x-(currentTilesLeft+1)*offset;\r\n            }\r\n            else position = x + (tilesize*3) +(currentTilesRight + 1)*offset;\r\n\r\n            //deciding Building\r\n\r\n            Foundation building;\r\n            if(rh < 0){\r\n                building = new House(position,y,true,activity);\r\n                directionTiles=1;\r\n            }\r\n\r\n            else{\r\n                building = new Farm(position,y,true,activity);\r\n                directionTiles=3;\r\n            }\r\n\r\n            if(currentBuildingsRight.size() == 0 && currentBuildingsLeft.size() == 0){\r\n               direction.add(new Farm(position,y,true,activity));\r\n               directionTiles=3;\r\n            }\r\n\r\n            else direction.add(building);\r\n\r\n            //giving feedback to the Tiles right and Tiles left\r\n            if(direction == currentBuildingsLeft) currentTilesLeft += directionTiles;\r\n            else currentTilesRight += directionTiles;\r\n\r\n            //TODO: First Building faulty\r\n\r\n            //System.out.println(\"Left Buildings :\" + currentBuildingsLeft.size());\r\n            //System.out.println(\"Right Buildings :\" + currentBuildingsRight.size());\r\n\r\n            //System.out.println(\"Left Tiles :\" +currentTilesLeft);\r\n            //System.out.println(\"Right Tiles :\" +currentTilesRight);\r\n        }\r\n\r\n        //===================================================================================//\r\n\r\n        //Lv up conditions\r\n\r\n        //===================================================================================//\r\n\r\n        /*if((((currentBuildingsRight.size()+currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold/10*9))\r\n                && lv == 0){\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 300;\r\n            maxBuildings = 12;\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize*3) +(currentTilesRight + 1) * tilesize, y, true, activity));\r\n            currentTilesRight+=2;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft + 1) * tilesize, y, true, activity));\r\n            currentTilesLeft+=2;\r\n        }*/\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            currentBuildingsRight.get(i).update(deltaTime);\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).update(deltaTime);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n\r\n            if (currentBuildingsLeft.get(i) != null) {\r\n\r\n                currentBuildingsLeft.get(i).draw(c);\r\n\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n\r\n            if (currentBuildingsRight.get(i) != null) {\r\n\r\n                currentBuildingsRight.get(i).draw(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void position(Fortress f) {\r\n\r\n    }\r\n\r\n    public void spawnFarm(){\r\n\r\n    }\r\n\r\n    public void physics(float deltaTime){\r\n        super.physics(deltaTime);\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).physics(deltaTime);\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            currentBuildingsRight.get(i).physics(deltaTime);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//TODO:\r\n//      Conditional Building output :\r\n//      Fortress size : 4 tiles: done\r\n//      Fortress Attacking :\r\n\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(date 1603402934859)
--@@ -73,19 +73,20 @@
--         creationPoint.x = x+(width/2);
--         creationPoint.y = (int)GameView.instance.groundLevel - height;
-- 
---        Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);
--+        for(int i = 0; i<3; i++ ){
--+        Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);}
--     }
-- 
--     //new test with arraylists works pretty much, tiles and buildings still individual from each other
-- 
--     public void update(float deltaTime) {
--+        super.update(deltaTime);
-- 
--         int currentGold1 = currentGold;
-- 
--         if(currentGold < maxGold){
-- 
---            //Money income
---            deltaTime = deltaTime/200;
--+            //Money incom
-- 
--             if((Scene.instance.timeOfDay)/(Scene.instance.dayLength)<0.2
--                     && (!hasTaxed)){
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farm.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Farm extends Foundation{\r\n\r\n    ArrayList<Object> currentCattle = new ArrayList<Object>();\r\n    int maxCattle;\r\n\r\n    Bitmap cattle;\r\n    Rect cattleBorder;\r\n\r\n    Bitmap[] farmBuildings = new Bitmap[3];\r\n\r\n    int[] farmBuildingImage = new int[3];\r\n\r\n    ArrayList<Integer> Pos = new ArrayList<Integer>();\r\n    int[] spritePosition = new int[3];\r\n\r\n    boolean beenEmptied = false;\r\n    boolean createdWooloo = false;\r\n\r\n    //   int[] spritePosition = new int[]{1,2,3}; // 0=1, 1=2 and so on.\r\n\r\n\r\n    public Farm(int x, int y, boolean isStanding, GameView activity){\r\n        super( x, y,3, isStanding, activity);\r\n\r\n        height = tilesize;\r\n        this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.barn);\r\n        this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width/3,height,false);\r\n\r\n        buildingType = 3;\r\n        health = maxHealth;\r\n\r\n        maxCattle = 4;\r\n\r\n    }\r\n\r\n    public void update(float fixedDeltaTime) {\r\n\r\n        //===================\r\n        // ALIVE\r\n        //=======================\r\n\r\n        if(isStanding == true){\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2\r\n                    && (currentCattle.size() < maxCattle)\r\n                    && (createdWooloo == false)) {\r\n\r\n                Wooloo newWooloo = GameView.instance.npc_pool.spawnWooloo(x, (int) GameView.instance.groundLevel);\r\n\r\n                if (newWooloo != null) {\r\n                    currentCattle.add(newWooloo);\r\n                }\r\n\r\n                createdWooloo = true;\r\n            }\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) > 0.7) createdWooloo = false;\r\n\r\n            goldRate = currentCattle.size() * 10;\r\n            beenEmptied = false;\r\n        }\r\n\r\n        //===========================\r\n\r\n        // IS DEAD\r\n\r\n        //============================\r\n\r\n        else{\r\n            if(beenEmptied == false){\r\n            GoldPool.instance.spawnGold(x, y-3,goldRate/4);\r\n            beenEmptied = true;}\r\n\r\n            goldRate = 0;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void OnDamage() {\r\n        super.OnDamage();\r\n\r\n        if(health == 0 && isStanding){\r\n            isStanding = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n    }\r\n\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 3;\r\n    }\r\n}\r\n\r\n\r\n// TODO:\r\n//      Farms supposed to spawn random sprites on position, one should always be the main building:\r\n//      sprites to individual objects?\r\n//      Cattle and sheep spawn. (when Villagers present?)\r\n\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farm.java	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farm.java	(date 1603400663992)
--@@ -44,6 +44,7 @@
--     }
-- 
--     public void update(float fixedDeltaTime) {
--+        super.update(fixedDeltaTime);
-- 
--         //===================
--         // ALIVE
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.PasswordAuthentication;\r\n\r\npublic class Foundation {\r\n    public int tilesize;\r\n    int tileNr = 1;\r\n    int width, height;\r\n    int goldRate = 0;\r\n\r\n    //current\r\n    protected int health;\r\n\r\n    protected int maxHealth=100;\r\n\r\n    protected GameView activity;\r\n\r\n    int buildingType;\r\n    // 0 = fortress\r\n    // 1 = house\r\n    // 2 = Farm\r\n    // 3 = tower\r\n\r\n    //current\r\n    int inhabitantsSize;\r\n\r\n    // matthews Villager function as an array,\r\n    // to tell the building how many villagers live inside\r\n\r\n    // if health 0 = false;\r\n    boolean isStanding;\r\n\r\n    public int x,y;\r\n    Rect collider;\r\n\r\n    Bitmap buildingImage;\r\n    public ActionController damagePeriod;\r\n\r\n\r\n    public Foundation(int x, int y, int tileNr, boolean isStanding, GameView activity){\r\n        tilesize =GameView.instance.cameraSize/9;\r\n        this.tileNr=tileNr;\r\n        this.activity = activity;\r\n        this.isStanding = true;\r\n\r\n        buildingType = 0;\r\n\r\n        this.health = maxHealth;\r\n\r\n        this.x = x;\r\n        this.y = (int)GameView.instance.groundLevel-3;\r\n\r\n        width = (tilesize-(tilesize/10))*tileNr;\r\n        height = width;\r\n\r\n\r\n\r\n        collider = new Rect(x,y-height,x+width,y);\r\n        damagePeriod = new ActionController(10,0,2000);\r\n\r\n    }\r\n\r\n    public void draw(Canvas c){\r\n        Paint p = new Paint();\r\n        //p.setColorFilter(new LightingColorFilter(Color.rgb(health/maxHealth*255, health/maxHealth*255, health/maxHealth*255),0));\r\n        c.drawBitmap(buildingImage,x+GameView.instance.cameraDisp.x,y-buildingImage.getHeight(),p);\r\n\r\n    }\r\n\r\n    public int getTileNr(){\r\n        return 1;\r\n    }\r\n\r\n    public void physics(float deltaTime){\r\n        //Log.i(\"gmg\",\"phy\");\r\n        if (GameView.instance.player.fireBreath.collision(collider)){\r\n            //Log.i(\"gmg\",\"hit fire\");\r\n            OnDamage();\r\n        }\r\n    }\r\n\r\n    public void update(float deltaTime){\r\n        damagePeriod.update(deltaTime);\r\n    }\r\n\r\n    public  void OnDamage () {\r\n        if(isStanding){\r\n            damagePeriod.triggerAction();\r\n           // Log.i(\"gmg\",\"standing\");\r\n\r\n            if(damagePeriod.charging){\r\n                health-=3;\r\n                health = Math.max(health,0);\r\n                //Log.i(\"gmg\",\"dmg\");\r\n                //System.out.println(\"health \"+ health);\r\n                damagePeriod.cooling=true;\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java	(date 1603402636004)
--@@ -31,11 +31,7 @@
--     // 2 = Farm
--     // 3 = tower
-- 
---    //current
---    int inhabitantsSize;
---
---    // matthews Villager function as an array,
---    // to tell the building how many villagers live inside
--+    int currentInhabitants;
-- 
--     // if health 0 = false;
--     boolean isStanding;
--@@ -45,6 +41,7 @@
-- 
--     Bitmap buildingImage;
--     public ActionController damagePeriod;
--+    float rebuildTime = 0;
-- 
-- 
--     public Foundation(int x, int y, int tileNr, boolean isStanding, GameView activity){
--@@ -82,33 +79,81 @@
--     }
-- 
--     public void physics(float deltaTime){
---        //Log.i("gmg","phy");
--+         // Log.i("gmg","phy");
--         if (GameView.instance.player.fireBreath.collision(collider)){
---            //Log.i("gmg","hit fire");
--+           // Log.i("gmg","hit fire");
--             OnDamage();
--+            //System.out.println(health);
--         }
--     }
-- 
--     public void update(float deltaTime){
--         damagePeriod.update(deltaTime);
--+        repair(deltaTime);
--     }
-- 
---    public  void OnDamage () {
--+    public void OnDamage () {
--         if(isStanding){
--             damagePeriod.triggerAction();
---           // Log.i("gmg","standing");
--+
--+            Log.i("gmg",damagePeriod.time+"");
-- 
--             if(damagePeriod.charging){
--                 health-=3;
--                 health = Math.max(health,0);
---                //Log.i("gmg","dmg");
--+                Log.i("gmg","dmg");
--                 //System.out.println("health "+ health);
--                 damagePeriod.cooling=true;
--             }
-- 
--         }
--+    }
--+
--+    public void repair(float fixedDeltaTime){
--+
--+        if(!isStanding){    // && currentInhabitants > 1
--+            rebuildTime+=(fixedDeltaTime);
--+
--+            if( rebuildTime > 4){
--+                health+=5;
--+                rebuildTime = 0;
--+            }
--+            if(health == maxHealth) {
--+                isStanding = true;
--+                System.out.println(isStanding);
--+                System.out.println(health);
--+
--+                if(buildingType == 1){
--+                    buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.fortress);
--+                    this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width,height,false);
--+                }
--+                else if(buildingType == 2){
--+                    double rh = (Math.random()*3);
-- 
--+                    if(rh < 1){
--+                        this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house1);
--+                    }
--+                    if(rh >= 1 && rh < 2){
--+                        this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house2);
--+                    }
--+                    if(rh >= 2){
--+                        this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house3);
--+                    }
-- 
--+                    this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width, height,false);
--+                }
--+
--+                else if(buildingType == 3){
--+                    this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.barn);
--+                    this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width/3,height,false);
--+                }
--+
--+                else if(buildingType == 4){
--+                    this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house);
--+                    this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width,height*2,false);
--+                }
--+            }
--+        }
--     }
-- }
-- 
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/House.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.util.Log;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class House extends Foundation{\r\n\r\n    ArrayList<Object> currentInhabitants = new ArrayList<Object>();\r\n    int maxInhabitants;\r\n    int maxHealth = 100;\r\n\r\n    boolean createdVillager = false;\r\n    boolean beenEmptied = false;\r\n\r\n    public House(int x, int y, boolean isStanding, GameView activity){\r\n        super(x, y,1, isStanding, activity );\r\n\r\n\r\n        health = maxHealth;\r\n        buildingType = 2;\r\n        maxInhabitants = 5;\r\n\r\n        double rh = (Math.random()*3);\r\n        double flipp = (Math.random() - 0.5f);\r\n\r\n        if(rh < 1){\r\n            this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house1);\r\n        }\r\n        if(rh >= 1 && rh < 2){\r\n            this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house2);\r\n        }\r\n        if(rh >= 2){\r\n            this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house3);\r\n        }\r\n\r\n        this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,width, height,false);\r\n\r\n        if(flipp < 0){\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void update(float deltaTime) {\r\n\r\n        //===================\r\n        // ALIVE\r\n        //=======================\r\n\r\n        if(isStanding == true){\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2\r\n                    && (currentInhabitants.size() < maxInhabitants)\r\n                    && (createdVillager == false)){\r\n\r\n                Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);\r\n\r\n                if (newFarmer != null) {\r\n                    currentInhabitants.add(newFarmer);\r\n                }\r\n\r\n                createdVillager = true;\r\n            }\r\n\r\n            if((Scene.instance.timeOfDay) / (Scene.instance.dayLength) > 0.7) {\r\n                createdVillager = false;\r\n            }\r\n\r\n            goldRate = currentInhabitants.size() * 3;\r\n\r\n        }\r\n\r\n        //===========================\r\n        // IS DEAD\r\n        //============================\r\n\r\n        else{\r\n\r\n            buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.houseruin);\r\n            buildingImage = Bitmap.createScaledBitmap(buildingImage,width,height,false);\r\n\r\n            if(beenEmptied == false){\r\n                GoldPool.instance.spawnGold(x, y-3,goldRate/5);\r\n                beenEmptied = true;}\r\n\r\n            goldRate = 0;\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 1;\r\n    }\r\n\r\n    @Override\r\n    public void OnDamage() {\r\n        super.OnDamage();\r\n\r\n        if(health == 0 && isStanding){\r\n            isStanding = false;\r\n            //Log.i(\"ouch\",\"damaged\");\r\n        }\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/House.java	(revision d1465a958c95c3ddb3a1efe6780a8a02d1f992c5)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/House.java	(date 1603401269574)
--@@ -48,7 +48,7 @@
-- 
--     @Override
--     public void update(float deltaTime) {
---
--+        super.update(deltaTime);
--         //===================
--         // ALIVE
--         //=======================
--@@ -73,6 +73,7 @@
--             }
-- 
--             goldRate = currentInhabitants.size() * 3;
--+            beenEmptied = false;
-- 
--         }
-- 
--@@ -90,7 +91,6 @@
--                 beenEmptied = true;}
-- 
--             goldRate = 0;
---
--         }
--     }
-- 
--diff --git .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM__Default_Changelist_.xml
--diff --git .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM__Default_Changelist_.xml
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM__Default_Changelist_.xml
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM__Default_Changelist_.xml	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM__Default_Changelist_.xml	(revision 641271265bd19b6f57ce7b8ca919ed879d3c937c)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM_[Default_Changelist]" date="1603403184193" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_10_2020_10_45_AM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 23/10/2020 10:45 AM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM_[Default_Changelist]/shelved.patch	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM_[Default_Changelist]/shelved.patch	(revision acb4fa292a4617066f4d3989926baf864f926a29)
@@ -1,356 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM__Default_Changelist_.xml
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM__Default_Changelist_.xml	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM__Default_Changelist_.xml	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-@@ -1,9 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]" date="1603242417600" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 21/10/20 2:06 PM [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" />
--    <option name="AFTER_PATH" value="app/src/main/res/drawable/villager.png" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]/villager.png" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]/shelved.patch
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]/shelved.patch	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]/shelved.patch	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-@@ -1,158 +0,0 @@
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\n\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\n\npublic class NPC_Pool {\n    int size = 20;\n\n    Wooloo[] npcWooloo = new Wooloo[size];\n    RangedNPC[] npcRangedNPC = new RangedNPC[size];\n    Wizard[] npcWizard = new Wizard[size];\n    public NPC_Pool(){\n        for(int i = 0 ;i < size; i++){\n            npcWooloo[i] = new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500);\n            npcRangedNPC[i] = new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,30);\n            npcWizard[i] = new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,100);\n        }\n    }\n    public void spawnWooloo (int spawnX, int spawnY, int ammount){\n        int d = 0;\n        for (int i = 0;i<size;i++){\n            if (!npcWooloo[i].alive && d < ammount) {\n                npcWooloo[i].alive = true;\n                npcWooloo[i].npcX = spawnX;\n                npcWooloo[i].npcY = spawnY;\n                d++;\n            }\n        }\n    }\n    public void spawnArcher (int spawnX, int spawnY, int ammount){\n        int d = 0;\n        for (int i = 0;i<ammount;i++){\n            if (!npcRangedNPC[i].alive && d < ammount) {\n                npcRangedNPC[i].alive = true;\n                npcRangedNPC[i].npcX = spawnX;\n                npcRangedNPC[i].npcY = spawnY;\n                d++;\n            }\n        }\n    }public void spawnWizard (int spawnX, int spawnY, int ammount){\n        int d = 0;\n        for (int i = 0;i<ammount;i++){\n            if (!npcWizard[i].alive && d < ammount) {\n                npcWizard[i].alive = true;\n                npcWizard[i].npcX = spawnX;\n                npcWizard[i].npcY = spawnY;\n                d++;\n            }\n        }\n    }\n    public void draw (Canvas canvas){\n        for (int i = 0; i<size;i++){\n            if (npcWooloo[i].alive){\n                npcWooloo[i].draw(canvas);\n            }if (npcRangedNPC[i].alive){\n                npcRangedNPC[i].draw(canvas);\n            }if (npcWizard[i].alive){\n                npcWizard[i].draw(canvas);\n            }\n        }\n    }\n    public void update(float deltaTime){\n        for (int i = 0; i<size;i++){\n            if (npcWooloo[i].alive){\n                npcWooloo[i].update(deltaTime);\n            }if (npcRangedNPC[i].alive){\n                npcRangedNPC[i].update(deltaTime);\n            }if (npcWizard[i].alive){\n                npcWizard[i].update(deltaTime);\n            }\n        }\n    }\n    public void physics(float deltaTime){\n        for (int i = 0; i<size;i++){\n            if (npcWooloo[i].alive){\n                npcWooloo[i].physics(deltaTime);\n            }if (npcRangedNPC[i].alive){\n                npcRangedNPC[i].physics(deltaTime);\n            }if (npcWizard[i].alive){\n                npcWizard[i].physics(deltaTime);\n            }\n        }\n    }\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(revision d45484900b54a9a194e4facfe6d499999fb9a02a)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(date 1603242073000)
--@@ -9,11 +9,13 @@
--     Wooloo[] npcWooloo = new Wooloo[size];
--     RangedNPC[] npcRangedNPC = new RangedNPC[size];
--     Wizard[] npcWizard = new Wizard[size];
--+    Villager[] npcVillager = new Villager[size];
--     public NPC_Pool(){
--         for(int i = 0 ;i < size; i++){
--             npcWooloo[i] = new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500);
--             npcRangedNPC[i] = new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,30);
--             npcWizard[i] = new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,100);
--+            npcVillager[i] = new Villager(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.villager),(float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20);
--         }
--     }
--     public void spawnWooloo (int spawnX, int spawnY, int ammount){
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Villager.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Villager.java	(date 1603242073000)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Villager.java	(date 1603242073000)
--@@ -0,0 +1,15 @@
--+package mnm.bcs106.yoobeecolleges.dragon;
--+
--+import android.graphics.Bitmap;
--+
--+public class Villager extends NPC {
--+    public Villager(Bitmap bitmap, float speed, int maxHP, int width, int height) {
--+        super(bitmap, speed, maxHP, width, height);
--+    }
--+
--+    @Override
--+    public void update(float deltaTime) {
--+
--+        super.update(deltaTime);
--+    }
--+}
--Index: ../.idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2c456dbc-1908-40f2-80b2-0a9bff2325fc\" name=\"Default Changelist\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png\" afterDir=\"false\" />\n    </list>\n    <option name=\"EXCLUDED_CONVERTED_TO_IGNORED\" value=\"true\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"IgnoredFileRootStore\">\n    <option name=\"generatedRoots\">\n      <set>\n        <option value=\"D:\\Documents\\AndroidStudioProjects\\Dragon\\.idea\" />\n      </set>\n    </option>\n  </component>\n  <component name=\"ProjectFrameBounds\" extendedState=\"6\">\n    <option name=\"x\" value=\"24\" />\n    <option name=\"y\" value=\"255\" />\n    <option name=\"width\" value=\"1317\" />\n    <option name=\"height\" value=\"784\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1hyRBJqIinM8JAy5Yx7d3w5cJmI\" />\n  <component name=\"ProjectView\">\n    <navigator currentView=\"ProjectPane\" proportions=\"\" version=\"1\">\n      <foldersAlwaysOnTop value=\"true\" />\n    </navigator>\n    <panes>\n      <pane id=\"ProjectPane\" />\n      <pane id=\"Scope\" />\n      <pane id=\"PackagesPane\" />\n    </panes>\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showExcludedFiles\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"android.sdk.path\" value=\"$USER_HOME$/AppData/Local/Android/Sdk\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/dragon\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"settings.github\" />\n    <property name=\"show.migrate.to.gradle.popup\" value=\"false\" />\n  </component>\n  <component name=\"RunDashboard\">\n    <option name=\"ruleStates\">\n      <list>\n        <RuleState>\n          <option name=\"name\" value=\"ConfigurationTypeDashboardGroupingRule\" />\n        </RuleState>\n        <RuleState>\n          <option name=\"name\" value=\"StatusDashboardGroupingRule\" />\n        </RuleState>\n      </list>\n    </option>\n  </component>\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2c456dbc-1908-40f2-80b2-0a9bff2325fc\" name=\"Default Changelist\" comment=\"\" />\n      <created>1600981208954</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1600981208954</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"ToolWindowManager\">\n    <frame x=\"-8\" y=\"-8\" width=\"1382\" height=\"744\" extended-state=\"6\" />\n    <layout>\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" visible=\"true\" weight=\"0.3296131\" />\n      <window_info id=\"Structure\" side_tool=\"true\" />\n      <window_info id=\"Image Layers\" />\n      <window_info id=\"Designer\" />\n      <window_info id=\"Resources Explorer\" weight=\"0.3296131\" />\n      <window_info id=\"Capture Tool\" />\n      <window_info id=\"Favorites\" side_tool=\"true\" />\n      <window_info id=\"Captures\" order=\"0\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" side_tool=\"true\" />\n      <window_info anchor=\"right\" id=\"Capture Analysis\" />\n      <window_info anchor=\"right\" id=\"Theme Preview\" />\n      <window_info anchor=\"right\" id=\"Palette&#9;\" />\n    </layout>\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- ../.idea/workspace.xml	(revision d45484900b54a9a194e4facfe6d499999fb9a02a)
--+++ ../.idea/workspace.xml	(date 1603162233000)
--@@ -1,11 +1,10 @@
-- <?xml version="1.0" encoding="UTF-8"?>
-- <project version="4">
--+  <component name="AutoImportSettings">
--+    <option name="autoReloadType" value="NONE" />
--+  </component>
--   <component name="ChangeListManager">
---    <list default="true" id="2c456dbc-1908-40f2-80b2-0a9bff2325fc" name="Default Changelist" comment="">
---      <change beforePath="$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java" beforeDir="false" afterPath="$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png" beforeDir="false" afterPath="$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png" afterDir="false" />
---    </list>
---    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
--+    <list default="true" id="2c456dbc-1908-40f2-80b2-0a9bff2325fc" name="Default Changelist" comment="" />
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
--@@ -13,13 +12,6 @@
--   </component>
--   <component name="Git.Settings">
--     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
---  </component>
---  <component name="IgnoredFileRootStore">
---    <option name="generatedRoots">
---      <set>
---        <option value="D:\Documents\AndroidStudioProjects\Dragon\.idea" />
---      </set>
---    </option>
--   </component>
--   <component name="ProjectFrameBounds" extendedState="6">
--     <option name="x" value="24" />
--@@ -28,40 +20,18 @@
--     <option name="height" value="784" />
--   </component>
--   <component name="ProjectId" id="1hyRBJqIinM8JAy5Yx7d3w5cJmI" />
---  <component name="ProjectView">
---    <navigator currentView="ProjectPane" proportions="" version="1">
---      <foldersAlwaysOnTop value="true" />
---    </navigator>
---    <panes>
---      <pane id="ProjectPane" />
---      <pane id="Scope" />
---      <pane id="PackagesPane" />
---    </panes>
---  </component>
--   <component name="ProjectViewState">
--     <option name="hideEmptyMiddlePackages" value="true" />
---    <option name="showExcludedFiles" value="true" />
--     <option name="showLibraryContents" value="true" />
--   </component>
--   <component name="PropertiesComponent">
--+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
--     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--     <property name="android.sdk.path" value="$USER_HOME$/AppData/Local/Android/Sdk" />
--     <property name="last_opened_file_path" value="$PROJECT_DIR$/dragon" />
--     <property name="settings.editor.selected.configurable" value="settings.github" />
--     <property name="show.migrate.to.gradle.popup" value="false" />
--   </component>
---  <component name="RunDashboard">
---    <option name="ruleStates">
---      <list>
---        <RuleState>
---          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
---        </RuleState>
---        <RuleState>
---          <option name="name" value="StatusDashboardGroupingRule" />
---        </RuleState>
---      </list>
---    </option>
---  </component>
--   <component name="SvnConfiguration">
--     <configuration />
--   </component>
--@@ -75,24 +45,10 @@
--     </task>
--     <servers />
--   </component>
---  <component name="ToolWindowManager">
---    <frame x="-8" y="-8" width="1382" height="744" extended-state="6" />
---    <layout>
---      <window_info active="true" content_ui="combo" id="Project" visible="true" weight="0.3296131" />
---      <window_info id="Structure" side_tool="true" />
---      <window_info id="Image Layers" />
---      <window_info id="Designer" />
---      <window_info id="Resources Explorer" weight="0.3296131" />
---      <window_info id="Capture Tool" />
---      <window_info id="Favorites" side_tool="true" />
---      <window_info id="Captures" order="0" weight="0.25" />
---      <window_info anchor="bottom" id="Version Control" />
---      <window_info anchor="bottom" id="TODO" />
---      <window_info anchor="bottom" id="Terminal" />
---      <window_info anchor="bottom" id="Event Log" side_tool="true" />
---      <window_info anchor="right" id="Capture Analysis" />
---      <window_info anchor="right" id="Theme Preview" />
---      <window_info anchor="right" id="Palette&#9;" />
---    </layout>
--+  <component name="WindowStateProjectService">
--+    <state x="748" y="276" key="FileChooserDialogImpl" timestamp="1603162232134">
--+      <screen x="0" y="0" width="1920" height="1035" />
--+    </state>
--+    <state x="748" y="276" key="FileChooserDialogImpl/0.0.1920.1035@0.0.1920.1035" timestamp="1603162232134" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]/shelved.patch
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]/shelved.patch	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]/shelved.patch	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-@@ -1,158 +0,0 @@
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package mnm.bcs106.yoobeecolleges.dragon;\n\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\n\npublic class NPC_Pool {\n    int size = 20;\n\n    Wooloo[] npcWooloo = new Wooloo[size];\n    RangedNPC[] npcRangedNPC = new RangedNPC[size];\n    Wizard[] npcWizard = new Wizard[size];\n    public NPC_Pool(){\n        for(int i = 0 ;i < size; i++){\n            npcWooloo[i] = new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500);\n            npcRangedNPC[i] = new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,30);\n            npcWizard[i] = new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,100);\n        }\n    }\n    public Wooloo spawnWooloo (int spawnX, int spawnY){\n        for (int i = 0;i<size;i++){\n            if (!npcWooloo[i].alive) {\n                npcWooloo[i].alive = true;\n                npcWooloo[i].npcX = spawnX;\n                npcWooloo[i].npcY = spawnY;\n\n                return npcWooloo[i];\n            }\n        }\n\n        return null;\n    }\n\n    public void spawnArcher (int spawnX, int spawnY, int ammount){\n        int d = 0;\n        for (int i = 0;i<ammount;i++){\n            if (!npcRangedNPC[i].alive && d < ammount) {\n                npcRangedNPC[i].alive = true;\n                npcRangedNPC[i].npcX = spawnX;\n                npcRangedNPC[i].npcY = spawnY;\n                d++;\n            }\n        }\n    }public void spawnWizard (int spawnX, int spawnY, int ammount){\n        int d = 0;\n        for (int i = 0;i<ammount;i++){\n            if (!npcWizard[i].alive && d < ammount) {\n                npcWizard[i].alive = true;\n                npcWizard[i].npcX = spawnX;\n                npcWizard[i].npcY = spawnY;\n                d++;\n            }\n        }\n    }\n    public void draw (Canvas canvas){\n        for (int i = 0; i<size;i++){\n            if (npcWooloo[i].alive){\n                npcWooloo[i].draw(canvas);\n            }if (npcRangedNPC[i].alive){\n                npcRangedNPC[i].draw(canvas);\n            }if (npcWizard[i].alive){\n                npcWizard[i].draw(canvas);\n            }\n        }\n    }\n    public void update(float deltaTime){\n        for (int i = 0; i<size;i++){\n            if (npcWooloo[i].alive){\n                npcWooloo[i].update(deltaTime);\n            }if (npcRangedNPC[i].alive){\n                npcRangedNPC[i].update(deltaTime);\n            }if (npcWizard[i].alive){\n                npcWizard[i].update(deltaTime);\n            }\n        }\n    }\n    public void physics(float deltaTime){\n        for (int i = 0; i<size;i++){\n            if (npcWooloo[i].alive){\n                npcWooloo[i].physics(deltaTime);\n            }if (npcRangedNPC[i].alive){\n                npcRangedNPC[i].physics(deltaTime);\n            }if (npcWizard[i].alive){\n                npcWizard[i].physics(deltaTime);\n            }\n        }\n    }\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(revision b2f1d424610f58d467a324813465fda3f7369226)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(date 1603242100000)
--@@ -9,11 +9,13 @@
--     Wooloo[] npcWooloo = new Wooloo[size];
--     RangedNPC[] npcRangedNPC = new RangedNPC[size];
--     Wizard[] npcWizard = new Wizard[size];
--+    Villager[] npcVillager = new Villager[size];
--     public NPC_Pool(){
--         for(int i = 0 ;i < size; i++){
--             npcWooloo[i] = new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500);
--             npcRangedNPC[i] = new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,30);
--             npcWizard[i] = new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,100);
--+            npcVillager[i] = new Villager(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.villager),(float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20);
--         }
--     }
--     public Wooloo spawnWooloo (int spawnX, int spawnY){
--Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Villager.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Villager.java	(date 1603242100000)
--+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Villager.java	(date 1603242100000)
--@@ -0,0 +1,15 @@
--+package mnm.bcs106.yoobeecolleges.dragon;
--+
--+import android.graphics.Bitmap;
--+
--+public class Villager extends NPC {
--+    public Villager(Bitmap bitmap, float speed, int maxHP, int width, int height) {
--+        super(bitmap, speed, maxHP, width, height);
--+    }
--+
--+    @Override
--+    public void update(float deltaTime) {
--+
--+        super.update(deltaTime);
--+    }
--+}
--Index: ../.idea/workspace.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2c456dbc-1908-40f2-80b2-0a9bff2325fc\" name=\"Default Changelist\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png\" afterDir=\"false\" />\n    </list>\n    <option name=\"EXCLUDED_CONVERTED_TO_IGNORED\" value=\"true\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"IgnoredFileRootStore\">\n    <option name=\"generatedRoots\">\n      <set>\n        <option value=\"D:\\Documents\\AndroidStudioProjects\\Dragon\\.idea\" />\n      </set>\n    </option>\n  </component>\n  <component name=\"ProjectFrameBounds\" extendedState=\"6\">\n    <option name=\"x\" value=\"24\" />\n    <option name=\"y\" value=\"255\" />\n    <option name=\"width\" value=\"1317\" />\n    <option name=\"height\" value=\"784\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1hyRBJqIinM8JAy5Yx7d3w5cJmI\" />\n  <component name=\"ProjectView\">\n    <navigator currentView=\"ProjectPane\" proportions=\"\" version=\"1\">\n      <foldersAlwaysOnTop value=\"true\" />\n    </navigator>\n    <panes>\n      <pane id=\"ProjectPane\" />\n      <pane id=\"Scope\" />\n      <pane id=\"PackagesPane\" />\n    </panes>\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showExcludedFiles\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"android.sdk.path\" value=\"$USER_HOME$/AppData/Local/Android/Sdk\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/dragon\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"settings.github\" />\n    <property name=\"show.migrate.to.gradle.popup\" value=\"false\" />\n  </component>\n  <component name=\"RunDashboard\">\n    <option name=\"ruleStates\">\n      <list>\n        <RuleState>\n          <option name=\"name\" value=\"ConfigurationTypeDashboardGroupingRule\" />\n        </RuleState>\n        <RuleState>\n          <option name=\"name\" value=\"StatusDashboardGroupingRule\" />\n        </RuleState>\n      </list>\n    </option>\n  </component>\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2c456dbc-1908-40f2-80b2-0a9bff2325fc\" name=\"Default Changelist\" comment=\"\" />\n      <created>1600981208954</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1600981208954</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"ToolWindowManager\">\n    <frame x=\"-8\" y=\"-8\" width=\"1382\" height=\"744\" extended-state=\"6\" />\n    <layout>\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" visible=\"true\" weight=\"0.3296131\" />\n      <window_info id=\"Structure\" side_tool=\"true\" />\n      <window_info id=\"Image Layers\" />\n      <window_info id=\"Designer\" />\n      <window_info id=\"Resources Explorer\" weight=\"0.3296131\" />\n      <window_info id=\"Capture Tool\" />\n      <window_info id=\"Favorites\" side_tool=\"true\" />\n      <window_info id=\"Captures\" order=\"0\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" side_tool=\"true\" />\n      <window_info anchor=\"right\" id=\"Capture Analysis\" />\n      <window_info anchor=\"right\" id=\"Theme Preview\" />\n      <window_info anchor=\"right\" id=\"Palette&#9;\" />\n    </layout>\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- ../.idea/workspace.xml	(revision b2f1d424610f58d467a324813465fda3f7369226)
--+++ ../.idea/workspace.xml	(date 1603242100000)
--@@ -1,11 +1,10 @@
-- <?xml version="1.0" encoding="UTF-8"?>
-- <project version="4">
--+  <component name="AutoImportSettings">
--+    <option name="autoReloadType" value="NONE" />
--+  </component>
--   <component name="ChangeListManager">
---    <list default="true" id="2c456dbc-1908-40f2-80b2-0a9bff2325fc" name="Default Changelist" comment="">
---      <change beforePath="$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java" beforeDir="false" afterPath="$PROJECT_DIR$/dragon/app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java" afterDir="false" />
---      <change beforePath="$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png" beforeDir="false" afterPath="$PROJECT_DIR$/dragon/app/src/main/res/drawable/back_leg_flying_minimalism.png" afterDir="false" />
---    </list>
---    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
--+    <list default="true" id="2c456dbc-1908-40f2-80b2-0a9bff2325fc" name="Default Changelist" comment="" />
--     <option name="SHOW_DIALOG" value="false" />
--     <option name="HIGHLIGHT_CONFLICTS" value="true" />
--     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
--@@ -13,13 +12,6 @@
--   </component>
--   <component name="Git.Settings">
--     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
---  </component>
---  <component name="IgnoredFileRootStore">
---    <option name="generatedRoots">
---      <set>
---        <option value="D:\Documents\AndroidStudioProjects\Dragon\.idea" />
---      </set>
---    </option>
--   </component>
--   <component name="ProjectFrameBounds" extendedState="6">
--     <option name="x" value="24" />
--@@ -28,40 +20,18 @@
--     <option name="height" value="784" />
--   </component>
--   <component name="ProjectId" id="1hyRBJqIinM8JAy5Yx7d3w5cJmI" />
---  <component name="ProjectView">
---    <navigator currentView="ProjectPane" proportions="" version="1">
---      <foldersAlwaysOnTop value="true" />
---    </navigator>
---    <panes>
---      <pane id="ProjectPane" />
---      <pane id="Scope" />
---      <pane id="PackagesPane" />
---    </panes>
---  </component>
--   <component name="ProjectViewState">
--     <option name="hideEmptyMiddlePackages" value="true" />
---    <option name="showExcludedFiles" value="true" />
--     <option name="showLibraryContents" value="true" />
--   </component>
--   <component name="PropertiesComponent">
--+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
--     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
--     <property name="android.sdk.path" value="$USER_HOME$/AppData/Local/Android/Sdk" />
--     <property name="last_opened_file_path" value="$PROJECT_DIR$/dragon" />
--     <property name="settings.editor.selected.configurable" value="settings.github" />
--     <property name="show.migrate.to.gradle.popup" value="false" />
--   </component>
---  <component name="RunDashboard">
---    <option name="ruleStates">
---      <list>
---        <RuleState>
---          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
---        </RuleState>
---        <RuleState>
---          <option name="name" value="StatusDashboardGroupingRule" />
---        </RuleState>
---      </list>
---    </option>
---  </component>
--   <component name="SvnConfiguration">
--     <configuration />
--   </component>
--@@ -75,24 +45,10 @@
--     </task>
--     <servers />
--   </component>
---  <component name="ToolWindowManager">
---    <frame x="-8" y="-8" width="1382" height="744" extended-state="6" />
---    <layout>
---      <window_info active="true" content_ui="combo" id="Project" visible="true" weight="0.3296131" />
---      <window_info id="Structure" side_tool="true" />
---      <window_info id="Image Layers" />
---      <window_info id="Designer" />
---      <window_info id="Resources Explorer" weight="0.3296131" />
---      <window_info id="Capture Tool" />
---      <window_info id="Favorites" side_tool="true" />
---      <window_info id="Captures" order="0" weight="0.25" />
---      <window_info anchor="bottom" id="Version Control" />
---      <window_info anchor="bottom" id="TODO" />
---      <window_info anchor="bottom" id="Terminal" />
---      <window_info anchor="bottom" id="Event Log" side_tool="true" />
---      <window_info anchor="right" id="Capture Analysis" />
---      <window_info anchor="right" id="Theme Preview" />
---      <window_info anchor="right" id="Palette&#9;" />
---    </layout>
--+  <component name="WindowStateProjectService">
--+    <state x="748" y="276" key="FileChooserDialogImpl" timestamp="1603162232134">
--+      <screen x="0" y="0" width="1920" height="1035" />
--+    </state>
--+    <state x="748" y="276" key="FileChooserDialogImpl/0.0.1920.1035@0.0.1920.1035" timestamp="1603162232134" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM__Default_Changelist_.xml
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM__Default_Changelist_.xml	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM__Default_Changelist_.xml	(revision 622a9edc36669108190403ed90deea7a5c9ee9d2)
-@@ -1,9 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]" date="1603242100751" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 21/10/20 2:01 PM [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" />
--    <option name="AFTER_PATH" value="app/src/main/res/drawable/villager.png" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]/villager.png" />
--  </binary>
--</changelist>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM__Default_Changelist_.xml	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM__Default_Changelist_.xml	(revision acb4fa292a4617066f4d3989926baf864f926a29)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM_[Default_Changelist]" date="1604199036422" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/1/2020 3:50 PM [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="app/src/main/res/drawable/ottwizard.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM_[Default_Changelist]/ottwizard.png" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM__Default_Changelist_.xml	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM__Default_Changelist_.xml	(revision acb4fa292a4617066f4d3989926baf864f926a29)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM_[Default_Changelist]" date="1604001502569" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/30/2020 8:58 AM [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_06_PM_[Default_Changelist]/villager.png" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Update_at_21_10_20_2_01_PM_[Default_Changelist]/villager.png" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM__Default_Changelist_.xml	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM__Default_Changelist_.xml	(revision acb4fa292a4617066f4d3989926baf864f926a29)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM_[Default_Changelist]" date="1604121474065" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/31/2020 6:17 PM [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="app/src/main/res/drawable/ottwizard.png" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_31_2020_6_17_PM_[Default_Changelist]/ottwizard.png" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM_[Default_Changelist]/shelved.patch	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_11_1_2020_3_50_PM_[Default_Changelist]/shelved.patch	(revision acb4fa292a4617066f4d3989926baf864f926a29)
@@ -1,129 +0,0 @@
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class NPC_Pool {\r\n    int size = 20;\r\n\r\n    ArrayList<Wooloo> npcWooloo = new ArrayList<Wooloo>();\r\n    ArrayList<RangedNPC>  npcRangedNPC = new ArrayList<RangedNPC>();\r\n    ArrayList<Wizard>  npcWizard = new ArrayList<Wizard>();\r\n    ArrayList<Farmers>  npcFarmers = new ArrayList<Farmers>();\r\n    public NPC_Pool(){\r\n        for(int i = 0 ;i < size; i++){\r\n            npcWooloo.add(new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/45000,100,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,500));\r\n            npcRangedNPC.add(new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,1));\r\n            npcWizard.add(new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/65000,500,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,25));\r\n\r\n//            if(i%2==0) {\r\n  //              npcFarmers.add(new Farmers(BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.villager), (float) GameView.instance.cameraSize / 25000, 500, GameView.instance.cameraSize / 20, GameView.instance.cameraSize / 20, 0));\r\n    //        }\r\n      //      else {\r\n                npcFarmers.add(new Farmers(BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.farmer_paper), (float) GameView.instance.cameraSize / 25000, 500, GameView.instance.cameraSize / 60, GameView.instance.cameraSize / 30, 0));\r\n        //    }\r\n        }\r\n    }\r\n    public Wooloo spawnWooloo (int spawnX, int spawnY){\r\n        for (int i = 0;i<size;i++){\r\n            if (!npcWooloo.get(i).alive) {\r\n                npcWooloo.get(i).spawn(spawnX,spawnY);\r\n                return npcWooloo.get(i);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public void spawnArcher (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcRangedNPC.get(i).alive && d < ammount) {\r\n                npcRangedNPC.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }public void spawnWizard (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcWizard.get(i).alive && d < ammount) {\r\n                npcWizard.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }public Farmers spawnFarmers (int spawnX, int spawnY){\r\n\r\n        for (int i = 0;i<size;i++){\r\n            if (!npcFarmers.get(i).alive) {\r\n                npcFarmers.get(i).spawn(spawnX,spawnY);\r\n                return npcFarmers.get(i);}\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void draw (Canvas canvas){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).alive){\r\n                npcWooloo.get(i).draw(canvas);\r\n            }if (npcRangedNPC.get(i).alive){\r\n                npcRangedNPC.get(i).draw(canvas);\r\n            }if (npcWizard.get(i).alive){\r\n                npcWizard.get(i).draw(canvas);\r\n            }if (npcFarmers.get(i).alive){\r\n                npcFarmers.get(i).draw(canvas);\r\n            }\r\n        }\r\n    }\r\n    public void update(float deltaTime){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).alive){\r\n                npcWooloo.get(i).update(deltaTime);\r\n            }if (npcRangedNPC.get(i).alive){\r\n                npcRangedNPC.get(i).update(deltaTime);\r\n            }if (npcWizard.get(i).alive){\r\n                npcWizard.get(i).update(deltaTime);\r\n            }if (npcFarmers.get(i).alive){\r\n                npcFarmers.get(i).update(deltaTime);\r\n            }\r\n        }\r\n    }\r\n    public void physics(float deltaTime){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).alive){\r\n                npcWooloo.get(i).physics(deltaTime);\r\n            }if (npcRangedNPC.get(i).alive){\r\n                npcRangedNPC.get(i).physics(deltaTime);\r\n            }if (npcWizard.get(i).alive){\r\n                npcWizard.get(i).physics(deltaTime);\r\n            }if (npcFarmers.get(i).alive){\r\n                npcFarmers.get(i).physics(deltaTime);\r\n            }\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(revision f100d2201452fc6db8a7020c5cd08a46c0f71934)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(date 1604199027976)
-@@ -16,7 +16,7 @@
-         for(int i = 0 ;i < size; i++){
-             npcWooloo.add(new Wooloo(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/45000,100,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,500));
-             npcRangedNPC.add(new RangedNPC(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/25000,300,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,1));
--            npcWizard.add(new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.wooloo),(float)GameView.instance.cameraSize/65000,500,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,25));
-+            npcWizard.add(new Wizard(BitmapFactory.decodeResource(GameView.instance.getResources(),R.drawable.ottwizard),(float)GameView.instance.cameraSize/65000,500,GameView.instance.cameraSize/40,GameView.instance.cameraSize/40,25));
- 
- //            if(i%2==0) {
-   //              npcFarmers.add(new Farmers(BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.villager), (float) GameView.instance.cameraSize / 25000, 500, GameView.instance.cameraSize / 20, GameView.instance.cameraSize / 20, 0));
-@@ -54,9 +54,11 @@
-             }
-         }
-     }public Farmers spawnFarmers (int spawnX, int spawnY){
--
-         for (int i = 0;i<size;i++){
-             if (!npcFarmers.get(i).alive) {
-+                for (int j = 0;j > GameView.instance.fortress.currentBuildingsLeft.size();j++){
-+                    if (GameView.instance.fortress.currentBuildingsLeft.get(j) == );
-+                }
-                 npcFarmers.get(i).spawn(spawnX,spawnY);
-                 return npcFarmers.get(i);}
-         }
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\n\r\npublic class Farmers extends NPC {\r\n\r\n    public int farmX;\r\n    public boolean wasAttacked = false;\r\n    public boolean atFarm = false;\r\n    public boolean finished;\r\n\r\n    public Farmers(Bitmap bitmap, float speed, int maxHP, int width, int height,int FX) {\r\n        super(bitmap, speed, maxHP, width, height);\r\n        creationPoint.x = 0;\r\n        creationPoint.y = 0;\r\n        farmX = creationPoint.x+500;\r\n    }\r\n    public void doStuff(){\r\n         finished = false;\r\n    }\r\n\r\n    @Override\r\n    public void update(float deltaTime) {\r\n        if (!wasAttacked){\r\n            if (Math.abs(GameView.instance.player.position.x-npcX)<300){\r\n                flee = true;\r\n                target.x = (int) (npcX+(-(Math.signum(GameView.instance.player.position.x-npcX))*1500));\r\n                creationPoint.x= target.x;\r\n                wasAttacked = true;\r\n            }\r\n            if (atFarm && target.x == npcX){\r\n                if (countdown>=2000) {\r\n                    doStuff();\r\n                    if (finished == true){\r\n                        target.x = creationPoint.x;\r\n                        atFarm = false;\r\n                    }\r\n                }\r\n            }else if (npcX == target.x && !atFarm){\r\n                target.x = farmX;\r\n                atFarm = true;\r\n            }\r\n        }else {\r\n            if (Math.abs(GameView.instance.player.position.x-npcX)<300){\r\n                flee = true;\r\n                target.x = (int) (npcX+(-(Math.signum(GameView.instance.player.position.x-npcX))*1500));\r\n                creationPoint.x= target.x;\r\n            }else idle(500,Math.abs(npcX-target.x) < 10);\r\n        }\r\n        super.update(deltaTime);\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(revision f100d2201452fc6db8a7020c5cd08a46c0f71934)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(date 1604198371339)
-@@ -6,21 +6,24 @@
- 
-     public int farmX;
-     public boolean wasAttacked = false;
--    public boolean atFarm = false;
--    public boolean finished;
-+    public boolean atFarm = true;
- 
-     public Farmers(Bitmap bitmap, float speed, int maxHP, int width, int height,int FX) {
-         super(bitmap, speed, maxHP, width, height);
--        creationPoint.x = 0;
--        creationPoint.y = 0;
-+    }
-+
-+    @Override
-+    public void spawn(int spawnX, int spawnY) {
-+        super.spawn(spawnX, spawnY);
-         farmX = creationPoint.x+500;
-     }
-+
-     public void doStuff(){
--         finished = false;
-     }
- 
-     @Override
-     public void update(float deltaTime) {
-+        System.out.println(countdown);
-         if (!wasAttacked){
-             if (Math.abs(GameView.instance.player.position.x-npcX)<300){
-                 flee = true;
-@@ -28,15 +31,18 @@
-                 creationPoint.x= target.x;
-                 wasAttacked = true;
-             }
--            if (atFarm && target.x == npcX){
--                if (countdown>=2000) {
--                    doStuff();
--                    if (finished == true){
--                        target.x = creationPoint.x;
--                        atFarm = false;
--                    }
-+            System.out.println(target.x);
-+            System.out.println(npcX);
-+            if (atFarm && Math.abs(target.x-npcX) < 7){
-+                if (countdown>=7000) {
-+                    System.out.println("finished");
-+                    target.x = creationPoint.x;
-+                    atFarm = false;
-+                    countdown = 0;
-+                }else {
-+                    doStuff();
-                 }
--            }else if (npcX == target.x && !atFarm){
-+            }else if (Math.abs(target.x-npcX) < 7 && !atFarm){
-                 target.x = farmX;
-                 atFarm = true;
-             }
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.graphics.RectF;\r\nimport android.text.BoringLayout;\r\n\r\nimport java.sql.Time;\r\nimport java.util.Timer;\r\nimport java.util.Vector;\r\n\r\npublic class NPC {\r\n    public Bitmap npcBitmap;\r\n    public int npcX,npcY,npcMaxHP,npcHp,npcWidth,npcHeight;\r\n    public Rect npcRect, npcCollider;\r\n    public float npcSpeed;\r\n    public Boolean alive = false;\r\n    public Point movement;\r\n    public Point target = new Point();\r\n    public float npcFleeSpeed;\r\n    public boolean flee = false;\r\n    public ActionController damagePeriod;\r\n    public int direction;\r\n    public int countdown;\r\n    double random;\r\n    public Point creationPoint = new Point();\r\n    public NPC (Bitmap bitmap, float speed, int maxHP, int width,int height) {\r\n        npcBitmap = bitmap;\r\n        npcX = 0;\r\n        npcY = 0;\r\n        npcMaxHP = maxHP;\r\n        npcHp = maxHP;\r\n        npcSpeed = speed;\r\n        npcFleeSpeed = (float) ((Math.random()*npcSpeed)+(npcSpeed*3));\r\n        npcWidth = width;\r\n        npcHeight = height;\r\n        npcRect = new Rect(npcX,npcY,width+npcX,height+npcY);\r\n        npcCollider = new Rect(npcX,npcY,width+npcX,height+npcY);\r\n        damagePeriod = new ActionController(0,5000,5000);\r\n        random = Math.random();\r\n    }\r\n    public void spawn (int spawnX, int spawnY){\r\n        npcX = spawnX;\r\n        npcY = spawnY;\r\n        creationPoint.x = spawnX;\r\n        creationPoint.y = spawnY;\r\n        alive = true;\r\n    }\r\n    public  void OnDamage () {\r\n        damagePeriod.triggerAction();\r\n        npcHp-=1;\r\n        if (npcHp<=0){\r\n            death();\r\n        }\r\n    }\r\n    public void death(){\r\n        alive = false;\r\n        npcX = 0;\r\n        npcY = 0;\r\n    }\r\n    float distTravel = 0;\r\n    public void draw(Canvas canvas){\r\n        if (alive){\r\n            RectF tempRect = new RectF(0,0,npcBitmap.getWidth(),npcBitmap.getHeight());\r\n            int top  = (int) (npcRect.top+Math.sin(distTravel/4+random*Math.PI*2)*3);\r\n\r\n            int left  = npcRect.left;\r\n            int right  = left+npcRect.width();\r\n            int bottom  = top+npcRect.height();\r\n            RectF destTempRect = new RectF(left,top,right,bottom);\r\n            Matrix matrix = new Matrix();\r\n            matrix.setRectToRect(tempRect,destTempRect, Matrix.ScaleToFit.FILL);\r\n            matrix.postScale(direction,1,destTempRect.centerX(),destTempRect.centerY());\r\n            canvas.drawBitmap(npcBitmap,matrix,Scene.instance.frontPaint);\r\n        }\r\n    }\r\n\r\n    public  boolean there = false;\r\n    public void moveToTarget(float deltaTime){\r\n        if (Math.abs(target.x-npcX) > 5){\r\n            if (!flee){\r\n                npcX+=direction*npcSpeed*deltaTime;\r\n                distTravel+=npcSpeed*deltaTime;\r\n            } else {\r\n                npcX+=direction*npcFleeSpeed*deltaTime;\r\n                distTravel+=npcFleeSpeed*deltaTime;\r\n            }\r\n        }\r\n        else {\r\n            distTravel = 0;\r\n        }\r\n    }\r\n    public void update(float deltaTime){\r\n        countdown+=deltaTime;\r\n        if (Math.abs(target.x-npcX)>1){\r\n            direction = (int) Math.signum(target.x-npcX);\r\n        }\r\n        moveToTarget(deltaTime);\r\n        npcY = (int) GameView.instance.groundLevel-npcRect.height();\r\n        npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),npcY);\r\n\r\n\r\n    }\r\n    public  void  physics(float deltaTime) {\r\n        npcCollider = new Rect(npcX, npcY, npcX + npcRect.width(), npcY + npcRect.height());\r\n        //System.out.println(\"npcphysics\");\r\n        if (GameView.instance.player.fireBreath.collision(npcCollider)&&!damagePeriod.performing){\r\n\r\n                //System.out.println(npcHp);\r\n                OnDamage();\r\n\r\n        }\r\n    }\r\n\r\n    public void idle(int boundry,boolean lessTen){\r\n        if (countdown >= Math.random()*1000+1000){\r\n            if (lessTen) {\r\n                flee = false;\r\n                double targetDistance = (Math.random() - 0.5) * boundry;\r\n                target.x = (int) (creationPoint.x + targetDistance);\r\n                countdown = 0;\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java	(revision f100d2201452fc6db8a7020c5cd08a46c0f71934)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java	(date 1604121473784)
-@@ -45,8 +45,9 @@
-     public void spawn (int spawnX, int spawnY){
-         npcX = spawnX;
-         npcY = spawnY;
--        creationPoint.x = spawnX;
--        creationPoint.y = spawnY;
-+        creationPoint.x = npcX;
-+        creationPoint.y = npcY;
-+        target.x = npcX;
-         alive = true;
-     }
-     public  void OnDamage () {
-@@ -101,8 +102,6 @@
-         moveToTarget(deltaTime);
-         npcY = (int) GameView.instance.groundLevel-npcRect.height();
-         npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),npcY);
--
--
-     }
-     public  void  physics(float deltaTime) {
-         npcCollider = new Rect(npcX, npcY, npcX + npcRect.width(), npcY + npcRect.height());
-diff --git .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_10_30_2020_8_58_AM__Default_Changelist_.xml
-diff --git .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM__Default_Changelist_.xml
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+> package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Point;\r\n\r\npublic class Farmers extends NPC {\r\n\r\n    public int farmX;\r\n    public int workTime = 0;\r\n    public boolean wasAttacked = false;\r\n    public boolean atFarm = true;\r\n    public boolean whereFarm = false;\r\n    public boolean work = false;\r\n\r\n    public Farmers(Bitmap bitmap, float speed, int maxHP, int width, int height,int FX) {\r\n        super(bitmap, speed, maxHP, width, height);\r\n        farmX = npcX ;\r\n    }\r\n\r\n    @Override\r\n    public void spawn(int spawnX, int spawnY) {\r\n        super.spawn(spawnX, spawnY);\r\n    }\r\n\r\n    public void doStuff() {\r\n\r\n    }\r\n\r\n    public Boolean atHome = false;\r\n    @Override\r\n    public void update(float deltaTime) {\r\n        if(((Scene.instance.timeOfDay)/(Scene.instance.dayLength) > 0) && ((Scene.instance.timeOfDay)/(Scene.instance.dayLength) < 0.5) && alive) {\r\n//            System.out.println(workTime);\r\n            if (atHome){\r\n                npcY = CreationPoint.y;\r\n                atHome = false;\r\n                flee = false;\r\n            }\r\n            if (work) {\r\n                workTime += deltaTime;\r\n            }\r\n            if (!whereFarm) {\r\n                Point closestFarm = new Point();\r\n                closestFarm.y = 100000;\r\n                for (int j = 0; j < GameView.instance.fortress.currentBuildingsRight.size(); j++) {\r\n                    if (GameView.instance.fortress.currentBuildingsRight.get(j).buildingType == 3) {\r\n                        if (Math.abs(npcX - GameView.instance.fortress.currentBuildingsRight.get(j).x) < closestFarm.y) {\r\n                            farmX = (int) (GameView.instance.fortress.currentBuildingsRight.get(j).x+GameView.instance.fortress.tilesize*1.5);\r\n                            closestFarm.y = Math.abs(npcX - GameView.instance.fortress.currentBuildingsRight.get(j).x);\r\n                        }\r\n                    }\r\n                }\r\n                for (int j = 0; j < GameView.instance.fortress.currentBuildingsLeft.size(); j++) {\r\n                    if (GameView.instance.fortress.currentBuildingsLeft.size() > j) {\r\n                        if (GameView.instance.fortress.currentBuildingsLeft.get(j).buildingType == 3) {\r\n                            if (Math.abs(npcX - GameView.instance.fortress.currentBuildingsLeft.get(j).x) < closestFarm.y) {\r\n                                farmX = (int) (GameView.instance.fortress.currentBuildingsLeft.get(j).x+GameView.instance.fortress.tilesize*1.5);\r\n                                closestFarm.y = Math.abs(npcX - GameView.instance.fortress.currentBuildingsLeft.get(j).x);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (farmX != npcX) {\r\n                    whereFarm = true;\r\n                }\r\n            }\r\n            if (!wasAttacked) {\r\n                if (Math.abs(GameView.instance.player.position.x - npcX) < 300) {\r\n                    flee = true;\r\n                    target.x = (int) (npcX + (-(Math.signum(GameView.instance.player.position.x - npcX)) * 1500));\r\n                    tempCreationPoint.x = target.x;\r\n                    wasAttacked = true;\r\n                }\r\n                if (atFarm && Math.abs(target.x - npcX) < 7) {\r\n                    work = true;\r\n                    if (workTime >= 3000) {\r\n                        target.x = tempCreationPoint.x;\r\n                        atFarm = false;\r\n                        workTime = 0;\r\n                        work = false;\r\n                    } else {\r\n                        doStuff();\r\n                    }\r\n                } else if (Math.abs(target.x - npcX) < 7 && !atFarm) {\r\n                    target.x = farmX;\r\n                    atFarm = true;\r\n                }\r\n            } else {\r\n                if (Math.abs(GameView.instance.player.position.x - npcX) < 300) {\r\n                    flee = true;\r\n                    target.x = (int) (npcX + (-(Math.signum(GameView.instance.player.position.x - npcX)) * 1500));\r\n                    tempCreationPoint.x = target.x;\r\n                } else idle(500, Math.abs(npcX - target.x) < 10);\r\n            }\r\n            super.update(deltaTime);\r\n        }else{\r\n            if (alive){\r\n                if (Math.abs(npcX-CreationPoint.x) < 7 && !atHome){\r\n//                    System.out.println(\"CP = \" + CreationPoint.x + \" Target = \" + target.x + \" TempCP = \" + tempCreationPoint.x);\r\n                    atHome = true;\r\n                    tempCreationPoint.x = CreationPoint.x;\r\n                    tempCreationPoint.y = CreationPoint.y;\r\n                }\r\n                if (!atHome){\r\n                    flee = true;\r\n                    target.x = CreationPoint.x;\r\n                    super.update(deltaTime);\r\n                }else {\r\n                    wasAttacked = false;\r\n                    npcY += npcRect.height()*7;\r\n                    npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),npcY);\r\n            }\r\n            }else {\r\n                wasAttacked = false;\r\n                super.update(deltaTime);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(revision acb4fa292a4617066f4d3989926baf864f926a29)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(date 1604614134100)
@@ -111,6 +111,9 @@
                     npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),npcY);
             }
             }else {
+                if(wasAttacked = true){
+                    int r = (int)(Math.random()*3);
+                    GoldPool.instance.spawnGold(npcX, npcY,r);}
                 wasAttacked = false;
                 super.update(deltaTime);
             }
