Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Point;\r\n\r\npublic class ArcherTower extends Foundation {\r\n    static int cost;\r\n    float attackRange = (1f/2);\r\n\r\n    boolean hasAttacked = false;\r\n    public Point creationPoint = new Point();\r\n\r\n    float countdown = 0;\r\n    int attack = 0;\r\n\r\n    public static int tileNr = 1;\r\n\r\n    public ArcherTower( int x, int y, boolean isStanding, GameView activity){\r\n        super( x, y, tileNr, isStanding, activity );\r\n\r\n        cost = 160;\r\n        buildingType = 4;\r\n        maxHealth = 400;\r\n        health = maxHealth;\r\n\r\n        if(Math.random()<0.5f) {\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Tower1\");\r\n        }\r\n        else{\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Tower1\");\r\n        }\r\n        height = width*buildingImage.height()/buildingImage.width();\r\n        creationPoint.x = x+(width/2);\r\n        creationPoint.y = (int)((y - height*3/4));\r\n        System.out.println(\"Tower spawned\");\r\n    }\r\n\r\n\r\n    //adding physics to the arrows\r\n    public void Physics(float deltaTime){\r\n\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        if (Math.abs(GameView.instance.player.position.x-creationPoint.x)<GameView.instance.cameraSize*attackRange){\r\n            return true;}\r\n        return false;\r\n    }\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        float randomx = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/10;\r\n        float randomy = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/5;\r\n        Vector2 target = GameView.instance.player.aimFor();\r\n        float dx = target.x-creationPoint.x;\r\n        float dy =target.y-creationPoint.y;\r\n        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 1, dx+randomx, dy+randomy, 2);\r\n    }\r\n\r\n    public void update(float fixedDeltaTime){\r\n        super.update(fixedDeltaTime);\r\n        creationPoint.y = (int)((y - height*3/4));\r\n\r\n        System.out.println(health);\r\n        System.out.println(isStanding);\r\n\r\n        if(isStanding) {\r\n            countdown+=fixedDeltaTime;\r\n            //System.out.println(countdown);\r\n            if (inRange()) {\r\n\r\n                if (countdown > 1000) {\r\n\r\n                    if(countdown > 1200 && attack == 0) {\r\n                        Attack();\r\n\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown > 1400 && attack == 1) {\r\n                        Attack();\r\n\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown > 1600 && attack == 2) {\r\n                        Attack();\r\n\r\n                        attack+=1;\r\n                    }\r\n\r\n                    if(countdown >= 1800){\r\n                        countdown = 0;\r\n                        attack= 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        else{\r\n            buildingImage = SpriteManager.instance.getBuildingSprite(\"TowerRuin\");\r\n\r\n            if(beenEmptied == false){\r\n                GoldPool.instance.spawnGold(x, y-3,goldRate/5);\r\n                beenEmptied = true;}\r\n\r\n            goldRate = 0;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void OnDamage() {\r\n        super.OnDamage();\r\n\r\n        if(health == 0 && isStanding){\r\n            isStanding = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 1;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(date 1604459057413)
@@ -63,8 +63,8 @@
         super.update(fixedDeltaTime);
         creationPoint.y = (int)((y - height*3/4));
 
-        System.out.println(health);
-        System.out.println(isStanding);
+        /*System.out.println(health);
+        System.out.println(isStanding);*/
 
         if(isStanding) {
             countdown+=fixedDeltaTime;
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.SocketTimeoutException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class Fortress extends Foundation {\r\n\r\n\r\n    //All the stuff the fortress needs and can do;\r\n\r\n    int lv;\r\n\r\n    int maxHealth = 500;\r\n\r\n    int currentGold;\r\n    int maxGold;\r\n    public int goldRate = 15;\r\n\r\n    int currentTilesLeft;\r\n    int currentTilesRight;\r\n    int maxTiles = 8;\r\n\r\n    public Point creationPoint = new Point();\r\n    float attackRange = (1f/2);\r\n\r\n    float countdown = 0;\r\n    int attack = 0;\r\n\r\n    ArrayList<Foundation> currentBuildingsRight = new ArrayList<Foundation>();\r\n    ArrayList<Foundation> currentBuildingsLeft = new ArrayList<Foundation>();\r\n    int maxBuildings;\r\n\r\n    //number of buildings in the village/town\r\n\r\n    public int currentTownInhabitants;\r\n    public int maxTownInhabitants; // defined by the houses/farms\r\n\r\n    //public Foundation[] buildings = new Foundation[5];\r\n\r\n    ArcherTower archertower;\r\n    boolean hasTaxed = false;\r\n\r\n    boolean hasFarm = false;\r\n    // attack function\r\n    public static int tileNr = 3;\r\n\r\n    float townFear;\r\n\r\n    ArrayList<String> BD = new ArrayList<>();\r\n    boolean muchFarms = true;\r\n    boolean muchFear = false;\r\n\r\n    int tower = 0;\r\n\r\n    //Fortress constructor, used when calling Fortress();\r\n\r\n    //this specific Fortress\r\n    public Fortress(int x, int y, boolean isStanding, GameView activity) {\r\n        super(x, y, tileNr, isStanding, activity);\r\n        buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress1\");\r\n        height = width * buildingImage.height() / buildingImage.width();\r\n\r\n        BD.add(\"House\");\r\n        BD.add(\"House\");\r\n        BD.add(\"House\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n\r\n\r\n        Random r = new Random();\r\n        x = r.nextInt();\r\n        buildingType = 1;\r\n        currentGold = 150;\r\n\r\n        maxBuildings = 5;\r\n        maxGold = 400;\r\n        lv = 0;\r\n\r\n        System.out.println(x);\r\n        creationPoint.x = x+(width/2);\r\n        creationPoint.y = (int)(GameView.instance.groundLevel - height*3/4);\r\n\r\n        Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);\r\n    }\r\n\r\n    //new test with arraylists works pretty much, tiles and buildings still individual from each other\r\n\r\n    public void update(float deltaTime) {\r\n\r\n        /*System.out.println(creationPoint.x);\r\n        System.out.println(GameView.instance.player.position.x);\r\n        System.out.println(GameView.instance.player.position.x-creationPoint.x);\r\n        System.out.println(GameView.instance.cameraSize*attackRange);*/\r\n\r\n        int currentGold1 = currentGold;\r\n\r\n        if (currentGold < maxGold) {\r\n\r\n            //Money income\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2\r\n                    && (!hasTaxed)) {\r\n\r\n                goldRate = 15;\r\n\r\n                for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n                    goldRate = currentBuildingsRight.get(i).goldRate + goldRate;\r\n                }\r\n\r\n                for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n                    goldRate = currentBuildingsLeft.get(i).goldRate + goldRate;\r\n                }\r\n\r\n\r\n                currentGold = currentGold + (int) (goldRate * 1.2);\r\n\r\n\r\n                if (currentGold > maxGold) {\r\n                    currentGold = currentGold - (currentGold - maxGold);\r\n                }\r\n\r\n                for (int i = 0; i < BD.size(); i++) {\r\n                    System.out.print(BD.get(i) + \", \");\r\n                }\r\n                System.out.println(\"Town's Fear :\" + townFear);\r\n\r\n                hasTaxed = true;\r\n            }\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) > 0.7) hasTaxed = false;\r\n\r\n            if (currentGold != currentGold1) {\r\n                System.out.println(\"Goldrate : \" + goldRate);\r\n                System.out.println(\"Gold : \" + currentGold);\r\n            }\r\n        }\r\n\r\n        //=======================================================================================//\r\n\r\n        //Buildings\r\n\r\n        //=======================================================================================//\r\n\r\n\r\n        //System.out.println((int)(House.cost*((lv*1.75)+1)));\r\n\r\n        if (((currentBuildingsRight.size() + currentBuildingsLeft.size()) < maxBuildings)) {\r\n            spawnRandomBuilding();\r\n        }\r\n\r\n        tower = 0;\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n            if (currentBuildingsRight.get(i).buildingType == 4)\r\n                tower++;\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n            if (currentBuildingsLeft.get(i).buildingType == 4)\r\n                tower++;\r\n        }\r\n        //===================================================================================//\r\n\r\n        //Lv up conditions\r\n\r\n        //===================================================================================//\r\n\r\n        if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold / 10 * 9))\r\n                && lv == 0) {\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 300;\r\n            maxBuildings = 12;\r\n\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress2\");\r\n\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize * tileNr) + (currentTilesRight) * tilesize, y, true, activity));\r\n            currentTilesRight += 1;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft) * tilesize - ArcherTower.tileNr * tilesize, y, true, activity));\r\n            currentTilesLeft += 1;\r\n        }\r\n\r\n        if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold / 10 * 9))\r\n                && lv == 1) {\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 600;\r\n            maxBuildings = 18;\r\n\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress3\");\r\n\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize * tileNr) + (currentTilesRight) * tilesize, y, true, activity));\r\n            currentTilesRight += 1;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft) * tilesize - ArcherTower.tileNr * tilesize, y, true, activity));\r\n            currentTilesLeft += 1;\r\n        }\r\n\r\n        //====    =====  =====     =     ==  ====    ============================\r\n        //=   =   ==     =    =   = =    ==  =   =   ============================\r\n        //====    ==     =====   =====   ==  ====    ============================\r\n        //=   ==  =====  =      =     =  ==  =   ==  ============================\r\n\r\n        float tempfear;\r\n        if (!isStanding) {\r\n            repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n        }\r\n\r\n        else {\r\n            boolean repairingRight = false, repairingLeft = false;\r\n            tempfear = 0;\r\n\r\n            //RIGHT SIDE\r\n            for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n                currentBuildingsRight.get(i).update(deltaTime);\r\n\r\n                //repairing\r\n                if (!repairingRight && !currentBuildingsRight.get(i).isStanding) {\r\n\r\n                    if (currentBuildingsRight.get(i).buildingType == 2) {\r\n\r\n                        if ((townFear - 4) / 10 > tower / 2 && lv > 0) {\r\n                            System.out.println(\"converting house -> tower R\");\r\n                            int bx = currentBuildingsRight.get(i).x;\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx, y, true, activity));\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx, y, false, activity));\r\n                            currentBuildingsRight.get(i).health = 0;\r\n                        }\r\n                    }\r\n\r\n                    else if(currentBuildingsRight.get(i).buildingType == 4){\r\n\r\n                        if (townFear/10 < 2*lv && tower > 6) {\r\n                            System.out.println(\"converting tower -> house R\");\r\n                            int bx = currentBuildingsRight.get(i).x;\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx,y,true,activity));\r\n                        }\r\n                    }\r\n\r\n                    currentBuildingsRight.get(i).repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n                    repairingRight = true;\r\n\r\n                }\r\n\r\n                //gathering fear\r\n                tempfear += currentBuildingsRight.get(i).fear;\r\n            }\r\n\r\n            //LEFT SIDE\r\n            for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n                currentBuildingsLeft.get(i).update(deltaTime);\r\n\r\n                //repairing\r\n                if (!repairingLeft && !currentBuildingsLeft.get(i).isStanding) {\r\n\r\n\r\n                    if (currentBuildingsLeft.get(i).buildingType == 2) {\r\n                        System.out.println(\"this is a house L\");\r\n                        if ((townFear - 4) / 10 > tower / 2 && lv > 0) {\r\n                            System.out.println(\"converting house -> tower L\");\r\n                            int bx = currentBuildingsLeft.get(i).x;\r\n                            currentBuildingsLeft.set(i, new ArcherTower(bx, y, false, activity));\r\n                            currentBuildingsLeft.get(i).health = 0;\r\n                        }\r\n                    }\r\n\r\n                    else if(currentBuildingsLeft.get(i).buildingType == 4){\r\n\r\n                        if (townFear/10 < 2*lv && tower > 6) {\r\n                            System.out.println(\"converting tower -> house L\");\r\n                            int bx = currentBuildingsLeft.get(i).x;\r\n                            currentBuildingsLeft.set(i, new ArcherTower(bx,y,true,activity));\r\n                        }\r\n                    }\r\n                }\r\n                currentBuildingsLeft.get(i).repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n                repairingLeft = true;\r\n\r\n                tempfear += currentBuildingsLeft.get(i).fear;\r\n            }\r\n\r\n            //gathering fear\r\n            townFear = (tempfear / (currentBuildingsLeft.size() + currentBuildingsRight.size()));\r\n        }\r\n\r\n    if (inRange()) {\r\n        countdown+=GameView.instance.fixedDeltaTime;\r\n        System.out.println(countdown);\r\n        if (countdown > 1000) {\r\n\r\n            if (countdown > 1200 && attack == 0) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                 }\r\n\r\n            if (countdown > 1400 && attack == 1) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                }\r\n\r\n            if (countdown > 1600 && attack == 2) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                }\r\n\r\n            if (countdown >= 1800) {\r\n                countdown = 0;\r\n                attack = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void spawnRandomBuilding(){\r\n\r\n        double lr = (Math.random() - 0.5f);\r\n        int offset = 0;//tilesize/2;\r\n\r\n        ArrayList<Foundation> direction;\r\n        int directionTiles;\r\n\r\n        if(lr < 0){\r\n            direction = currentBuildingsLeft;\r\n        }\r\n        else{\r\n            direction = currentBuildingsRight;\r\n        }\r\n\r\n        int position;\r\n        if(direction ==  currentBuildingsLeft){\r\n            position = x-(currentTilesLeft*tilesize+offset);\r\n        }\r\n        else position = x + (tilesize*Fortress.tileNr) +currentTilesRight*tilesize + offset;\r\n\r\n        //////////////////////////////////////////////////////////////////\r\n        //deciding Building\r\n        //////////////////////////////////////////////////////////////////\r\n\r\n\r\n        Foundation building;\r\n        int frm = 0;\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            if(currentBuildingsRight.get(i).buildingType == 3)\r\n                frm++;\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            if(currentBuildingsLeft.get(i).buildingType == 3)\r\n                frm++;\r\n        }\r\n\r\n        if(goldRate < 100 && !muchFarms && frm < 5){BD.add(\"Farm\");BD.add(\"Farm\");BD.add(\"Farm\"); muchFarms = true;}\r\n        else if(goldRate >= 100 && muchFarms){BD.remove(\"Farm\");BD.remove(\"Farm\"); BD.remove(\"Farm\"); muchFarms = false;}\r\n\r\n        if(townFear >= 12 && !muchFear && lv>0){BD.add(\"Tower\");BD.add(\"Tower\");BD.add(\"Tower\");BD.add(\"Tower\"); muchFear = true;}\r\n        else if(townFear < 12 && muchFear){BD.remove(\"Tower\");BD.remove(\"Tower\");BD.remove(\"Tower\");BD.remove(\"Tower\"); muchFear = false;}\r\n\r\n        if(currentBuildingsRight.size() == 0 && currentBuildingsLeft.size() == 0){\r\n            if(direction == currentBuildingsLeft) {\r\n                position -= Farm.tileNr*tilesize;\r\n            }\r\n            building = new Farm(position,y,true,activity);\r\n            currentGold-=Farm.cost*((lv*1.50)+1);\r\n        }\r\n\r\n        else{\r\n            int random = (int)(-0.5+(Math.random()*BD.size()));\r\n\r\n            if(BD.get(random) == \"House\" && currentGold > House.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=House.tileNr*tilesize;\r\n                }\r\n                building = new House(position,y,true,activity);currentGold-=(int)(House.cost*((lv*1.75)+1));}\r\n\r\n            else if(BD.get(random) == \"Farm\" && currentGold > Farm.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=Farm.tileNr*tilesize;\r\n                }\r\n                building = new Farm(position,y,true,activity);currentGold-=(int)(Farm.cost*((lv*1.75)+1));}\r\n\r\n            else if(BD.get(random) == \"Tower\" && currentGold > ArcherTower.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=ArcherTower.tileNr*tilesize;\r\n                }\r\n                building = new ArcherTower(position,y,true,activity); currentGold-=(int)(ArcherTower.cost*((lv*1.75)+1));}\r\n            else return;\r\n        }\r\n\r\n        ///_______________________________________________///\r\n        //giving feedback to the Tiles right and Tiles left\r\n        ///===============================================///\r\n        if(direction == currentBuildingsLeft) {\r\n            currentTilesLeft += building.tileNr;\r\n        }\r\n        else {\r\n            currentTilesRight += building.tileNr;\r\n        }\r\n        direction.add(building);\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n\r\n            if (currentBuildingsLeft.get(i) != null) {\r\n\r\n                currentBuildingsLeft.get(i).draw(c);\r\n\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n\r\n            if (currentBuildingsRight.get(i) != null) {\r\n\r\n                currentBuildingsRight.get(i).draw(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void position(Fortress f) {\r\n\r\n    }\r\n\r\n    /*public void CombList(){\r\n\r\n        ArrayList <Foundation> townassets = new ArrayList<>();\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            townassets.add(currentBuildingsRight.get(i));\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            townassets.add(currentBuildingsLeft.get(i));\r\n        }\r\n      }*/\r\n\r\n    public void physics(float deltaTime){\r\n        super.physics(deltaTime);\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).physics(deltaTime);\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            currentBuildingsRight.get(i).physics(deltaTime);\r\n        }\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        //System.out.println(\"inRange\");\r\n        if (Math.abs(GameView.instance.player.position.x-creationPoint.x)<GameView.instance.cameraSize*attackRange){\r\n            return true;}\r\n        return false;\r\n    }\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        float randomx = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/10;\r\n        float randomy = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/5;\r\n        Vector2 target = GameView.instance.player.aimFor();\r\n        float dx = target.x-creationPoint.x;\r\n        float dy =target.y-creationPoint.y;\r\n        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 1, dx+randomx, dy+randomy, 2);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//TODO:\r\n//      Conditional Building output :\r\n//      Fortress size : 4 tiles: done\r\n//      Fortress Attacking :\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(date 1604459635778)
@@ -58,9 +58,11 @@
     ArrayList<String> BD = new ArrayList<>();
     boolean muchFarms = true;
     boolean muchFear = false;
-
     int tower = 0;
 
+    boolean summonedWizard = false;
+    boolean surrender = false;
+
     //Fortress constructor, used when calling Fortress();
 
     //this specific Fortress
@@ -107,7 +109,7 @@
 
         if (currentGold < maxGold) {
 
-            //Money income
+            // MONEY INCOME
 
             if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2
                     && (!hasTaxed)) {
@@ -169,11 +171,12 @@
             if (currentBuildingsLeft.get(i).buildingType == 4)
                 tower++;
         }
-        //===================================================================================//
 
-        //Lv up conditions
-
-        //===================================================================================//
+        //  ==       =====   ====        ==           =====
+        //  ==        ==      =          ==           =============
+        //  ==         ==    =      =============         ==================
+        //  ==          ==  =            ==           ===============
+        //  ========     ===             ==           ===
 
         if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))
                 && (currentGold >= (maxGold / 10 * 9))
@@ -298,6 +301,11 @@
             townFear = (tempfear / (currentBuildingsLeft.size() + currentBuildingsRight.size()));
         }
 
+        //    =   ========  ==   ==
+        //   = =     ==     ==  ==
+        //  =====    ==     ====
+        // =     =   ==     ==  ===
+
     if (inRange()) {
         countdown+=GameView.instance.fixedDeltaTime;
         System.out.println(countdown);
@@ -327,8 +335,27 @@
                 }
             }
         }
-    }
+
+        //spawning thief
+        if((townFear > 20 && lv != 0 && (currentGold < maxGold/2)) || (goldRate < 200 && lv != 0)){
+            GameView.instance.npc_pool.spawnThiefs(x, (int) GameView.instance.groundLevel,1);
+        }
+
+        //spawning dragonslayer
+        if(townFear > 30 && lv != 0){
+            GameView.instance.npc_pool.spawnDragonLayers(x, (int) GameView.instance.groundLevel, 1);
+        }
 
+        //spawning wizard
+        if(townFear > 35 && lv ==2 && !summonedWizard){
+            GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);
+            summonedWizard = true;
+        }
+
+        if(townFear > 50 && !surrender){
+            surrender = true;
+        }
+    }
 
 
     public void spawnRandomBuilding(){
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.widget.Button;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game engine\r\n//Handles logic, physics and graphics\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class GameView extends SurfaceView implements Runnable {\r\n    public static GameView instance;\r\n    int screenWidth, screenHeight, cameraSize;\r\n    Vector2 screenCenter;\r\n\r\n\r\n//    final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds\r\n    final float fixedDeltaTime = (int) (1000 / 30); // in milliseconds\r\n\r\n    float deltaTime = fixedDeltaTime;\r\n\r\n    //Physics\r\n    public float groundLevel, upperBound, gravity = 0.3f;\r\n    int physicsIterations = 5;\r\n    Vector2 cameraDisp = Vector2.zero;\r\n\r\n    //Projectile\r\n    int projectileIndex = 0;//Next projectile in array to spawn\r\n    float shootSpeedVariance=0.1f, shootDirectionVariance = 10f;//Error in shooting speed and direction\r\n\r\n    //Logic\r\n    boolean isRunning = false;\r\n    Thread gameThread, drawThread;\r\n    //WaveController waveController;//Controls when enemies spawn\r\n    int enemyIndex = 0;//Next enemy in array to spawn\r\n    Vector2 moveBy;\r\n\r\n    //Scene\r\n    Scene scene;\r\n\r\n    //Game objects\r\n    //Game objects\r\n    public Dragon player;\r\n    GameObject ground;\r\n    NPC_Pool npc_pool;\r\n    GoldPool goldPool;\r\n    ProjectilePool projectilePool;\r\n    Lair lair;\r\n    Fortress fortress;\r\n    Hud hud;\r\n\r\n    //Drawing\r\n    SurfaceHolder holder;\r\n    Paint back = new Paint();\r\n    SpriteManager spriteManager;\r\n    boolean isDrawing = true;\r\n\r\n    public GameView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Initialization\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    void init(){\r\n        instance = this;\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        cameraSize = (int) (screenWidth);\r\n        screenCenter = new Vector2(screenWidth/2,screenHeight/2);\r\n        back.setColor(Color.WHITE);\r\n        holder = getHolder();\r\n\r\n        groundLevel = screenHeight*7/10;\r\n\r\n        spriteManager = new SpriteManager();\r\n        //Init scene\r\n\r\n        scene = new Scene();\r\n\r\n        //Player gameobject\r\n        Bitmap playerSprite = BitmapFactory.decodeResource(this.getResources(), R.drawable.empty);\r\n        player = new Dragon(playerSprite,0.5f,0.9f,screenHeight/20,screenHeight/20);\r\n        player.setDamagedSound(SoundEffects.DAMAGE);\r\n        player.setDestroyedSound(SoundEffects.DEATH);\r\n\r\n        lair = new Lair();\r\n\r\n\r\n        npc_pool = new NPC_Pool();\r\n\r\n        goldPool = new GoldPool();\r\n        //GoldPool.instance.spawnGold(screenHeight/2, screenWidth/4,100);\r\n        projectilePool = new ProjectilePool();\r\n\r\n\r\n\r\n        hud = new Hud();\r\n\r\n\r\n\r\n\r\n        fortress = new Fortress( screenWidth*2, (int)groundLevel, true, this);\r\n        npc_pool.spawnThiefs((int)fortress.x ,(int)groundLevel,1);\r\n        Game.instance.gameOver = false;\r\n\r\n        resume();\r\n\r\n    }\r\n\r\n    Vector2 randomPosition(){\r\n        Vector2 random = Vector2.getRandom();\r\n        random.x *= ground.width*0.3f;\r\n        random.y *= ground.height*0.3f;\r\n        return ground.position.add(random);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game loop\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    float totalFrame, numberFrame;\r\n    public void resume() {\r\n        isRunning = true;\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n    }\r\n\r\n    public void pause() {\r\n        isRunning = false;\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                gameThread.join();//execute completely and then stop\r\n                retry = false;\r\n            } catch (Exception e) {\r\n                gameThread.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        while (isRunning) {\r\n\r\n            long started = System.currentTimeMillis();\r\n            //Apply physics calculations per frame\r\n            for (int i = 0; i < physicsIterations; i++) {\r\n                physics();\r\n            }\r\n            long physicsTime = System.currentTimeMillis();\r\n            //System.out.println( \"physics \" + (physicsTime - started));\r\n\r\n            //Apply game logic to game objects\r\n\r\n            update();\r\n            long updateTime = System.currentTimeMillis();\r\n            //System.out.println( \"update \" + (updateTime-physicsTime));\r\n            if(isDrawing) {\r\n                draw();\r\n            }\r\n            long drawTime = System.currentTimeMillis() - updateTime;\r\n            //System.out.println( \"draw main \" + drawTime);\r\n            totalFrame += drawTime;\r\n            numberFrame++;\r\n            //System.out.println(\"average draw \" + totalFrame/numberFrame);\r\n\r\n            //If the time between frames does not match the target FPS, delay or skip to match\r\n\r\n            deltaTime = (System.currentTimeMillis() - started);\r\n            int lag = (int) (fixedDeltaTime - deltaTime);\r\n\r\n            //System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n            if (lag > 0) {\r\n                try {\r\n                    gameThread.sleep(lag);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            while (lag < 0) {\r\n                lag += fixedDeltaTime;\r\n                //Apply physics calculations per frame\r\n                for (int i = 0; i < physicsIterations; i++) {\r\n                    physics();\r\n                }\r\n                //Apply game logic to game objects\r\n                update();\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Graphics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    private void draw() {\r\n        Canvas canvas = new Canvas();\r\n        try {\r\n            canvas = holder.lockCanvas(null);\r\n        }\r\n        catch (Exception e){\r\n\r\n        }\r\n        if (canvas != null) {\r\n            //90\r\n            //canvas.drawRect(0, 0, screenWidth * 1.2f, screenHeight, back);\r\n            scene.drawBackground(canvas);//40\r\n            lair.draw(canvas);//80\r\n            fortress.draw(canvas);//90\r\n            projectilePool.draw(canvas);//80\r\n            player.draw(canvas);//80\r\n            npc_pool.draw(canvas);//90\r\n            goldPool.draw(canvas);//\r\n            scene.drawForeground(canvas);//\r\n\r\n\r\n            hud.draw(canvas);\r\n            holder.unlockCanvasAndPost(canvas);\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Physics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void physics() {\r\n        cameraDisp.x = -player.position.x+screenWidth/2;\r\n        if(!Game.instance.gameOver) {\r\n\r\n            npc_pool.physics(fixedDeltaTime);\r\n            fortress.physics(deltaTime);\r\n            //Enemy motion\r\n            if (!player.destroyed) {\r\n                goldPool.physics(fixedDeltaTime / physicsIterations);\r\n                projectilePool.physics(fixedDeltaTime / physicsIterations);\r\n                player.physics(fixedDeltaTime / physicsIterations);\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game logic\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void update() {\r\n        if(player.visible){\r\n            player.update(fixedDeltaTime);\r\n            scene.update(fixedDeltaTime);\r\n            npc_pool.update(fixedDeltaTime);\r\n            projectilePool.update(fixedDeltaTime);\r\n            //System.out.println(fixedDeltaTime +\" \"+ deltaTime);\r\n            goldPool.update(fixedDeltaTime);\r\n            fortress.update(fixedDeltaTime);\r\n            hud.update(fixedDeltaTime);\r\n            lair.update(fixedDeltaTime);\r\n        }\r\n        else{\r\n            if(!Game.instance.gameOver) {\r\n                Game.instance.showGameOver = true;\r\n            }\r\n        }\r\n    }\r\n    public void movePlayerBy(Vector2 dv){\r\n\r\n        if(dv!=null){\r\n            this.moveBy = new Vector2(dv.x,dv.y);\r\n            player.moveBy(moveBy.multiply(player.maxMoveSpeed));\r\n\r\n        }\r\n        else {\r\n            player.moveBy(dv);\r\n        }\r\n    }\r\n\r\n    public float getGroundLevel(){\r\n        return  groundLevel;\r\n    }\r\n    public void breathFire(boolean breathingFire){\r\n\r\n        player.breathingFire = breathingFire;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(date 1604459145144)
@@ -131,7 +131,6 @@
 
 
         fortress = new Fortress( screenWidth*2, (int)groundLevel, true, this);
-        npc_pool.spawnThiefs((int)fortress.x ,(int)groundLevel,1);
         Game.instance.gameOver = false;
 
         resume();
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM_[Default_Changelist]/shelved.patch	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM_[Default_Changelist]/shelved.patch	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
@@ -1,716 +0,0 @@
-Index: app/src/main/res/drawable/alert_dialog.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">\r\n    <item\r\n        android:left=\"30px\"\r\n        android:right=\"30px\"\r\n        android:top=\"10px\"\r\n        android:bottom=\"10px\">\r\n\r\n        <shape android:shape=\"rectangle\">\r\n            <solid android:color= \"#00000000\"></solid>\r\n\r\n        </shape>\r\n    </item>\r\n</layer-list>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/drawable/alert_dialog.xml	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/res/drawable/alert_dialog.xml	(date 1603851099491)
-@@ -1,10 +1,10 @@
- <?xml version="1.0" encoding="utf-8"?>
- <layer-list xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
-     <item
--        android:left="30px"
--        android:right="30px"
--        android:top="10px"
--        android:bottom="10px">
-+        android:left="0px"
-+        android:right="0px"
-+        android:top="0px"
-+        android:bottom="0px">
- 
-         <shape android:shape="rectangle">
-             <solid android:color= "#00000000"></solid>
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Game.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.media.MediaPlayer;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Display;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.view.MotionEventCompat;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game Controller\r\n//Initialized game, handles user input, UI, sounds\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class Game extends AppCompatActivity {\r\n    //UI\r\n    TextView scoreText;\r\n    Button musicButton;\r\n    ProgressBar healthBar;\r\n    //float progress;\r\n\r\n    //state variables\r\n    boolean paused = false, showGameOver = false, gameOver = false, waveStart = false, waveEnd = false;\r\n\r\n    int screenHeight, screenWidth;\r\n    public int score = 0, highScore;\r\n    float refreshRating;\r\n\r\n    //misc\r\n    MediaPlayer pointsPlayer;\r\n    SoundEffects soundEffects;\r\n    AlertDialog.Builder dialogBuilder;\r\n    SharedPreferences.Editor highScoreEdit;\r\n\r\n    //Threads\r\n    Handler handler;\r\n    Runnable runnable;\r\n\r\n    //Game engine\r\n    GameView gameView;\r\n\r\n    //Singleton\r\n    public static Game instance;\r\n\r\n    //Player control\r\n    boolean dragging = false;\r\n    boolean breathFire = false;\r\n    Vector2 dragTo, dragFrom;\r\n    int controlRadius = 30;\r\n    Vector2 fireButton;\r\n\r\n    public Context context;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_game);\r\n        //Screen refresh rate detection\r\n        Display display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();\r\n        refreshRating = display.getRefreshRate();\r\n\r\n        //Singleton\r\n        if(instance == null) {\r\n            instance = this;\r\n            context = this;\r\n\r\n            //Get screen dimensions\r\n            DisplayMetrics displayMetrics = new DisplayMetrics();\r\n            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n            screenHeight = displayMetrics.heightPixels;\r\n            screenWidth = displayMetrics.widthPixels;\r\n            //Hide navigation\r\n            getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);\r\n\r\n\r\n\r\n\r\n\r\n            //initialize\r\n            initUI();\r\n            initSound(this);\r\n\r\n            waveStart();\r\n            handler = new Handler();\r\n\r\n\r\n            //start game loop\r\n            gameView = new GameView(this);\r\n            ConstraintLayout gameLayout = findViewById(R.id.gameLayout);\r\n            gameLayout.addView(gameView);\r\n            updateUI();\r\n\r\n\r\n\r\n        }\r\n    }\r\n    @Override\r\n    public void onWindowFocusChanged(boolean hasFocus) {\r\n        super.onWindowFocusChanged(hasFocus);\r\n\r\n        if (hasFocus) {\r\n            getWindow().getDecorView().setSystemUiVisibility(\r\n                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                            | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Initialization Methods\r\n\r\n    void initUI(){\r\n\r\n        controlRadius = screenWidth/20;\r\n        fireButton = new Vector2(screenWidth*9/10,screenHeight*8.5f/10);\r\n\r\n        //Load high score\r\n        SharedPreferences pref = getSharedPreferences(\"HighScore\", Context.MODE_PRIVATE);\r\n        highScoreEdit = pref.edit();\r\n\r\n\r\n        //Game over dialog box\r\n        dialogBuilder = new AlertDialog.Builder(this);\r\n    }\r\n\r\n\r\n    void initSound(Context context){\r\n\r\n        soundEffects = new SoundEffects(context);\r\n    }\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Game loop and game state methods\r\n\r\n    public void updateUI(){\r\n        runnable = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                updateUI();\r\n            }\r\n        };\r\n        //30 frames per second\r\n        handler.postDelayed(runnable, 1000/30);\r\n\r\n        if(!gameOver) {\r\n            //gameView.setPlayerMovement(dragTo);\r\n            if(dragFrom !=null && dragTo!=null) {\r\n                gameView.movePlayerBy(dragTo.sub(dragFrom).multiply(1f / controlRadius/2));\r\n            }\r\n            else {\r\n                gameView.movePlayerBy(null);\r\n            }\r\n            gameView.breathFire(breathFire);\r\n            pointsAndLevels();\r\n\r\n        }\r\n\r\n        //Show game over pop up if told by game engine\r\n        if(showGameOver) {\r\n            gameOver();\r\n        }\r\n    }\r\n\r\n    //Calculate points scored and level\r\n    void pointsAndLevels(){\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    //On game over show dialog box with results and give the player the options of quiting to main menu or trying again\r\n    void gameOver(){\r\n        //Apply only once\r\n        showGameOver = false;\r\n        gameOver = true;\r\n\r\n        //Custom alert dialog\r\n        ViewGroup showGameOver = (ViewGroup) getLayoutInflater().inflate(R.layout.game_over,null,false);\r\n\r\n        //Handle messages for dialog box\r\n        ((TextView)showGameOver.findViewById(R.id.gameOverText)).setText(\"GAME OVER\");\r\n        String plural = \"S\";\r\n        if(score == 1){\r\n            plural = \"\";\r\n        }\r\n        if(score > highScore){\r\n            highScore = score;\r\n\r\n            //Save high score\r\n            highScoreEdit.putInt(\"HighScore\", highScore);\r\n            highScoreEdit.commit();\r\n\r\n            ((TextView)showGameOver.findViewById(R.id.newHighScore)).setText(\"NEW RECORD \\n\"+highScore +\" MONSTER\"+plural+\" DEFEATED\");\r\n        }\r\n        else{\r\n            ((TextView)showGameOver.findViewById(R.id.newHighScore)).setText(\"YOU DEFEATED \\n \"+score + \" MONSTER\"+plural);\r\n        }\r\n\r\n        dialogBuilder.setView(showGameOver);\r\n        final AlertDialog dialog = dialogBuilder.create();\r\n\r\n        //Dialog box negative button, return to main menu\r\n        showGameOver.findViewById(R.id.mainMenu).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n            }\r\n        });\r\n\r\n        //Dialog box positive button, start new game\r\n        showGameOver.findViewById(R.id.tryAgain).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //reset states and restart game loop\r\n                score = 0;\r\n                paused = false;\r\n                gameView.init();\r\n\r\n                //Close dialog box\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.show();\r\n\r\n        gameOverAnim(score==highScore && score>0);\r\n    }\r\n\r\n    //Show score and play rooster sound effect at beginning of wave\r\n    private void waveStart(){\r\n\r\n        //soundEffects.play(SoundEffects.ROOSTER);\r\n        waveStart = false;\r\n    }\r\n\r\n    //Move on to the next score\r\n    private void waveEnd(){\r\n        score++;\r\n        waveEnd = false;\r\n    }\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // On click methods\r\n\r\n\r\n\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Animations\r\n\r\n\r\n    //Show points scored, rise up and fade away\r\n    void pointsScoredAnim(int pointsScored, int x, int y){\r\n    }\r\n\r\n    void deathAnim(){\r\n\r\n    }\r\n\r\n\r\n    //Shape animation on game over\r\n    void gameOverAnim(boolean hiScore){\r\n\r\n\r\n    }\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Accessor / Mutator methods\r\n\r\n    int moveActionIndex = -1;\r\n    int fireActionIndex = -1;\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        Vector2 p = new Vector2(event.getX(),event.getY());\r\n\r\n        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n            if(Vector2.distance(p,fireButton) < controlRadius){\r\n                breathFire = true;\r\n                fireActionIndex = event.getActionIndex();\r\n            }\r\n            else {\r\n                dragFrom = p;\r\n                dragging = true;\r\n                moveActionIndex = event.getActionIndex();\r\n            }\r\n\r\n        }\r\n        if(event.getActionIndex() == moveActionIndex) {\r\n            if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_OUTSIDE) {\r\n                dragging = false;\r\n                dragTo = null;\r\n                moveActionIndex = -1;\r\n            }\r\n            if (event.getAction() == MotionEvent.ACTION_MOVE) {\r\n                if (dragging) {\r\n                    Vector2 disp = p.sub(dragFrom);\r\n\r\n                    if(disp.getLength()>controlRadius*2){\r\n\r\n                        p = disp.getNormal().multiply(Math.min(disp.getLength(),controlRadius*2)).add(dragFrom);\r\n                    }\r\n                    dragTo = p;\r\n                }\r\n            }\r\n        }\r\n        if(event.getActionIndex() == fireActionIndex) {\r\n            if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_OUTSIDE) {\r\n                breathFire = false;\r\n                fireActionIndex = -1;\r\n            }\r\n        }\r\n\r\n\r\n        return super.onTouchEvent(event);\r\n\r\n    }\r\n\r\n    public void onGrow(View view){\r\n        gameView.pause();\r\n        int size = gameView.player.size+5;\r\n        if(size <70)\r\n            gameView.player.initBody(size);\r\n        gameView.resume();\r\n    }\r\n\r\n    public void onShrink(View view){\r\n        gameView.pause();\r\n        int size = gameView.player.size-5;\r\n        if(size > 35)\r\n            gameView.player.initBody(size);\r\n        gameView.resume();\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Game.java	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Game.java	(date 1603858378905)
-@@ -18,6 +18,7 @@
- 
- import androidx.appcompat.app.AlertDialog;
- import androidx.appcompat.app.AppCompatActivity;
-+import androidx.cardview.widget.CardView;
- import androidx.constraintlayout.widget.ConstraintLayout;
- import androidx.core.view.MotionEventCompat;
- 
-@@ -30,6 +31,13 @@
-     //UI
-     TextView scoreText;
-     Button musicButton;
-+    Button stopButton;
-+    Button pauseContinue;
-+    Button pauseRestart;
-+    Button pauseCredits;
-+    Button pauseExit;
-+    boolean visibleCredits;
-+    CardView creditCard;
-     ProgressBar healthBar;
-     //float progress;
- 
-@@ -44,6 +52,7 @@
-     MediaPlayer pointsPlayer;
-     SoundEffects soundEffects;
-     AlertDialog.Builder dialogBuilder;
-+    AlertDialog.Builder pauseDialogBuilder;
-     SharedPreferences.Editor highScoreEdit;
- 
-     //Threads
-@@ -104,9 +113,56 @@
-             gameLayout.addView(gameView);
-             updateUI();
- 
--
--
-         }
-+        final ViewGroup pauseMenu = (ViewGroup) getLayoutInflater().inflate(R.layout.activity_pause_menu,null,false);
-+        pauseDialogBuilder.setView(pauseMenu);
-+        final AlertDialog dialog = pauseDialogBuilder.create();
-+        stopButton = findViewById(R.id.buttonOfStop);
-+        pauseContinue = pauseMenu.findViewById(R.id.pauseContinue);
-+        pauseRestart = pauseMenu.findViewById(R.id.pauseRestart);
-+        pauseCredits = pauseMenu.findViewById(R.id.pauseCredits);
-+        pauseExit = pauseMenu.findViewById(R.id.pauseExit);
-+        creditCard = pauseMenu.findViewById(R.id.creditsCard);
-+        visibleCredits = false;
-+        stopButton.setOnClickListener(new View.OnClickListener() {
-+            @Override
-+            public void onClick(View v) {
-+                GameView.instance.pause();
-+                dialog.show();
-+            }
-+        });
-+        pauseContinue.setOnClickListener(new View.OnClickListener() {
-+            @Override
-+            public void onClick(View v) {
-+                GameView.instance.resume();
-+                dialog.dismiss();
-+            }
-+        });
-+        pauseCredits.setOnClickListener(new View.OnClickListener() {
-+            @Override
-+            public void onClick(View v) {
-+                if (!visibleCredits){
-+                    creditCard.setVisibility(View.VISIBLE);
-+                    visibleCredits = true;
-+                } else {
-+                    creditCard.setVisibility(View.INVISIBLE);
-+                    visibleCredits = false;
-+                }
-+            }
-+        });
-+        pauseRestart.setOnClickListener(new View.OnClickListener() {
-+            @Override
-+            public void onClick(View v) {
-+                GameView.instance.init();
-+                dialog.dismiss();
-+            }
-+        });
-+        pauseExit.setOnClickListener(new View.OnClickListener() {
-+            @Override
-+            public void onClick(View v) {
-+                finish();
-+            }
-+        });
-     }
-     @Override
-     public void onWindowFocusChanged(boolean hasFocus) {
-@@ -139,6 +195,7 @@
-         highScoreEdit = pref.edit();
- 
- 
-+        pauseDialogBuilder = new AlertDialog.Builder(this,android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);
-         //Game over dialog box
-         dialogBuilder = new AlertDialog.Builder(this);
-     }
-Index: app/src/main/res/layout/activity_pause_menu.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"#0DEAEAEA\"\r\n    android:theme=\"@style/ThemeOverlay.Dragon.FullscreenContainer\"\r\n    tools:context=\".Pause_menu\">\r\n\r\n    <!-- The primary full-screen view. This can be replaced with whatever view\r\n         is needed to present your content, e.g. VideoView, SurfaceView,\r\n         TextureView, etc. -->\r\n    <TextView\r\n        android:id=\"@+id/fullscreen_content\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:gravity=\"center\"\r\n        android:keepScreenOn=\"true\"\r\n        android:text=\"@string/dummy_content\"\r\n        android:textColor=\"?attr/fullscreenTextColor\"\r\n        android:textSize=\"50sp\"\r\n        android:textStyle=\"bold\" />\r\n\r\n    <!-- This FrameLayout insets its children based on system windows using\r\n         android:fitsSystemWindows. -->\r\n    <FrameLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:fitsSystemWindows=\"true\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <androidx.cardview.widget.CardView\r\n                android:id=\"@+id/CardMenu\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_weight=\"1\"\r\n                android:background=\"#F8F8F8\"\r\n                app:cardCornerRadius=\"20dp\" >\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:gravity=\"center\"\r\n                    android:orientation=\"vertical\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"horizontal\">\r\n\r\n                        <Space\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1\" />\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_weight=\"1\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <Button\r\n                                android:id=\"@+id/button5\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_margin=\"10dp\"\r\n                                android:layout_weight=\"1\"\r\n                                android:text=\"Continue\" />\r\n\r\n                            <Button\r\n                                android:id=\"@+id/button3\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_margin=\"10dp\"\r\n                                android:layout_weight=\"1\"\r\n                                android:text=\"Restart\" />\r\n\r\n                            <Button\r\n                                android:id=\"@+id/button4\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_margin=\"10dp\"\r\n                                android:layout_weight=\"1\"\r\n                                android:text=\"Credits\" />\r\n\r\n                            <Button\r\n                                android:id=\"@+id/button2\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_margin=\"10dp\"\r\n                                android:layout_weight=\"1\"\r\n                                android:text=\"Exit\" />\r\n                        </LinearLayout>\r\n\r\n                        <Space\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_weight=\"1\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView5\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center\"\r\n                        android:text=\"Music\"\r\n                        android:textColor=\"#000000\" />\r\n\r\n                    <SeekBar\r\n                        android:id=\"@+id/seekBar\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:paddingLeft=\"20dp\"\r\n                        android:paddingRight=\"20dp\"\r\n                        android:paddingBottom=\"20dp\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView6\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center\"\r\n                        android:text=\"Sound Effects\"\r\n                        android:textColor=\"#000000\" />\r\n\r\n                    <SeekBar\r\n                        android:id=\"@+id/seekBar3\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:paddingLeft=\"20dp\"\r\n                        android:paddingRight=\"20dp\"\r\n                        android:paddingBottom=\"20dp\" />\r\n\r\n                </LinearLayout>\r\n            </androidx.cardview.widget.CardView>\r\n\r\n            <Space\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_weight=\"0.7\" />\r\n\r\n        </LinearLayout>\r\n\r\n    </FrameLayout>\r\n\r\n</FrameLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/layout/activity_pause_menu.xml	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/res/layout/activity_pause_menu.xml	(date 1603858270562)
-@@ -4,7 +4,6 @@
-     xmlns:tools="http://schemas.android.com/tools"
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    android:background="#0DEAEAEA"
-     android:theme="@style/ThemeOverlay.Dragon.FullscreenContainer"
-     tools:context=".Pause_menu">
- 
-@@ -17,8 +16,7 @@
-         android:layout_height="match_parent"
-         android:gravity="center"
-         android:keepScreenOn="true"
--        android:text="@string/dummy_content"
--        android:textColor="?attr/fullscreenTextColor"
-+        android:textColor="#00FFFFFF"
-         android:textSize="50sp"
-         android:textStyle="bold" />
- 
-@@ -40,7 +38,7 @@
-                 android:layout_height="match_parent"
-                 android:layout_weight="1"
-                 android:background="#F8F8F8"
--                app:cardCornerRadius="20dp" >
-+                app:cardCornerRadius="20dp">
- 
-                 <LinearLayout
-                     android:layout_width="match_parent"
-@@ -50,14 +48,18 @@
- 
-                     <LinearLayout
-                         android:layout_width="match_parent"
--                        android:layout_height="wrap_content"
-+                        android:layout_height="match_parent"
-                         android:layout_weight="1"
--                        android:orientation="horizontal">
-+                        android:orientation="horizontal"
-+                        android:paddingLeft="30dp"
-+                        android:paddingTop="10dp"
-+                        android:paddingRight="30dp"
-+                        android:paddingBottom="10dp">
- 
-                         <Space
--                            android:layout_width="wrap_content"
--                            android:layout_height="wrap_content"
--                            android:layout_weight="1" />
-+                            android:layout_width="match_parent"
-+                            android:layout_height="match_parent"
-+                            android:layout_weight="2" />
- 
-                         <LinearLayout
-                             android:layout_width="match_parent"
-@@ -66,7 +68,7 @@
-                             android:orientation="vertical">
- 
-                             <Button
--                                android:id="@+id/button5"
-+                                android:id="@+id/pauseContinue"
-                                 android:layout_width="match_parent"
-                                 android:layout_height="wrap_content"
-                                 android:layout_margin="10dp"
-@@ -74,7 +76,7 @@
-                                 android:text="Continue" />
- 
-                             <Button
--                                android:id="@+id/button3"
-+                                android:id="@+id/pauseRestart"
-                                 android:layout_width="match_parent"
-                                 android:layout_height="wrap_content"
-                                 android:layout_margin="10dp"
-@@ -82,7 +84,7 @@
-                                 android:text="Restart" />
- 
-                             <Button
--                                android:id="@+id/button4"
-+                                android:id="@+id/pauseCredits"
-                                 android:layout_width="match_parent"
-                                 android:layout_height="wrap_content"
-                                 android:layout_margin="10dp"
-@@ -90,7 +92,7 @@
-                                 android:text="Credits" />
- 
-                             <Button
--                                android:id="@+id/button2"
-+                                android:id="@+id/pauseExit"
-                                 android:layout_width="match_parent"
-                                 android:layout_height="wrap_content"
-                                 android:layout_margin="10dp"
-@@ -99,9 +101,9 @@
-                         </LinearLayout>
- 
-                         <Space
--                            android:layout_width="wrap_content"
--                            android:layout_height="wrap_content"
--                            android:layout_weight="1" />
-+                            android:layout_width="match_parent"
-+                            android:layout_height="match_parent"
-+                            android:layout_weight="2" />
- 
-                     </LinearLayout>
- 
-@@ -140,10 +142,104 @@
-                 </LinearLayout>
-             </androidx.cardview.widget.CardView>
- 
--            <Space
-+            <LinearLayout
-                 android:layout_width="match_parent"
-                 android:layout_height="match_parent"
--                android:layout_weight="0.7" />
-+                android:layout_gravity="right"
-+                android:layout_weight="0.7"
-+                android:orientation="horizontal">
-+
-+                <androidx.cardview.widget.CardView
-+                    android:id="@+id/creditsCard"
-+                    android:layout_width="match_parent"
-+                    android:layout_height="match_parent"
-+                    android:layout_margin="40dp"
-+                    android:layout_weight="0.7"
-+                    android:visibility="invisible"
-+                    app:cardCornerRadius="20dp">
-+
-+                    <androidx.core.widget.NestedScrollView
-+                        android:layout_width="match_parent"
-+                        android:layout_height="match_parent"
-+                        android:layout_margin="20dp"
-+                        android:fillViewport="true">
-+
-+                        <LinearLayout
-+                            android:layout_width="match_parent"
-+                            android:layout_height="wrap_content"
-+                            android:gravity="center"
-+                            android:orientation="vertical">
-+
-+                            <TextView
-+                                android:id="@+id/textView4"
-+                                android:layout_width="match_parent"
-+                                android:layout_height="wrap_content"
-+                                android:layout_margin="10dp"
-+                                android:text="I’ve learned: How to animate Game objects. Detect if game objects get close to each other. How to use physics class. How to use update class. Use Array List class. How to measure Max FPS and scale it under each screen automatically. How to use Android studio Git without github. "
-+                                android:textColor="#000000" />
-+
-+                            <androidx.cardview.widget.CardView
-+                                android:layout_width="100dp"
-+                                android:layout_height="100dp"
-+                                android:layout_margin="10dp"
-+                                app:cardCornerRadius="1000dp">
-+
-+                                <ImageView
-+                                    android:id="@+id/mannyImage"
-+                                    android:layout_width="match_parent"
-+                                    android:layout_height="match_parent"
-+                                    android:elevation="7dp"
-+                                    app:srcCompat="@drawable/herox" />
-+                            </androidx.cardview.widget.CardView>
-+
-+                            <TextView
-+                                android:id="@+id/textView2"
-+                                android:layout_width="match_parent"
-+                                android:layout_height="wrap_content"
-+                                android:layout_margin="10dp"
-+                                android:text="I’ve learned: How to animate Game objects. Detect if game objects get close to each other. How to use physics class. How to use update class. Use Array List class. How to measure Max FPS and scale it under each screen automatically. How to use Android studio Git without github. "
-+                                android:textColor="#000000" />
-+
-+                            <androidx.cardview.widget.CardView
-+                                android:layout_width="100dp"
-+                                android:layout_height="100dp"
-+                                android:layout_margin="10dp"
-+                                app:cardCornerRadius="1000dp">
-+
-+                                <ImageView
-+                                    android:id="@+id/silberFrostImage"
-+                                    android:layout_width="match_parent"
-+                                    android:layout_height="match_parent"
-+                                    android:elevation="7dp"
-+                                    app:srcCompat="@drawable/herox" />
-+                            </androidx.cardview.widget.CardView>
-+
-+                            <TextView
-+                                android:id="@+id/textView"
-+                                android:layout_width="wrap_content"
-+                                android:layout_height="wrap_content"
-+                                android:layout_margin="10dp"
-+                                android:text="I’ve learned: How to animate Game objects. Detect if game objects get close to each other. How to use physics class. How to use update class. Use Array List class. How to measure Max FPS and scale it under each screen automatically. How to use Android studio Git without github. "
-+                                android:textColor="#000000" />
-+
-+                            <androidx.cardview.widget.CardView
-+                                android:layout_width="100dp"
-+                                android:layout_height="100dp"
-+                                android:layout_margin="10dp"
-+                                app:cardCornerRadius="1000dp">
-+
-+                                <ImageView
-+                                    android:id="@+id/heroXImage"
-+                                    android:layout_width="match_parent"
-+                                    android:layout_height="match_parent"
-+                                    android:elevation="7dp"
-+                                    app:srcCompat="@drawable/herox" />
-+                            </androidx.cardview.widget.CardView>
-+                        </LinearLayout>
-+                    </androidx.core.widget.NestedScrollView>
-+
-+                </androidx.cardview.widget.CardView>
-+            </LinearLayout>
- 
-         </LinearLayout>
- 
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game engine\r\n//Handles logic, physics and graphics\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class GameView extends SurfaceView implements Runnable {\r\n    public static GameView instance;\r\n    int screenWidth, screenHeight, cameraSize;\r\n    Vector2 screenCenter;\r\n    float zoom;\r\n\r\n\r\n    //final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds\r\n    final float fixedDeltaTime = (int) (1000 / 30); // in milliseconds\r\n\r\n    float deltaTime = fixedDeltaTime;\r\n\r\n    //Physics\r\n    public float groundLevel, upperBound, gravity = 0.3f;\r\n    int physicsIterations = 5;\r\n    Vector2 cameraDisp = Vector2.zero;\r\n\r\n    //Projectile\r\n    int projectileIndex = 0;//Next projectile in array to spawn\r\n    float shootSpeedVariance=0.1f, shootDirectionVariance = 10f;//Error in shooting speed and direction\r\n\r\n    //Logic\r\n    boolean isRunning = false;\r\n    Thread gameThread, drawThread;\r\n    //WaveController waveController;//Controls when enemies spawn\r\n    int enemyIndex = 0;//Next enemy in array to spawn\r\n    Vector2 moveBy;\r\n\r\n    //Scene\r\n    Scene scene;\r\n\r\n    //Game objects\r\n    public Dragon player;\r\n    GameObject ground;\r\n    NPC_Pool npc_pool;\r\n    GoldPool goldPool;\r\n    ProjectilePool projectilePool;\r\n    Lair lair;\r\n    Fortress fortress;\r\n    Hud hud;\r\n\r\n    //Drawing\r\n    SurfaceHolder holder;\r\n    Paint back = new Paint();\r\n    SpriteManager spriteManager;\r\n\r\n    public GameView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Initialization\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    void init(){\r\n\r\n\r\n        instance = this;\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        cameraSize = (int) (screenWidth);\r\n        screenCenter = new Vector2(screenWidth/2,screenHeight/2);\r\n        back.setColor(Color.WHITE);\r\n\r\n        spriteManager = new SpriteManager();\r\n\r\n        holder = getHolder();\r\n\r\n        groundLevel = screenHeight*7/10;\r\n\r\n        //Player gameobject\r\n        Bitmap playerSprite = BitmapFactory.decodeResource(this.getResources(), R.drawable.empty);\r\n        player = new Dragon(playerSprite,0.5f,0.9f,screenHeight/20,screenHeight/20);\r\n\r\n        npc_pool = new NPC_Pool();\r\n        npc_pool.spawnWizard(0, (int) groundLevel,1);\r\n        npc_pool.spawnArcher(0, (int) groundLevel,1);\r\n\r\n        goldPool = new GoldPool();\r\n        //GoldPool.instance.spawnGold(screenHeight/2, screenWidth/4,100);\r\n        projectilePool = new ProjectilePool();\r\n\r\n        player.setDamagedSound(SoundEffects.DAMAGE);\r\n        player.setDestroyedSound(SoundEffects.DEATH);\r\n\r\n        hud = new Hud();\r\n\r\n        //Init scene\r\n        scene = new Scene();\r\n        lair = new Lair();\r\n\r\n\r\n        fortress = new Fortress( screenWidth*2, (int)groundLevel, true, this);\r\n\r\n        Game.instance.gameOver = false;\r\n\r\n        resume();\r\n\r\n    }\r\n\r\n    Vector2 randomPosition(){\r\n        Vector2 random = Vector2.getRandom();\r\n        random.x *= ground.width*0.3f;\r\n        random.y *= ground.height*0.3f;\r\n        return ground.position.add(random);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game loop\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    float totalFrame, numberFrame;\r\n    public void resume() {\r\n        isRunning = true;\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n    }\r\n\r\n    public void pause() {\r\n        isRunning = false;\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                gameThread.join();//execute completely and then stop\r\n                retry = false;\r\n            } catch (Exception e) {\r\n                gameThread.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        while (isRunning) {\r\n\r\n            long started = System.currentTimeMillis();\r\n            //Apply physics calculations per frame\r\n            for (int i = 0; i < physicsIterations; i++) {\r\n                physics();\r\n            }\r\n            long physicsTime = System.currentTimeMillis();\r\n            //System.out.println( \"physics \" + (physicsTime - started));\r\n\r\n            //Apply game logic to game objects\r\n\r\n            update();\r\n            long updateTime = System.currentTimeMillis();\r\n            //System.out.println( \"update \" + (updateTime-physicsTime));\r\n\r\n            draw();\r\n            long drawTime = System.currentTimeMillis() - updateTime;\r\n            //System.out.println( \"draw main \" + drawTime);\r\n            totalFrame += drawTime;\r\n            numberFrame++;\r\n            //System.out.println(\"average draw \" + totalFrame/numberFrame);\r\n\r\n            //If the time between frames does not match the target FPS, delay or skip to match\r\n\r\n            deltaTime = (System.currentTimeMillis() - started);\r\n            int lag = (int) (fixedDeltaTime - deltaTime);\r\n\r\n            //System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n            if (lag > 0) {\r\n                try {\r\n                    gameThread.sleep(lag);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            while (lag < 0) {\r\n                lag += fixedDeltaTime;\r\n                //Apply physics calculations per frame\r\n                for (int i = 0; i < physicsIterations; i++) {\r\n                    physics();\r\n                }\r\n                //Apply game logic to game objects\r\n                update();\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Graphics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    private void draw() {\r\n            Canvas canvas = new Canvas();\r\n            try {\r\n                canvas = holder.lockCanvas(null);\r\n            }\r\n            catch (Exception e){\r\n\r\n            }\r\n            if (canvas != null) {\r\n                //90\r\n                //canvas.drawRect(0, 0, screenWidth * 1.2f, screenHeight, back);\r\n                scene.drawBackground(canvas);//40\r\n                //lair.draw(canvas);//80\r\n                fortress.draw(canvas);//90\r\n                projectilePool.draw(canvas);//80\r\n                player.draw(canvas);//80\r\n                npc_pool.draw(canvas);//90\r\n                scene.drawForeground(canvas);//\r\n                goldPool.draw(canvas);//\r\n\r\n                hud.draw(canvas);\r\n                holder.unlockCanvasAndPost(canvas);\r\n            }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Physics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void physics() {\r\n        cameraDisp.x = -player.position.x+screenWidth/2;\r\n        if(!Game.instance.gameOver) {\r\n\r\n            npc_pool.physics(fixedDeltaTime);\r\n            fortress.physics(deltaTime);\r\n            //Enemy motion\r\n            if (!player.destroyed) {\r\n                goldPool.physics(fixedDeltaTime / physicsIterations);\r\n                projectilePool.physics(fixedDeltaTime / physicsIterations);\r\n                player.physics(fixedDeltaTime / physicsIterations);\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game logic\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void update() {\r\n        if(player.visible){\r\n            player.update(fixedDeltaTime);\r\n            scene.update(fixedDeltaTime);\r\n            npc_pool.update(fixedDeltaTime);\r\n            projectilePool.update(fixedDeltaTime);\r\n            //System.out.println(fixedDeltaTime +\" \"+ deltaTime);\r\n            goldPool.update(fixedDeltaTime);\r\n            fortress.update(fixedDeltaTime);\r\n            hud.update(fixedDeltaTime);\r\n            lair.update(fixedDeltaTime);\r\n\r\n        }\r\n        else{\r\n            if(!Game.instance.gameOver) {\r\n                pause();\r\n                Game.instance.showGameOver = true;\r\n            }\r\n        }\r\n    }\r\n    public void movePlayerBy(Vector2 dv){\r\n\r\n        if(dv!=null){\r\n            this.moveBy = new Vector2(dv.x,dv.y);\r\n            player.moveBy(moveBy.multiply(player.maxMoveSpeed));\r\n\r\n        }\r\n        else {\r\n            player.moveBy(dv);\r\n        }\r\n    }\r\n\r\n    public float getGroundLevel(){\r\n        return  groundLevel;\r\n    }\r\n    public void breathFire(boolean breathingFire){\r\n\r\n        player.breathingFire = breathingFire;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(date 1603848936114)
-@@ -12,6 +12,7 @@
- import android.util.DisplayMetrics;
- import android.view.SurfaceHolder;
- import android.view.SurfaceView;
-+import android.widget.Button;
- 
- //-----------------------------------------------------------------------------------------------------------
- //Game engine
-@@ -100,6 +101,7 @@
-         screenCenter = new Vector2(screenWidth/2,screenHeight/2);
-         back.setColor(Color.WHITE);
- 
-+
-         spriteManager = new SpriteManager();
- 
-         holder = getHolder();
-@@ -275,7 +277,6 @@
-             fortress.update(fixedDeltaTime);
-             hud.update(fixedDeltaTime);
-             lair.update(fixedDeltaTime);
--
-         }
-         else{
-             if(!Game.instance.gameOver) {
-Index: app/src/main/res/layout/activity_game.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/gameLayout\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@android:color/white\"\r\n    tools:context=\".Game\">\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/UI\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:background=\"@android:color/transparent\"\r\n        android:elevation=\"3dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"1.0\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintVertical_bias=\"1.0\">\r\n\r\n\r\n        <TextView\r\n            android:id=\"@+id/textView3\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintHorizontal_bias=\"0.58\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/shrink\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:onClick=\"onShrink\"\r\n            android:text=\"younger\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/grow\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:onClick=\"onGrow\"\r\n            android:text=\"older\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/shrink\"\r\n            app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/layout/activity_game.xml	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/res/layout/activity_game.xml	(date 1603849787978)
-@@ -22,6 +22,14 @@
-         app:layout_constraintVertical_bias="1.0">
- 
- 
-+        <Button
-+            android:id="@+id/buttonOfStop"
-+            android:layout_width="50dp"
-+            android:layout_height="50dp"
-+            android:background="@android:drawable/ic_media_pause"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toTopOf="parent" />
-+
-         <TextView
-             android:id="@+id/textView3"
-             android:layout_width="wrap_content"
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"mnm.bcs106.yoobeecolleges.dragon\">\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity\r\n            android:name=\".Pause_menu\"\r\n            android:configChanges=\"orientation|keyboardHidden|screenSize\"\r\n            android:label=\"@string/title_activity_pause_menu\"\r\n            android:theme=\"@style/AppTheme.Fullscreen\"></activity>\r\n        <activity\r\n            android:name=\".Game\"\r\n            android:screenOrientation=\"landscape\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/AndroidManifest.xml	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/AndroidManifest.xml	(date 1603858270547)
-@@ -10,10 +10,15 @@
-         android:supportsRtl="true"
-         android:theme="@style/AppTheme">
-         <activity
-+            android:name=".Main_menu"
-+            android:configChanges="orientation|keyboardHidden|screenSize"
-+            android:label="@string/title_activity_main_menu"
-+            android:theme="@style/AppTheme.Fullscreen" />
-+        <activity
-             android:name=".Pause_menu"
-             android:configChanges="orientation|keyboardHidden|screenSize"
-             android:label="@string/title_activity_pause_menu"
--            android:theme="@style/AppTheme.Fullscreen"></activity>
-+            android:theme="@style/AppTheme.Fullscreen" />
-         <activity
-             android:name=".Game"
-             android:screenOrientation="landscape">
-Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Main_menu.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Main_menu.java	(date 1603848231879)
-+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Main_menu.java	(date 1603848231879)
-@@ -0,0 +1,170 @@
-+package mnm.bcs106.yoobeecolleges.dragon;
-+
-+import android.annotation.SuppressLint;
-+
-+import androidx.appcompat.app.ActionBar;
-+import androidx.appcompat.app.AppCompatActivity;
-+
-+import android.os.Bundle;
-+import android.os.Handler;
-+import android.view.MotionEvent;
-+import android.view.View;
-+
-+/**
-+ * An example full-screen activity that shows and hides the system UI (i.e.
-+ * status bar and navigation/system bar) with user interaction.
-+ */
-+public class Main_menu extends AppCompatActivity {
-+    /**
-+     * Whether or not the system UI should be auto-hidden after
-+     * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
-+     */
-+    private static final boolean AUTO_HIDE = true;
-+
-+    /**
-+     * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
-+     * user interaction before hiding the system UI.
-+     */
-+    private static final int AUTO_HIDE_DELAY_MILLIS = 3000;
-+
-+    /**
-+     * Some older devices needs a small delay between UI widget updates
-+     * and a change of the status and navigation bar.
-+     */
-+    private static final int UI_ANIMATION_DELAY = 300;
-+    private final Handler mHideHandler = new Handler();
-+    private View mContentView;
-+    private final Runnable mHidePart2Runnable = new Runnable() {
-+        @SuppressLint("InlinedApi")
-+        @Override
-+        public void run() {
-+            // Delayed removal of status and navigation bar
-+
-+            // Note that some of these constants are new as of API 16 (Jelly Bean)
-+            // and API 19 (KitKat). It is safe to use them, as they are inlined
-+            // at compile-time and do nothing on earlier devices.
-+            mContentView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE
-+                    | View.SYSTEM_UI_FLAG_FULLSCREEN
-+                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
-+                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
-+                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
-+                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
-+        }
-+    };
-+    private View mControlsView;
-+    private final Runnable mShowPart2Runnable = new Runnable() {
-+        @Override
-+        public void run() {
-+            // Delayed display of UI elements
-+            ActionBar actionBar = getSupportActionBar();
-+            if (actionBar != null) {
-+                actionBar.show();
-+            }
-+            mControlsView.setVisibility(View.VISIBLE);
-+        }
-+    };
-+    private boolean mVisible;
-+    private final Runnable mHideRunnable = new Runnable() {
-+        @Override
-+        public void run() {
-+            hide();
-+        }
-+    };
-+    /**
-+     * Touch listener to use for in-layout UI controls to delay hiding the
-+     * system UI. This is to prevent the jarring behavior of controls going away
-+     * while interacting with activity UI.
-+     */
-+    private final View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
-+        @Override
-+        public boolean onTouch(View view, MotionEvent motionEvent) {
-+            switch (motionEvent.getAction()) {
-+                case MotionEvent.ACTION_DOWN:
-+                    if (AUTO_HIDE) {
-+                        delayedHide(AUTO_HIDE_DELAY_MILLIS);
-+                    }
-+                    break;
-+                case MotionEvent.ACTION_UP:
-+                    view.performClick();
-+                    break;
-+                default:
-+                    break;
-+            }
-+            return false;
-+        }
-+    };
-+
-+    @Override
-+    protected void onCreate(Bundle savedInstanceState) {
-+        super.onCreate(savedInstanceState);
-+
-+        setContentView(R.layout.activity_main_menu);
-+
-+        mVisible = true;
-+        mContentView = findViewById(R.id.fullscreen_content);
-+
-+        // Set up the user interaction to manually show or hide the system UI.
-+        mContentView.setOnClickListener(new View.OnClickListener() {
-+            @Override
-+            public void onClick(View view) {
-+                toggle();
-+            }
-+        });
-+
-+        // Upon interacting with UI controls, delay any scheduled hide()
-+        // operations to prevent the jarring behavior of controls going away
-+        // while interacting with the UI.
-+    }
-+
-+    @Override
-+    protected void onPostCreate(Bundle savedInstanceState) {
-+        super.onPostCreate(savedInstanceState);
-+
-+        // Trigger the initial hide() shortly after the activity has been
-+        // created, to briefly hint to the user that UI controls
-+        // are available.
-+        delayedHide(100);
-+    }
-+
-+    private void toggle() {
-+        if (mVisible) {
-+            hide();
-+        } else {
-+            show();
-+        }
-+    }
-+
-+    private void hide() {
-+        // Hide UI first
-+        ActionBar actionBar = getSupportActionBar();
-+        if (actionBar != null) {
-+            actionBar.hide();
-+        }
-+        mControlsView.setVisibility(View.GONE);
-+        mVisible = false;
-+
-+        // Schedule a runnable to remove the status and navigation bar after a delay
-+        mHideHandler.removeCallbacks(mShowPart2Runnable);
-+        mHideHandler.postDelayed(mHidePart2Runnable, UI_ANIMATION_DELAY);
-+    }
-+
-+    private void show() {
-+        // Show the system bar
-+        mContentView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
-+                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
-+        mVisible = true;
-+
-+        // Schedule a runnable to display UI elements after a delay
-+        mHideHandler.removeCallbacks(mHidePart2Runnable);
-+        mHideHandler.postDelayed(mShowPart2Runnable, UI_ANIMATION_DELAY);
-+    }
-+
-+    /**
-+     * Schedules a call to hide() in delay milliseconds, canceling any
-+     * previously scheduled calls.
-+     */
-+    private void delayedHide(int delayMillis) {
-+        mHideHandler.removeCallbacks(mHideRunnable);
-+        mHideHandler.postDelayed(mHideRunnable, delayMillis);
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/res/layout/activity_main_menu.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/layout/activity_main_menu.xml	(date 1603848231861)
-+++ app/src/main/res/layout/activity_main_menu.xml	(date 1603848231861)
-@@ -0,0 +1,66 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:tools="http://schemas.android.com/tools"
-+    android:layout_width="match_parent"
-+    android:layout_height="match_parent"
-+    android:background="@color/colorDragon"
-+    android:theme="@style/ThemeOverlay.Dragon.FullscreenContainer"
-+    tools:context=".Main_menu">
-+
-+    <!-- The primary full-screen view. This can be replaced with whatever view
-+         is needed to present your content, e.g. VideoView, SurfaceView,
-+         TextureView, etc. -->
-+    <TextView
-+        android:id="@+id/fullscreen_content"
-+        android:layout_width="match_parent"
-+        android:layout_height="match_parent"
-+        android:gravity="center"
-+        android:keepScreenOn="true"
-+        android:text="@string/dummy_content"
-+        android:textColor="@color/colorDragon"
-+        android:textSize="50sp"
-+        android:textStyle="bold" />
-+
-+    <!-- This FrameLayout insets its children based on system windows using
-+         android:fitsSystemWindows. -->
-+    <FrameLayout
-+        android:layout_width="match_parent"
-+        android:layout_height="match_parent"
-+        android:fitsSystemWindows="true">
-+
-+        <LinearLayout
-+            android:layout_width="match_parent"
-+            android:layout_height="match_parent"
-+            android:orientation="horizontal">
-+
-+            <Space
-+                android:layout_width="match_parent"
-+                android:layout_height="match_parent"
-+                android:layout_weight="1" />
-+
-+            <LinearLayout
-+                android:layout_width="wrap_content"
-+                android:layout_height="match_parent"
-+                android:gravity="center"
-+                android:orientation="vertical">
-+
-+                <Button
-+                    android:id="@+id/button6"
-+                    android:layout_width="wrap_content"
-+                    android:layout_height="wrap_content"
-+                    android:layout_margin="20dp"
-+                    android:paddingLeft="50dp"
-+                    android:paddingRight="50dp"
-+                    android:text="Start" />
-+
-+            </LinearLayout>
-+
-+            <Space
-+                android:layout_width="match_parent"
-+                android:layout_height="match_parent"
-+                android:layout_weight="1" />
-+
-+        </LinearLayout>
-+    </FrameLayout>
-+
-+</FrameLayout>
-\ No newline at end of file
-Index: app/build.gradle
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n    defaultConfig {\r\n        applicationId \"mnm.bcs106.yoobeecolleges.dragon\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.0.2'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/build.gradle	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/build.gradle	(date 1603856155414)
-@@ -24,6 +24,7 @@
-     implementation 'androidx.appcompat:appcompat:1.0.2'
-     implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
-     implementation 'androidx.cardview:cardview:1.0.0'
-+    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
-     testImplementation 'junit:junit:4.12'
-     androidTestImplementation 'androidx.test.ext:junit:1.1.0'
-     androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
-Index: app/src/main/res/values/strings.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><resources>\r\n    <string name=\"app_name\">dragon</string>\r\n    <string name=\"title_activity_pause_menu\">FullscreenActivity</string>\r\n    <string name=\"dummy_button\">Dummy Button</string>\r\n    <string name=\"dummy_content\">DUMMY\\nCONTENT</string>\r\n</resources>\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/values/strings.xml	(revision 8f0393a7f58504665af2d6d4c481bd6d804d79ce)
-+++ app/src/main/res/values/strings.xml	(date 1603855901543)
-@@ -3,4 +3,6 @@
-     <string name="title_activity_pause_menu">FullscreenActivity</string>
-     <string name="dummy_button">Dummy Button</string>
-     <string name="dummy_content">DUMMY\nCONTENT</string>
-+    <string name="title_activity_main_menu">FullscreenActivity</string>
-+    <string name="title_activity_credits">FullscreenActivity</string>
- </resources>
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM__Default_Changelist_.xml	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM__Default_Changelist_.xml	(revision 3619a618805909ae1d02c54292266a95c1d220b0)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM_[Default_Changelist]" date="1603858427703" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/28/2020 5:13 PM [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="app/src/main/res/drawable/herox.jpg" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_28_2020_5_13_PM_[Default_Changelist]/herox.jpg" />
-  </binary>
-</changelist>
\ No newline at end of file
