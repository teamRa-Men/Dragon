Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Point;\r\n\r\npublic class ArcherTower extends Foundation {\r\n\r\n    float attackRange = (1/3);\r\n    public Projectile[] Arrows = new Projectile[15];\r\n\r\n    public boolean lockTarget = false;\r\n    public Point target = new Point();\r\n    public Point creationPoint = new Point();\r\n\r\n    public ArcherTower( int x, int y, boolean isStanding, GameView activity){\r\n        super( x, y, 1, isStanding, activity );\r\n\r\n        this.buildingImage = BitmapFactory.decodeResource(activity.getResources(), R.drawable.house);\r\n        this.buildingImage = Bitmap.createScaledBitmap(this.buildingImage,100,100,false);\r\n        creationPoint.x = x;\r\n        creationPoint.y = (int)GameView.instance.groundLevel + buildingImage.getHeight();\r\n\r\n        System.out.println(\"Tower spawned\");\r\n    }\r\n\r\n\r\n    //adding physics to the arrows\r\n    public void Physics(float deltaTime){\r\n\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        System.out.println(\"something went off\");\r\n        if (!lockTarget && Math.abs(GameView.instance.player.position.y-y)<500){\r\n            lockTarget = true;\r\n            target.x = (int) GameView.instance.player.position.x;\r\n            System.out.println(\"in range\");\r\n            return true;}\r\n\r\n        else if (lockTarget){\r\n            target.x = (int) GameView.instance.player.position.x;\r\n            if (Math.abs(GameView.instance.player.position.x-x)>1000){\r\n                //target.x = npcX;\r\n                lockTarget = false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 30, GameView.instance.player.position.x, GameView.instance.player.position.y);\r\n    }\r\n\r\n\r\n    //\r\n    public void update(float fixedDeltaTime){\r\n        if(inRange()) {\r\n            Attack();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getTileNr() {\r\n        return 1;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(revision 887848a094561a9fb6044ae14b6e516c42104318)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/ArcherTower.java	(date 1603057463906)
@@ -33,17 +33,21 @@
     // calculates if the dragon is in range
     public boolean inRange(){
         System.out.println("something went off");
+
         if (!lockTarget && Math.abs(GameView.instance.player.position.y-y)<500){
             lockTarget = true;
             target.x = (int) GameView.instance.player.position.x;
             System.out.println("in range");
+            Attack();
             return true;}
 
+
         else if (lockTarget){
             target.x = (int) GameView.instance.player.position.x;
             if (Math.abs(GameView.instance.player.position.x-x)>1000){
-                //target.x = npcX;
+                target.x = x;
                 lockTarget = false;
+                System.out.println("target lost");
             }
         }
         return false;
@@ -52,7 +56,8 @@
 
     //shooting an arrow at target
     public void Attack(){
-        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 30, GameView.instance.player.position.x, GameView.instance.player.position.y);
+        ProjectilePool.instance.shootArrow(creationPoint.x, creationPoint.y, 1,
+                GameView.instance.player.position.x-creationPoint.x, GameView.instance.player.position.y-creationPoint.y);
     }
 
 
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.SocketTimeoutException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class Fortress extends Foundation {\r\n\r\n\r\n    //All the stuff the fortress needs and can do;\r\n\r\n    int lv;\r\n\r\n    int maxHealth = 500;\r\n\r\n    int currentGold;\r\n    int maxGold;\r\n    public int goldRate = 20;\r\n\r\n    int currentTilesLeft;\r\n    int currentTilesRight;\r\n    int maxTiles = 8;\r\n\r\n    ArrayList<Foundation> currentBuildingsRight = new ArrayList<Foundation>();\r\n    ArrayList<Foundation> currentBuildingsLeft = new ArrayList<Foundation>();\r\n    int maxBuildings;\r\n\r\n    //number of buildings in the village/town\r\n\r\n    public int currentTownInhabitants;\r\n    public int maxTownInhabitants; // defined by the houses/farms\r\n\r\n    //public Foundation[] buildings = new Foundation[5];\r\n\r\n    ArcherTower archertower;\r\n    boolean hasTowers = false;\r\n\r\n\r\n    // attack function\r\n\r\n\r\n    //Fortress constructor, used when calling Fortress();\r\n\r\n    //this specific Fortress\r\n    public Fortress(int x, int y, boolean isStanding, GameView activity) {\r\n        super(x, y,4, isStanding, activity);\r\n\r\n        buildingImage = BitmapFactory.decodeResource(Game.instance.getResources(),R.drawable.fortress);\r\n        buildingImage = Bitmap.createScaledBitmap(buildingImage,width,height,false);\r\n        Random r = new Random();\r\n        x = r.nextInt();\r\n\r\n        maxBuildings = 5;\r\n        maxGold = 400;\r\n        lv = 0;\r\n    }\r\n\r\n    //new test with arraylists works pretty much, tiles and buildings still individual from each other\r\n\r\n    public void update(float deltaTime) {\r\n\r\n        if(currentGold < maxGold){\r\n            deltaTime = deltaTime/200;\r\n            currentGold += goldRate * deltaTime;\r\n        }\r\n\r\n        if (currentGold >= 240 && (currentBuildingsRight.size() + currentBuildingsLeft.size()) < maxBuildings) {\r\n            System.out.println(\"Money aquired\");\r\n\r\n            //left or right\r\n            double lr = (Math.random() - 0.5f);\r\n            //int direction = (lr < 0 ? currentTilesRight : currentTilesLeft);\r\n\r\n            //type of house\r\n            double rh = (Math.random() - 0.5f);\r\n\r\n            int offset = (int)(tilesize+((Math.random()*tilesize/12)));\r\n\r\n            if (lr < 0) {\r\n\r\n                if (rh < 0) {\r\n                    currentBuildingsLeft.add(new House(x - (currentTilesLeft + 1) * offset, y, true, activity));\r\n                    currentTilesLeft+=1;\r\n                }\r\n                else {\r\n                    currentBuildingsLeft.add(new Farm(x - (currentTilesLeft + 1) * tilesize, y, true, activity));\r\n                    currentTilesLeft+=3;\r\n                }\r\n\r\n                currentGold -= 150;\r\n\r\n            } else {\r\n\r\n                if (rh < 0) {\r\n                    currentBuildingsRight.add(new House(x + (tilesize*3) +(currentTilesRight + 1)*offset, y, true, activity));\r\n                    currentTilesRight+=1;\r\n                }\r\n                else {\r\n                    currentBuildingsRight.add(new Farm(x + (tilesize*3) +(currentTilesRight + 1) * tilesize, y, true, activity));\r\n                    currentTilesRight+=3;\r\n                }\r\n\r\n                currentGold -= 150;\r\n            }\r\n\r\n//            System.out.println(\"Left Buildings :\" + currentBuildingsLeft.size());\r\n//            System.out.println(\"Right Buildings :\" + currentBuildingsRight.size());\r\n//\r\n//            System.out.println(\"Left Tiles :\" +currentTilesLeft);\r\n//            System.out.println(\"Right Tiles :\" +currentTilesRight);\r\n\r\n        }\r\n\r\n        //Lv up conditions\r\n        if((((currentBuildingsRight.size()+currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold/10*9))\r\n                && lv == 0){\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 300;\r\n            maxBuildings = 12;\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize*3) +(currentTilesRight + 1) * tilesize, y, true, activity));\r\n            currentTilesRight+=2;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft + 1) * tilesize, y, true, activity));\r\n            currentTilesLeft+=2;\r\n\r\n            hasTowers = true;\r\n\r\n        }\r\n\r\n       for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n           currentBuildingsRight.get(i).update(deltaTime);\r\n       }\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).update(deltaTime);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n\r\n            if (currentBuildingsLeft.get(i) != null) {\r\n\r\n                currentBuildingsLeft.get(i).draw(c);\r\n\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n\r\n            if (currentBuildingsRight.get(i) != null) {\r\n\r\n                currentBuildingsRight.get(i).draw(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void position(Fortress f) {\r\n\r\n    }\r\n\r\n    public void physics(float deltaTime){\r\n        super.physics(deltaTime);\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).physics(deltaTime);\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            currentBuildingsRight.get(i).physics(deltaTime);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    //HASMAPS\r\n\r\n    public void update(int deltaTime) {\r\n        currentGold += goldRate * deltaTime;\r\n        if (currentGold >= 240 && (currentBuildingsRight.size() + currentBuildingsLeft.size()) < 7) {\r\n            System.out.println(\"Money aquired\");\r\n\r\n            //left or right\r\n            double lr = (Math.random() - 0.5f);\r\n            //int direction = (lr < 0 ? currentTilesRight : currentTilesLeft);\r\n\r\n            //type of house\r\n            double rh = (Math.random() - 0.5f);\r\n\r\n            if (lr < 0) {\r\n\r\n                if (rh < 0) {\r\n                    currentBuildingsLeft.put(new House(buildingImage, x - (currentTilesLeft + 1) * 100, y, 1, true, activity), 1);\r\n                } else {\r\n                    currentBuildingsLeft.put(new Farm(buildingImage, x - (currentTilesLeft + 1) * 100, y, 2, true, activity), 3);\r\n                }\r\n\r\n                currentBuilding++;\r\n                currentGold -= 150;\r\n\r\n            }\r\n            else {\r\n\r\n                if (rh < 0) {\r\n                    currentBuildingsRight.put(new House(buildingImage, x + (currentTilesRight + 1) * 100, y, 1, true, activity), 1);\r\n                } else {\r\n                    currentBuildingsRight.put(new Farm(buildingImage, x + (currentTilesRight + 1) * 100, y, 2, true, activity), 3);\r\n                }\r\n\r\n\r\n                currentBuilding++;\r\n                currentGold -= 150;\r\n            }\r\n\r\n            currentTilesLeft = 0;\r\n            currentTilesRight = 0;\r\n\r\n            System.out.println(\"Left Buildings :\" + currentBuildingsLeft.size());\r\n            for (Integer i : currentBuildingsLeft.values()) {\r\n                System.out.println(i);\r\n                currentTilesLeft += i;\r\n            }\r\n            System.out.println(\"Tiles left :\" + currentTilesLeft);\r\n\r\n            System.out.println(\"Right Buildings :\" + currentBuildingsRight.size());\r\n            for (Integer i : currentBuildingsRight.values()) {\r\n                System.out.println(i);\r\n                currentTilesRight += i;\r\n            }\r\n            for (Foundation i : currentBuildingsRight.keySet()) {\r\n                System.out.println(i);\r\n            }\r\n            System.out.println(\"Tiles Right :\" + currentTilesRight);\r\n\r\n            System.out.println(\"\\n\\t\");\r\n\r\n        }\r\n    }}\r\n\r\n    /*\r\n   @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n\r\n            if (currentBuildingsLeft.get(i) != null) {\r\n\r\n                currentBuildingsLeft.get(i).draw(c);\r\n\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n\r\n            if (currentBuildingsRight.get(i) != null) {\r\n\r\n                currentBuildingsRight.get(i).draw(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void position(Fortress f) {\r\n\r\n    }\r\n\r\n\r\n    */\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//TODO: Building TileSize : done\r\n//      Conditional Building output :\r\n//      Corresponding Gold Rate increase depending on Inhabitants :\r\n//      Conditional LV-up mechanic :\r\n//      Adding prio. to farms at start of Village:\r\n//      Slightly offset BUILDINGS:\r\n//      Fortress size = 4 tiles:\r\n\r\n/*\r\n if(lr < 0 ){\r\n\r\n        if(rh < 0)\r\n        {buildings[currentBuilding] = new House(buildingImage, x + (currentTilesRight+1)*tileSize,y,1,true, activity);}\r\n\r\n        else\r\n        {buildings[currentBuilding] = new Farm(buildingImage, x + (currentTilesRight+1)*tileSize,y,2,true, activity);}\r\n\r\n        currentTilesRight++;\r\n        currentBuilding++;\r\n\r\n        scenario 1:\r\n-------------------------------------------\r\n        currentTilesRight = 0\r\n        currentBuildings = 0\r\n\r\n        remember, x, in itself, does not change\r\n\r\n\r\n\r\n\r\n        new House(houseimage, x(0) + (0+1)*100 (100), y) (having only one tile it is fine)\r\n\r\n        currentTilesRight++; (+1)\r\n        currentBuildings++; (+1)\r\n\r\n        currentTilesRight = 1\r\n        currentBuildings = 1\r\n\r\n\r\n\r\n\r\n        new Farm(houseimage, x(0) + (1+1)*100 (200), y) (having 3 tiles, the PLACEMENT is fine)\r\n\r\n        currentTilesRight++; (+1) (should instead be +3 instead of +1)\r\n        currentBuildings++; (+1)\r\n\r\n        currentTilesRight = 2 (should be 4)\r\n        currentBuildings = 2\r\n\r\n\r\n\r\n\r\n         new House(houseimage, x(0) + (2+1)*100 (300), y) (where errors pile up)\r\n\r\n        currentTilesRight++; (+1)\r\n        currentBuildings++; (+1)\r\n\r\n        currentTilesRight = 3\r\n        currentBuildings = 3\r\n-------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(revision 887848a094561a9fb6044ae14b6e516c42104318)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(date 1603056573754)
@@ -81,7 +81,7 @@
             //type of house
             double rh = (Math.random() - 0.5f);
 
-            int offset = (int)(tilesize+((Math.random()*tilesize/12)));
+            int offset = (int)(tilesize+((Math.random()*(tilesize-((tilesize/10)*9)))));
 
             if (lr < 0) {
 
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game engine\r\n//Handles logic, physics and graphics\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class GameView extends SurfaceView implements Runnable {\r\n    public static GameView instance;\r\n    int screenWidth, screenHeight, cameraSize;\r\n    Vector2 screenCenter;\r\n    float zoom;\r\n\r\n\r\n    final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds\r\n    //final float fixedDeltaTime = (int) (1000 / 60); // in milliseconds\r\n\r\n    float deltaTime = fixedDeltaTime;\r\n\r\n    //Physics\r\n    public float groundLevel, upperBound, gravity = 0.3f;\r\n    int physicsIterations = 2;\r\n    Vector2 cameraDisp = Vector2.zero;\r\n\r\n    //Projectile\r\n    int projectileIndex = 0;//Next projectile in array to spawn\r\n    float shootSpeedVariance=0.1f, shootDirectionVariance = 10f;//Error in shooting speed and direction\r\n\r\n    //Logic\r\n    boolean isRunning = false;\r\n    Thread gameThread, drawThread;\r\n    //WaveController waveController;//Controls when enemies spawn\r\n    int enemyIndex = 0;//Next enemy in array to spawn\r\n    Vector2 moveBy;\r\n\r\n    //Scene\r\n    Scene scene;\r\n\r\n    //Game objects\r\n    int maxEnemyCount = 3;\r\n    public Dragon player;\r\n    GameObject ground;\r\n    NPC_Pool npc_pool;\r\n    GoldPool goldPool;\r\n    ProjectilePool projectilePool;\r\n    Lair lair;\r\n    Fortress fortress;\r\n    Hud hud;\r\n\r\n    //Drawing\r\n    SurfaceHolder holder;\r\n    Paint back = new Paint();\r\n\r\n    public GameView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Initialization\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    void init(){\r\n        //Singleton\r\n        if(instance == null) {\r\n            instance = this;\r\n        }\r\n        //System.out.println(fixedDeltaTime);\r\n        //Dimensions\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        cameraSize = (int) (screenWidth);\r\n        screenCenter = new Vector2(screenWidth/2,screenHeight/2);\r\n        back.setColor(Color.WHITE);\r\n\r\n        holder = getHolder();\r\n\r\n        groundLevel = screenHeight*7/10;\r\n\r\n        //Player gameobject\r\n        Bitmap playerSprite = BitmapFactory.decodeResource(this.getResources(), R.drawable.empty);\r\n        player = new Dragon(playerSprite,0.5f,0.9f,screenHeight/20,screenHeight/20);\r\n\r\n        npc_pool = new NPC_Pool();\r\n\r\n        goldPool = new GoldPool();\r\n        GoldPool.instance.spawnGold(screenHeight/2, screenWidth/4,100);\r\n        projectilePool = new ProjectilePool();\r\n\r\n        player.setDamagedSound(SoundEffects.DAMAGE);\r\n        player.setDestroyedSound(SoundEffects.DEATH);\r\n\r\n        hud = new Hud();\r\n\r\n        //Init scene\r\n        scene = new Scene();\r\n        lair = new Lair();\r\n\r\n\r\n        fortress = new Fortress( screenWidth*2, (int)groundLevel, true, this);\r\n\r\n        Game.instance.gameOver = false;\r\n\r\n        resume();\r\n\r\n    }\r\n\r\n    Vector2 randomPosition(){\r\n        Vector2 random = Vector2.getRandom();\r\n        random.x *= ground.width*0.3f;\r\n        random.y *= ground.height*0.3f;\r\n        return ground.position.add(random);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game loop\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    float totalFrame, numberFrame;\r\n    public void resume() {\r\n        isRunning = true;\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n\r\n        drawThread = new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                while(isRunning) {\r\n                    long started = System.currentTimeMillis();\r\n                    draw();\r\n                    deltaTime = (System.currentTimeMillis() - started);\r\n                    int lag = (int) (fixedDeltaTime - deltaTime);\r\n\r\n                    //System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n                    if (lag > 0) {\r\n                        try {\r\n                            gameThread.sleep(lag);\r\n                        } catch (Exception e) {\r\n                        }\r\n                    }\r\n                    while (lag < 0) {\r\n                        lag += fixedDeltaTime;\r\n                        //Apply physics calculations per frame\r\n                        for (int i = 0; i < physicsIterations; i++) {\r\n                            physics();\r\n                        }\r\n                        //Apply game logic to game objects\r\n                        update();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        //drawThread.start();\r\n    }\r\n\r\n    public void pause() {\r\n        isRunning = false;\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                gameThread.join();//execute completely and then stop\r\n                retry = false;\r\n            } catch (Exception e) {\r\n                gameThread.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        while (isRunning) {\r\n\r\n            long started = System.currentTimeMillis();\r\n            //Apply physics calculations per frame\r\n            for (int i = 0; i < physicsIterations; i++) {\r\n                physics();\r\n            }\r\n            long physicsTime = System.currentTimeMillis();\r\n            //System.out.println( \"physics \" + (physicsTime - started));\r\n\r\n            //Apply ame logic to game objects\r\n\r\n            update();\r\n            long updateTime = System.currentTimeMillis();\r\n            //System.out.println( \"update \" + (updateTime-physicsTime));\r\n\r\n            draw();\r\n            long drawTime = System.currentTimeMillis() - updateTime;\r\n            System.out.println( \"draw main \" + drawTime);\r\n            totalFrame += drawTime;\r\n            numberFrame++;\r\n            System.out.println(\"average main \" + totalFrame/numberFrame);\r\n\r\n            //If the time between frames does not match the target FPS, delay or skip to match\r\n\r\n            deltaTime = (System.currentTimeMillis() - started);\r\n            int lag = (int) (fixedDeltaTime - deltaTime);\r\n\r\n            System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n            if (lag > 0) {\r\n                try {\r\n                    gameThread.sleep(lag);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            while (lag < 0) {\r\n                lag += fixedDeltaTime;\r\n                //Apply physics calculations per frame\r\n                for (int i = 0; i < physicsIterations; i++) {\r\n                    physics();\r\n                }\r\n                //Apply game logic to game objects\r\n                update();\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Graphics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    private void draw() {\r\n\r\n            Canvas canvas = holder.lockCanvas(null);\r\n            if (canvas != null) {\r\n                //90\r\n                canvas.drawRect(0, 0, screenWidth * 1.2f, screenHeight, back);\r\n                //scene.drawBackground(canvas);//40\r\n                //lair.draw(canvas);//80\r\n                fortress.draw(canvas);//90\r\n                projectilePool.draw(canvas);//80\r\n                player.draw(canvas);//80\r\n                npc_pool.draw(canvas);//90\r\n                scene.drawForeground(canvas);//\r\n                goldPool.draw(canvas);//\r\n\r\n                hud.draw(canvas);\r\n                holder.unlockCanvasAndPost(canvas);\r\n            }\r\n\r\n\r\n\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Physics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void physics() {\r\n        cameraDisp.x = -player.position.x+screenWidth/2;\r\n        if(!Game.instance.gameOver) {\r\n\r\n            npc_pool.physics(fixedDeltaTime);\r\n            fortress.physics(deltaTime);\r\n            //Enemy motion\r\n            if (!player.destroyed) {\r\n                goldPool.physics(fixedDeltaTime / physicsIterations);\r\n                projectilePool.physics(fixedDeltaTime / physicsIterations);\r\n                player.physics(fixedDeltaTime / physicsIterations);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //If gameobject is above ground level, apply gravity\r\n    public void gravity(GameObject g) {\r\n        if (g.position.y  < groundLevel) {\r\n            g.setVelocity(g.getVelocity().x, g.getVelocity().y + gravity * fixedDeltaTime / 1000 / physicsIterations);\r\n        } else {\r\n            g.onGrounded(groundLevel);\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game logic\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void update() {\r\n        if(player.visible){\r\n            player.update(fixedDeltaTime);\r\n            scene.update(fixedDeltaTime);\r\n            npc_pool.update(fixedDeltaTime);\r\n            projectilePool.update(fixedDeltaTime);\r\n            //System.out.println(fixedDeltaTime +\" \"+ deltaTime);\r\n            goldPool.update(fixedDeltaTime);\r\n            fortress.update(fixedDeltaTime);\r\n            hud.update(deltaTime);\r\n        }\r\n        else{\r\n            if(!Game.instance.gameOver) {\r\n                Game.instance.showGameOver = true;\r\n            }\r\n        }\r\n    }\r\n    public void movePlayerBy(Vector2 dv){\r\n\r\n        if(dv!=null){\r\n            this.moveBy = new Vector2(dv.x,dv.y);\r\n            player.moveBy(moveBy.multiply(player.maxMoveSpeed));\r\n\r\n        }\r\n        else {\r\n            player.moveBy(dv);\r\n        }\r\n    }\r\n\r\n    public float getGroundLevel(){\r\n        return  groundLevel;\r\n    }\r\n    public void breathFire(boolean breathingFire){\r\n\r\n        player.breathingFire = breathingFire;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(revision 887848a094561a9fb6044ae14b6e516c42104318)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(date 1603056191123)
@@ -214,17 +214,17 @@
 
             draw();
             long drawTime = System.currentTimeMillis() - updateTime;
-            System.out.println( "draw main " + drawTime);
+            //System.out.println( "draw main " + drawTime);
             totalFrame += drawTime;
             numberFrame++;
-            System.out.println("average main " + totalFrame/numberFrame);
+            //System.out.println("average main " + totalFrame/numberFrame);
 
             //If the time between frames does not match the target FPS, delay or skip to match
 
             deltaTime = (System.currentTimeMillis() - started);
             int lag = (int) (fixedDeltaTime - deltaTime);
 
-            System.out.println(deltaTime + " " + fixedDeltaTime + " " + lag);
+            //System.out.println(deltaTime + " " + fixedDeltaTime + " " + lag);
             if (lag > 0) {
                 try {
                     gameThread.sleep(lag);
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.PasswordAuthentication;\r\n\r\npublic class Foundation {\r\n    public int tilesize;\r\n    int tileNr = 1;\r\n    int width, height;\r\n\r\n    //current\r\n    protected int health;\r\n\r\n    protected int maxHealth=100;\r\n\r\n    protected GameView activity;\r\n\r\n    //current\r\n    int inhabitantsSize;\r\n\r\n    // matthews Villager function as an array,\r\n    // to tell the building how many villagers live inside\r\n\r\n    // if health 0 = false;\r\n    boolean isStanding;\r\n\r\n    public int x,y;\r\n    Rect collider;\r\n\r\n    Bitmap buildingImage;\r\n    public ActionController damagePeriod;\r\n\r\n\r\n    public Foundation(int x, int y, int tileNr, boolean isStanding, GameView activity){\r\n        tilesize =GameView.instance.cameraSize/12;\r\n        this.tileNr=tileNr;\r\n        this.activity = activity;\r\n        this.isStanding = true;\r\n\r\n        this.health = maxHealth;\r\n\r\n        this.x = x;\r\n        this.y = (int)GameView.instance.groundLevel-3;\r\n\r\n        width = tilesize*tileNr;\r\n        height = width;\r\n\r\n\r\n\r\n        collider = new Rect(x,y-height,x+width,height);\r\n        damagePeriod = new ActionController(0,0,2000);\r\n\r\n    }\r\n\r\n    public void draw(Canvas c){\r\n        Paint p = new Paint();\r\n        //p.setColorFilter(new LightingColorFilter(Color.rgb(health/maxHealth*255, health/maxHealth*255, health/maxHealth*255),0));\r\n        c.drawBitmap(buildingImage,x+GameView.instance.cameraDisp.x,y-buildingImage.getHeight(),p);\r\n    }\r\n\r\n    public int getTileNr(){\r\n        return 1;\r\n    }\r\n\r\n    public void physics(float deltaTime){\r\n\r\n        if (GameView.instance.player.fireBreath.collision(new Vector2(x,y), width)){\r\n            OnDamage();\r\n        }\r\n        if (GameView.instance.player.fireBreath.collision(collider)){\r\n            OnDamage();\r\n        }\r\n    }\r\n\r\n    public void update(float deltaTime){\r\n        damagePeriod.update(deltaTime);\r\n    }\r\n\r\n    public  void OnDamage () {\r\n        if(isStanding){\r\n            damagePeriod.triggerAction();\r\n\r\n            if(damagePeriod.charging){\r\n                health-=1;\r\n                health = Math.max(health,0);\r\n                Log.i(\"gmg\",\"dmg\");\r\n                System.out.println(health);\r\n                damagePeriod.cooling=true;\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java	(revision 887848a094561a9fb6044ae14b6e516c42104318)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Foundation.java	(date 1603056277798)
@@ -41,7 +41,7 @@
 
 
     public Foundation(int x, int y, int tileNr, boolean isStanding, GameView activity){
-        tilesize =GameView.instance.cameraSize/12;
+        tilesize =GameView.instance.cameraSize/9;
         this.tileNr=tileNr;
         this.activity = activity;
         this.isStanding = true;
@@ -51,7 +51,7 @@
         this.x = x;
         this.y = (int)GameView.instance.groundLevel-3;
 
-        width = tilesize*tileNr;
+        width = (tilesize-(tilesize/10))*tileNr;
         height = width;
 
 
