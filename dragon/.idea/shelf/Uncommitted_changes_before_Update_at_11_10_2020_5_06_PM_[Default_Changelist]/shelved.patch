Index: app/src/main/res/layout/game_over.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@android:color/transparent\"\r\n    android:orientation=\"vertical\">\r\n\r\n\r\n    <TextView\r\n        android:id=\"@+id/gameOverText\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\"\r\n        android:background=\"@android:color/transparent\"\r\n        android:fontFamily=\"sans-serif-condensed-medium\"\r\n        android:padding=\"?attr/dialogPreferredPadding\"\r\n        android:shadowDy=\"10\"\r\n        android:shadowRadius=\"10\"\r\n        android:text=\"Game Over\"\r\n        android:textAlignment=\"center\"\r\n        android:textColor=\"@color/colorPrimaryDark\"\r\n        android:textSize=\"36sp\"\r\n        android:textStyle=\"bold\"\r\n        tools:layout_editor_absoluteX=\"0dp\"\r\n        tools:layout_editor_absoluteY=\"-97dp\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/newHighScore\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\"\r\n        android:background=\"@android:color/transparent\"\r\n        android:elevation=\"2dp\"\r\n        android:fontFamily=\"sans-serif-condensed-medium\"\r\n        android:gravity=\"center\"\r\n        android:paddingTop=\"30dp\"\r\n        android:paddingBottom=\"50dp\"\r\n        android:shadowColor=\"@color/colorPrimary\"\r\n        android:shadowDy=\"10\"\r\n        android:shadowRadius=\"10\"\r\n        android:textAlignment=\"center\"\r\n        android:textColor=\"@color/colorPrimaryDark\"\r\n        android:textSize=\"30sp\"\r\n        android:textStyle=\"bold\"\r\n        tools:layout_editor_absoluteX=\"0dp\"\r\n        tools:layout_editor_absoluteY=\"70dp\" />\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <Space\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"1\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/tryAgain\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"1\"\r\n            android:background=\"@drawable/roundedbuttonshape\"\r\n            android:fontFamily=\"sans-serif-condensed-medium\"\r\n            android:gravity=\"center\"\r\n            android:shadowDy=\"10\"\r\n            android:shadowRadius=\"10\"\r\n            android:text=\"Try Again\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textSize=\"18sp\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <Space\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"1\" />\r\n    </LinearLayout>\r\n\r\n    <Space\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\" />\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/game_over.xml	(revision 22a08d49ccee6ebfdcbe358ac28f478e8c7d64fd)
+++ app/src/main/res/layout/game_over.xml	(date 1604980812691)
@@ -1,88 +1,95 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:background="@android:color/transparent"
-    android:orientation="vertical">
+    android:layout_gravity="center"
+    android:orientation="vertical"
+    app:cardCornerRadius="20dp">
+
+    <androidx.cardview.widget.CardView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:layout_margin="20dp"
+        android:layout_marginEnd="1dp"
+        app:cardCornerRadius="20dp"
+        app:cardElevation="7dp">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:gravity="center"
+            android:orientation="vertical">
 
-
-    <TextView
-        android:id="@+id/gameOverText"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_weight="1"
-        android:background="@android:color/transparent"
-        android:fontFamily="sans-serif-condensed-medium"
-        android:padding="?attr/dialogPreferredPadding"
-        android:shadowDy="10"
-        android:shadowRadius="10"
-        android:text="Game Over"
-        android:textAlignment="center"
-        android:textColor="@color/colorPrimaryDark"
-        android:textSize="36sp"
-        android:textStyle="bold"
-        tools:layout_editor_absoluteX="0dp"
-        tools:layout_editor_absoluteY="-97dp" />
+            <TextView
+                android:id="@+id/gameOverText"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                android:background="@android:color/transparent"
+                android:fontFamily="sans-serif-condensed-medium"
+                android:padding="?attr/dialogPreferredPadding"
+                android:shadowDy="10"
+                android:shadowRadius="10"
+                android:text="Game Over"
+                android:textAlignment="center"
+                android:textColor="@color/colorPrimaryDark"
+                android:textSize="36sp"
+                android:textStyle="bold"
+                tools:layout_editor_absoluteX="0dp"
+                tools:layout_editor_absoluteY="-97dp" />
 
-    <TextView
-        android:id="@+id/newHighScore"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_weight="1"
-        android:background="@android:color/transparent"
-        android:elevation="2dp"
-        android:fontFamily="sans-serif-condensed-medium"
-        android:gravity="center"
-        android:paddingTop="30dp"
-        android:paddingBottom="50dp"
-        android:shadowColor="@color/colorPrimary"
-        android:shadowDy="10"
-        android:shadowRadius="10"
-        android:textAlignment="center"
-        android:textColor="@color/colorPrimaryDark"
-        android:textSize="30sp"
-        android:textStyle="bold"
-        tools:layout_editor_absoluteX="0dp"
-        tools:layout_editor_absoluteY="70dp" />
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                android:background="@android:color/transparent"
+                android:fontFamily="sans-serif-condensed-medium"
+                android:padding="?attr/dialogPreferredPadding"
+                android:shadowDy="10"
+                android:shadowRadius="10"
+                android:textAlignment="center"
+                android:textColor="@color/colorPrimaryDark"
+                android:textSize="36sp"
+                android:textStyle="bold"
+                tools:layout_editor_absoluteX="0dp"
+                tools:layout_editor_absoluteY="-97dp" />
 
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_weight="1"
-        android:orientation="horizontal">
-
-        <Space
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_weight="1" />
+            <androidx.constraintlayout.widget.ConstraintLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_gravity="center"
+                android:layout_weight="1"
+                android:foregroundGravity="center">
 
-        <Button
-            android:id="@+id/tryAgain"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:layout_weight="1"
-            android:background="@drawable/roundedbuttonshape"
-            android:fontFamily="sans-serif-condensed-medium"
-            android:gravity="center"
-            android:shadowDy="10"
-            android:shadowRadius="10"
-            android:text="Try Again"
-            android:textColor="@android:color/white"
-            android:textSize="18sp"
-            android:textStyle="bold" />
+                <Button
+                    android:id="@+id/tryAgain"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:layout_margin="20dp"
+                    android:layout_weight="1"
+                    android:background="@drawable/roundedbuttonshape"
+                    android:elevation="7dp"
+                    android:fontFamily="sans-serif-condensed-medium"
+                    android:gravity="center"
+                    android:paddingLeft="20dp"
+                    android:paddingRight="20dp"
+                    android:shadowDy="10"
+                    android:shadowRadius="10"
+                    android:text="Try Again"
+                    android:textColor="@android:color/white"
+                    android:textSize="18sp"
+                    android:textStyle="bold"
+                    app:layout_constraintBottom_toBottomOf="parent"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toTopOf="parent" />
+            </androidx.constraintlayout.widget.ConstraintLayout>
 
-        <Space
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_weight="1" />
-    </LinearLayout>
-
-    <Space
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_weight="1" />
-
-</LinearLayout>
\ No newline at end of file
+        </LinearLayout>
+    </androidx.cardview.widget.CardView>
+</FrameLayout>
\ No newline at end of file
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.net.MacAddress;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class NPC_Pool {\r\n    int size = 20;\r\n\r\n    ArrayList<Wooloo> npcWooloo = new ArrayList<Wooloo>();\r\n    ArrayList<DragonLayers>  npcDragonLayers = new ArrayList<DragonLayers>();\r\n    ArrayList<Wizard>  npcWizard = new ArrayList<Wizard>();\r\n    ArrayList<Farmers>  npcFarmers = new ArrayList<Farmers>();\r\n    ArrayList<Thief>  npcThiefs = new ArrayList<Thief>();\r\n    ArrayList<Tribute>  tributes = new ArrayList<Tribute>();\r\n    public NPC_Pool(){\r\n\r\n\r\n\r\n\r\n        for(int i = 0 ;i < size; i++){\r\n            npcWooloo.add(new Wooloo((float)GameView.instance.cameraSize/45000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500));\r\n            npcDragonLayers.add(new DragonLayers((float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/10,10));\r\n            npcWizard.add(new Wizard((float)GameView.instance.cameraSize/45000,250,GameView.instance.cameraSize/30,GameView.instance.cameraSize/30,25));\r\n            npcThiefs.add(new Thief((float)GameView.instance.cameraSize/25000,250,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,30));\r\n            npcFarmers.add(new Farmers( (float) GameView.instance.cameraSize / 35000, 200, GameView.instance.cameraSize / 20, GameView.instance.cameraSize / 20, 0));\r\n\r\n        }\r\n        for(int i = 0; i < 3; i++) {\r\n            tributes.add(new Tribute((float) GameView.instance.cameraSize / 35000, 200, GameView.instance.cameraSize / 20, GameView.instance.cameraSize / 12));\r\n        }\r\n    }\r\n    public Tribute spawnTribute(int spawnX, int spawnY, int tributeSize){\r\n        for (int i = 0;i<tributes.size();i++){\r\n            if (!tributes.get(i).active) {\r\n                tributes.get(i).spawn(spawnX,spawnY, tributeSize);\r\n                return tributes.get(i);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Wooloo spawnWooloo (int spawnX, int spawnY){\r\n        for (int i = 0;i<size;i++){\r\n            if (!npcWooloo.get(i).alive) {\r\n                npcWooloo.get(i).spawn((int) (spawnX+GameView.instance.fortress.tilesize*1.5),spawnY);\r\n                return npcWooloo.get(i);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void spawnDragonLayers (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcDragonLayers.get(i).alive && d < ammount) {\r\n                npcDragonLayers.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void spawnWizard (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcWizard.get(i).alive && d < ammount) {\r\n                npcWizard.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }public Farmers spawnFarmers (int spawnX, int spawnY){\r\n        for (int i = 0;i<size;i++){\r\n            if (!npcFarmers.get(i).alive) {\r\n            npcFarmers.get(i).spawn(spawnX,spawnY);\r\n            return npcFarmers.get(i);}\r\n        }\r\n        return null;\r\n    }public void spawnThiefs (int spawnX, int spawnY, int ammount){\r\n        int d = 0;\r\n        for (int i = 0;i<ammount;i++){\r\n            if (!npcThiefs.get(i).alive && d < ammount) {\r\n                npcThiefs.get(i).spawn(spawnX,spawnY);\r\n                d++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void draw (Canvas canvas){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).active){\r\n                npcWooloo.get(i).draw(canvas);\r\n            }if (npcWizard.get(i).active){\r\n                npcWizard.get(i).draw(canvas);\r\n            }if (npcFarmers.get(i).active){\r\n                npcFarmers.get(i).draw(canvas);\r\n            }if (npcThiefs.get(i).active){\r\n                npcThiefs.get(i).draw(canvas);\r\n            }if (npcDragonLayers.get(i).active){\r\n                npcDragonLayers.get(i).draw(canvas);\r\n            }\r\n        }\r\n\r\n        for (int i = 0;i<tributes.size();i++){\r\n            if (tributes.get(i).active) {\r\n                tributes.get(i).draw(canvas);\r\n            }\r\n        }\r\n    }\r\n    public void update(float deltaTime){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).active){\r\n                npcWooloo.get(i).update(deltaTime);\r\n            }if (npcWizard.get(i).active){\r\n                npcWizard.get(i).update(deltaTime);\r\n            }if (npcFarmers.get(i).active){\r\n                npcFarmers.get(i).update(deltaTime);\r\n            }if (npcThiefs.get(i).active){\r\n                npcThiefs.get(i).update(deltaTime);\r\n            }if (npcDragonLayers.get(i).active){\r\n                npcDragonLayers.get(i).update(deltaTime);\r\n            }\r\n        }\r\n        for (int i = 0;i<tributes.size();i++){\r\n            if (tributes.get(i).active) {\r\n                tributes.get(i).update(deltaTime);\r\n            }\r\n        }\r\n    }\r\n    public void physics(float deltaTime){\r\n        for (int i = 0; i<size;i++){\r\n            if (npcWooloo.get(i).active){\r\n                npcWooloo.get(i).physics(deltaTime);\r\n            }if (npcWizard.get(i).active){\r\n                npcWizard.get(i).physics(deltaTime);\r\n            }if (npcFarmers.get(i).active){\r\n                npcFarmers.get(i).physics(deltaTime);\r\n            }if (npcThiefs.get(i).active){\r\n                npcThiefs.get(i).physics(deltaTime);\r\n            }if (npcDragonLayers.get(i).active){\r\n                npcDragonLayers.get(i).physics(deltaTime);\r\n            }\r\n        }\r\n        for (int i = 0;i<tributes.size();i++){\r\n            if (tributes.get(i).active) {\r\n                tributes.get(i).physics(deltaTime);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(revision 22a08d49ccee6ebfdcbe358ac28f478e8c7d64fd)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC_Pool.java	(date 1604976398879)
@@ -24,7 +24,7 @@
 
 
         for(int i = 0 ;i < size; i++){
-            npcWooloo.add(new Wooloo((float)GameView.instance.cameraSize/45000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500));
+            npcWooloo.add(new Wooloo((float)GameView.instance.cameraSize/35000,100,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,500));
             npcDragonLayers.add(new DragonLayers((float)GameView.instance.cameraSize/25000,500,GameView.instance.cameraSize/20,GameView.instance.cameraSize/10,10));
             npcWizard.add(new Wizard((float)GameView.instance.cameraSize/45000,250,GameView.instance.cameraSize/30,GameView.instance.cameraSize/30,25));
             npcThiefs.add(new Thief((float)GameView.instance.cameraSize/25000,250,GameView.instance.cameraSize/20,GameView.instance.cameraSize/20,30));
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.media.MediaPlayer;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Display;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game Controller\r\n//Initialized game, handles user input, UI, sounds\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class Game extends AppCompatActivity {\r\n    //UI\r\n    Vector2 fireButton;\r\n\r\n    Button sleepButton;\r\n    Button wakeButton;\r\n    Button upgradeButton;\r\n    ProgressBar xpBarLair;\r\n    TextView xpTextLair;\r\n    TextView goldDeposited;\r\n\r\n    Button stopButton;\r\n    Button pauseContinue;\r\n    Button pauseRestart;\r\n    Button pauseCredits;\r\n    Button pauseExit;\r\n\r\n    Button backButton;\r\n    Button upgradeAttackButton;\r\n    Button upgradeHealthButton;\r\n    Button upgradeManaButton;\r\n    Button upgradeSpeedButton;\r\n\r\n    TextView xpText;\r\n    ProgressBar xpBar;\r\n    ProgressBar progressHealth;\r\n    ProgressBar progressAttack;\r\n    ProgressBar progressMana;\r\n    ProgressBar progressSpeed;\r\n    TextView upgradePoints;\r\n    TextView level;\r\n\r\n    boolean visibleCredits;\r\n    CardView creditCard;\r\n\r\n    //state variables\r\n    boolean showGameOver = false, gameOver = false, showSleepButton = false, showUpgradeButton = false, showWakeButton = false;\r\n\r\n    int screenHeight, screenWidth;\r\n    public int score = 0, highScore;\r\n    float refreshRating;\r\n\r\n    //misc\r\n    MediaPlayer pointsPlayer;\r\n    SoundEffects soundEffects;\r\n    AlertDialog.Builder gameOverDialogBuilder;\r\n    AlertDialog.Builder pauseDialogBuilder;\r\n    AlertDialog.Builder upgradeDialogBuilder;\r\n    SharedPreferences.Editor highScoreEdit;\r\n\r\n    //Threads\r\n    Handler handler;\r\n    Runnable runnable;\r\n\r\n    //Game engine\r\n    GameView gameView;\r\n\r\n    //Singleton\r\n    public static Game instance;\r\n\r\n    //Player control\r\n    boolean dragging = false;\r\n    boolean breathFire = false;\r\n    Vector2 dragTo, dragFrom;\r\n    int controlRadius = 30;\r\n\r\n\r\n    public Context context;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_game);\r\n        //Screen refresh rate detection\r\n        Display display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();\r\n        refreshRating = display.getRefreshRate();\r\n\r\n        //Singleton\r\n\r\n        instance = this;\r\n        context = this;\r\n\r\n        //Get screen dimensions\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        //Hide navigation\r\n        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);\r\n\r\n\r\n\r\n\r\n\r\n        //initialize\r\n        initUI();\r\n        initSound(this);\r\n\r\n        handler = new Handler();\r\n\r\n\r\n        //start game loop\r\n        gameView = new GameView(this);\r\n        ConstraintLayout gameLayout = findViewById(R.id.game);\r\n        gameLayout.addView(gameView);\r\n        updateUI();\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onWindowFocusChanged(boolean hasFocus) {\r\n        super.onWindowFocusChanged(hasFocus);\r\n\r\n        if (hasFocus) {\r\n            getWindow().getDecorView().setSystemUiVisibility(\r\n                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                            | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Initialization Methods\r\n\r\n    void initUI(){\r\n\r\n        controlRadius = screenWidth/20;\r\n        fireButton = new Vector2(screenWidth*0.95f,screenHeight*0.85f);\r\n\r\n        //Load high score\r\n        SharedPreferences pref = getSharedPreferences(\"HighScore\", Context.MODE_PRIVATE);\r\n        highScoreEdit = pref.edit();\r\n\r\n        gameOverDialogBuilder = new AlertDialog.Builder(this);\r\n\r\n        pauseDialogBuilder = new AlertDialog.Builder(this,android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);\r\n        final ViewGroup pauseMenu = (ViewGroup) getLayoutInflater().inflate(R.layout.activity_pause_menu,null,false);\r\n        pauseDialogBuilder.setView(pauseMenu);\r\n        final AlertDialog dialog = pauseDialogBuilder.create();\r\n\r\n\r\n\r\n        stopButton = findViewById(R.id.buttonOfStop);\r\n        pauseContinue = pauseMenu.findViewById(R.id.pauseContinue);\r\n        pauseRestart = pauseMenu.findViewById(R.id.pauseRestart);\r\n        pauseCredits = pauseMenu.findViewById(R.id.pauseCredits);\r\n        pauseExit = pauseMenu.findViewById(R.id.pauseExit);\r\n        creditCard = pauseMenu.findViewById(R.id.creditsCard);\r\n        visibleCredits = false;\r\n        stopButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                GameView.instance.pause();\r\n                dialog.show();\r\n            }\r\n        });\r\n        pauseContinue.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                GameView.instance.resume();\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        pauseCredits.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (!visibleCredits){\r\n                    creditCard.setVisibility(View.VISIBLE);\r\n                    visibleCredits = true;\r\n                } else {\r\n                    creditCard.setVisibility(View.INVISIBLE);\r\n                    visibleCredits = false;\r\n                }\r\n            }\r\n        });\r\n        pauseRestart.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                GameView.instance.init();\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        pauseExit.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n        upgradeDialogBuilder = new AlertDialog.Builder(this,android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);\r\n        final ViewGroup upgradeMenu = (ViewGroup) getLayoutInflater().inflate(R.layout.activity_upgrade,null,false);\r\n        upgradeDialogBuilder.setView(upgradeMenu);\r\n        final AlertDialog upgradeDialog = upgradeDialogBuilder.create();\r\n\r\n        upgradeAttackButton = upgradeMenu.findViewById(R.id.upgradeAttack);\r\n        upgradeSpeedButton = upgradeMenu.findViewById(R.id.upgradeSpeed);\r\n        upgradeManaButton = upgradeMenu.findViewById(R.id.upgradeMana);\r\n        upgradeHealthButton = upgradeMenu.findViewById(R.id.upgradeHealth);\r\n\r\n        level = upgradeMenu.findViewById(R.id.level);\r\n        upgradePoints = upgradeMenu.findViewById(R.id.upgradePoints);\r\n        xpText = upgradeMenu.findViewById(R.id.xpTextAmount);\r\n        xpBar = upgradeMenu.findViewById(R.id.xpBar);\r\n        progressHealth = upgradeMenu.findViewById(R.id.progressHealth);\r\n        progressAttack = upgradeMenu.findViewById(R.id.progressAttack);\r\n        progressMana = upgradeMenu.findViewById(R.id.progressMana);\r\n        progressSpeed = upgradeMenu.findViewById(R.id.progressSpeed);\r\n\r\n\r\n        upgradeAttackButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(GameView.instance.lair.upgradeAttack()){\r\n                    //play upgrade sound, show graphic\r\n                    updateUpgradeMenu();\r\n                }\r\n            }\r\n        });\r\n        upgradeSpeedButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(GameView.instance.lair.upgradeSpeed()){\r\n                    updateUpgradeMenu();\r\n                }\r\n            }\r\n        });\r\n        upgradeManaButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(GameView.instance.lair.upgradeMana()){\r\n                    updateUpgradeMenu();\r\n                }\r\n            }\r\n        });\r\n        upgradeHealthButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(GameView.instance.lair.upgradeHealth()){\r\n                    updateUpgradeMenu();\r\n                }\r\n            }\r\n        });\r\n        backButton = upgradeMenu.findViewById(R.id.backButton);\r\n        backButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                upgradeDialog.dismiss();\r\n                GameView.instance.resume();\r\n            }\r\n        });\r\n\r\n\r\n        sleepButton = findViewById(R.id.sleepButton);\r\n        wakeButton = findViewById(R.id.wakeButton);\r\n        upgradeButton = findViewById(R.id.upgradeButton);\r\n        upgradeButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                GameView.instance.pause();\r\n                updateUpgradeMenu();\r\n                upgradeDialog.show();\r\n            }\r\n        });\r\n        xpBarLair= findViewById(R.id.xpBarLair);\r\n        xpTextLair = findViewById(R.id.xpTextLair);\r\n        goldDeposited = findViewById(R.id.goldDeposited);\r\n\r\n\r\n    }\r\n\r\n    public void updateUpgradeMenu(){\r\n        Lair lair = GameView.instance.lair;\r\n        Dragon player = GameView.instance.player;\r\n        level.setText(\"LV \"+ (int)lair.level);\r\n        upgradePoints.setText((int)lair.upgradePoints + \"AP\");\r\n        xpBar.setProgress((int)(lair.experience/(1000f*lair.level)*100));\r\n        xpText.setText((int)lair.experience + \" XP\");\r\n        progressAttack.setProgress((int)((player.attack-lair.minimumAttack)/(lair.maximumAttack-lair.minimumAttack)*100));\r\n        progressMana.setProgress((int)((player.maxMana-lair.minimumMana)/(lair.maximumMana-lair.minimumMana)*100));\r\n        progressHealth.setProgress((int)((player.maxHealth-lair.minimumHealth)/(lair.maximumHealth-lair.minimumHealth)*100));\r\n        progressSpeed.setProgress((int)((player.maxMoveSpeed-lair.minimumSpeed)/(lair.maximumSpeed-lair.minimumSpeed)*100));\r\n    }\r\n\r\n\r\n    void initSound(Context context){\r\n        soundEffects = new SoundEffects(context);\r\n    }\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Game loop and game state methods\r\n\r\n    public void updateUI(){\r\n        runnable = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                updateUI();\r\n            }\r\n        };\r\n        //30 frames per second\r\n        handler.postDelayed(runnable, 1000/15);\r\n\r\n        if(!gameOver) {\r\n            //gameView.setPlayerMovement(dragTo);\r\n            if(dragFrom !=null && dragTo!=null) {\r\n                gameView.movePlayerBy(dragTo.sub(dragFrom).multiply(1f / controlRadius/2));\r\n            }\r\n            else {\r\n                gameView.movePlayerBy(null);\r\n            }\r\n            gameView.breathFire(breathFire);\r\n\r\n            fadeView(showSleepButton, sleepButton);\r\n            fadeView(showWakeButton, wakeButton);\r\n            fadeView(showUpgradeButton, upgradeButton);\r\n            fadeView(showWakeButton, xpBarLair);\r\n            fadeView(showSleepButton||showWakeButton,goldDeposited);\r\n            fadeView(showWakeButton,  xpTextLair);\r\n\r\n\r\n            Lair lair = GameView.instance.lair;\r\n            if(showSleepButton || showWakeButton) {\r\n                //goldDeposited.setText(\"LV \" + (int)lair .level + \"    \" + lair.depositedGold + \" G\");\r\n                xpBarLair.setProgress((int) (lair.experience / (1000f * lair.level) * 100));\r\n                xpTextLair.setText((int) lair.experience + \" XP\");\r\n            }\r\n        }\r\n\r\n        //Show game over pop up if told by game engine\r\n        if(showGameOver) {\r\n            gameOver();\r\n        }\r\n    }\r\n\r\n    void fadeView(boolean condition, View v){\r\n        if(condition){\r\n            v.setVisibility(View.VISIBLE);\r\n            if(v.getAlpha() <1) {\r\n                v.setAlpha(v.getAlpha() + 0.1f);\r\n            }\r\n            else{\r\n                v.setAlpha(1);\r\n            }\r\n        }\r\n        else {\r\n            if(v.getAlpha() >0) {\r\n                v.setAlpha(v.getAlpha() - 0.1f);\r\n            }\r\n            else{\r\n                v.setVisibility(View.INVISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    //On game over show dialog box with results and give the player the options of quiting to main menu or trying again\r\n    void gameOver(){\r\n        //Apply only once\r\n        showGameOver = false;\r\n        gameOver = true;\r\n        gameView.pause();\r\n\r\n        //Custom alert dialog\r\n        ViewGroup showGameOver = (ViewGroup) getLayoutInflater().inflate(R.layout.game_over,null,false);\r\n\r\n        gameOverDialogBuilder.setView(showGameOver);\r\n        final AlertDialog dialog = gameOverDialogBuilder.create();\r\n\r\n\r\n        //Dialog box positive button, start new game\r\n        showGameOver.findViewById(R.id.tryAgain).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //reset states and restart game loop\r\n                score = 0;\r\n                gameView.init();\r\n\r\n                //Close dialog box\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        dialog.setCanceledOnTouchOutside(false);\r\n        dialog.show();\r\n\r\n\r\n    }\r\n\r\n    //*********************************************************************************************************************************************************//\r\n    // Accessor / Mutator methods\r\n\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n\r\n\r\n        for (int i = 0; i < event.getPointerCount(); i++){\r\n\r\n            Vector2 p = new Vector2(event.getX(i), event.getY(i));\r\n\r\n            int action = event.getAction();\r\n\r\n            if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_POINTER_DOWN ) {\r\n                //System.out.println(\"dow\");\r\n                if(Vector2.distance(fireButton, p)> controlRadius) {\r\n                    if(!dragging) {\r\n                        dragFrom = p;\r\n                        dragging = true;\r\n                    }\r\n\r\n\r\n                }\r\n                else {\r\n                    breathFire = true;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            if (action == MotionEvent.ACTION_MOVE ) {\r\n                //System.out.println(\"move\");\r\n                if (Vector2.distance(fireButton, p)> controlRadius) {\r\n                    dragging = true;\r\n                    Vector2 disp = p.sub(dragFrom);\r\n\r\n                    if (disp.getLength() > controlRadius * 2) {\r\n\r\n                        p = disp.getNormal().multiply(Math.min(disp.getLength(), controlRadius * 2)).add(dragFrom);\r\n                    }\r\n                    dragTo = p;\r\n\r\n                }\r\n                else {\r\n                    breathFire = true;\r\n                }\r\n            }\r\n\r\n            if (action== MotionEvent.ACTION_UP || action == MotionEvent.ACTION_OUTSIDE|| action == MotionEvent.ACTION_POINTER_UP|| action == MotionEvent.ACTION_POINTER_2_UP|| action == MotionEvent.ACTION_POINTER_3_UP) {\r\n                //System.out.println(\"up\");\r\n                if(Vector2.distance(fireButton, p)> controlRadius) {\r\n                    dragging = false;\r\n                    dragTo = null;\r\n                }\r\n                else {\r\n                    breathFire = false;\r\n                }\r\n                if(!dragging){\r\n                    breathFire = false;\r\n                }\r\n                if(!breathFire){\r\n                    dragging = false;\r\n                }\r\n\r\n            }\r\n\r\n\r\n            System.out.println();\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        return super.onTouchEvent(event);\r\n\r\n    }\r\n\r\n    public void onSleep(View view){\r\n        GameView.instance.lair.sleep();\r\n    }\r\n\r\n    public void onWake(View view){\r\n        GameView.instance.lair.wake();\r\n        //System.out.println(\"wake\");\r\n    }\r\n\r\n\r\n\r\n    public void onGrow(View view){\r\n        gameView.pause();\r\n        int size = gameView.player.size+3;\r\n        if(size <70)\r\n            gameView.player.initBody(size);\r\n        gameView.resume();\r\n    }\r\n\r\n    public void onShrink(View view){\r\n        gameView.pause();\r\n        int size = gameView.player.size-5;\r\n        if(size > 35)\r\n            gameView.player.initBody(size);\r\n        gameView.resume();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Game.java	(revision 22a08d49ccee6ebfdcbe358ac28f478e8c7d64fd)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Game.java	(date 1604978426267)
@@ -166,7 +166,7 @@
         SharedPreferences pref = getSharedPreferences("HighScore", Context.MODE_PRIVATE);
         highScoreEdit = pref.edit();
 
-        gameOverDialogBuilder = new AlertDialog.Builder(this);
+        gameOverDialogBuilder = new AlertDialog.Builder(this,android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);
 
         pauseDialogBuilder = new AlertDialog.Builder(this,android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);
         final ViewGroup pauseMenu = (ViewGroup) getLayoutInflater().inflate(R.layout.activity_pause_menu,null,false);
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+> package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\n\r\n public class Farmers extends NPC {\r\n\r\n    public int farmX;\r\n    public int workTime = 0;\r\n    public boolean wasAttacked = false;\r\n    public boolean atFarm = false;\r\n    public boolean whereFarm = false;\r\n    public boolean work = false;\r\n    Bitmap idleSprite, workingSprite;\r\n\r\n    public Farmers( float speed, int maxHP, int width, int height,int FX) {\r\n        super(speed, maxHP, width, height);\r\n        farmX = (int)npcX ;\r\n\r\n        Bitmap npcSheet = SpriteManager.instance.NPCSheet;\r\n        Rect r = SpriteManager.instance.getNPCSprite(\"Farmer1\");\r\n        idleSprite =Bitmap.createBitmap(npcSheet,r.left,r.top,r.width(),r.height());\r\n\r\n        r = SpriteManager.instance.getNPCSprite(\"Farmer2\");\r\n        workingSprite =Bitmap.createBitmap(npcSheet,r.left,r.top,r.width(),r.height());\r\n\r\n        npcBitmap = idleSprite;\r\n    }\r\n\r\n    @Override\r\n    public void spawn(int spawnX, int spawnY) {\r\n        super.spawn(spawnX, spawnY);\r\n        work = false;\r\n    }\r\n\r\n    public void doStuff() {\r\n        if (countdown >= Math.random()*5000+8000){\r\n                flee = false;\r\n                double targetDistance = (Math.random()-0.5f) * Farm.tileNr*GameView.instance.cameraSize/9;\r\n                target.x = (int) (farmX+ targetDistance);\r\n                countdown = 0;\r\n        }\r\n\r\n    }\r\n\r\n    public Boolean atHome = false;\r\n    @Override\r\n    public void update(float deltaTime) {\r\n        if(((Scene.instance.timeOfDay)/(Scene.instance.dayLength) > 0) && ((Scene.instance.timeOfDay)/(Scene.instance.dayLength) < 0.5) && alive) {\r\n            if (!wasAttacked) {\r\n                if (Math.abs(GameView.instance.player.position.x - npcX) < 300 && Math.abs(GameView.instance.player.position.y - npcY)< GameView.instance.screenHeight/2) {\r\n                    flee = true;\r\n                    work = false;\r\n                    target.x = (int) (npcX + (-(Math.signum(GameView.instance.player.position.x - npcX)) * 1500));\r\n                    tempCreationPoint.x = target.x;\r\n                    wasAttacked = true;\r\n                }\r\n                if(whereFarm){\r\n                    if(!atFarm) {\r\n                        target.x = farmX;\r\n                        work = false;\r\n                    }\r\n                    else {\r\n                        work = true;\r\n                        doStuff();\r\n                    }\r\n                    if(Math.abs(target.x - npcX) < 7){\r\n                        atFarm = true;\r\n                    }\r\n                }\r\n            } else {\r\n                if (Math.abs(GameView.instance.player.position.x - npcX) < 300) {\r\n                    flee = true;\r\n                    work = false;\r\n                    target.x = (int) (npcX + (-(Math.signum(GameView.instance.player.position.x - npcX)) * 1500));\r\n                    tempCreationPoint.x = target.x;\r\n                } else {\r\n                    idle(500, true);//Math.abs(npcX - target.x) < 10);\r\n                }\r\n            }\r\n            if (atHome){\r\n                npcY = CreationPoint.y;\r\n                atHome = false;\r\n                flee = false;\r\n            }\r\n            if (!whereFarm) {\r\n                Point closestFarm = new Point();\r\n                closestFarm.y = 100000;\r\n                for (int j = 0; j < GameView.instance.fortress.currentBuildingsRight.size(); j++) {\r\n                    if (GameView.instance.fortress.currentBuildingsRight.get(j).buildingType == 3) {\r\n                        if (Math.abs(npcX - GameView.instance.fortress.currentBuildingsRight.get(j).x) < closestFarm.y) {\r\n                            farmX = (int) (GameView.instance.fortress.currentBuildingsRight.get(j).x+GameView.instance.fortress.tilesize*1.5);\r\n                            closestFarm.y = Math.abs((int)npcX - GameView.instance.fortress.currentBuildingsRight.get(j).x);\r\n                        }\r\n                    }\r\n                }\r\n                for (int j = 0; j < GameView.instance.fortress.currentBuildingsLeft.size(); j++) {\r\n                    if (GameView.instance.fortress.currentBuildingsLeft.size() > j) {\r\n                        if (GameView.instance.fortress.currentBuildingsLeft.get(j).buildingType == 3) {\r\n                            if (Math.abs(npcX - GameView.instance.fortress.currentBuildingsLeft.get(j).x) < closestFarm.y) {\r\n                                farmX = (int) (GameView.instance.fortress.currentBuildingsLeft.get(j).x+GameView.instance.fortress.tilesize*1.5);\r\n                                closestFarm.y = Math.abs((int)npcX - GameView.instance.fortress.currentBuildingsLeft.get(j).x);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (farmX != npcX) {\r\n                    whereFarm = true;\r\n                }\r\n            }\r\n\r\n            super.update(deltaTime);\r\n        }else{\r\n            if (alive){\r\n                if (Math.abs(npcX-CreationPoint.x) < 7 && !atHome){\r\n//                    System.out.println(\"CP = \" + CreationPoint.x + \" Target = \" + target.x + \" TempCP = \" + tempCreationPoint.x);\r\n                    atHome = true;\r\n                    tempCreationPoint.x = CreationPoint.x;\r\n                    tempCreationPoint.y = CreationPoint.y;\r\n                }\r\n                if (!atHome){\r\n                    target.x = CreationPoint.x;\r\n                    super.update(deltaTime);\r\n                }else {\r\n                    wasAttacked = false;\r\n                    npcY += npcRect.height()*7;\r\n                    npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),(int)npcY);\r\n            }\r\n            }else {\r\n                if(wasAttacked = true){\r\n                    int r = (int)(Math.random()*3);\r\n                    GoldPool.instance.spawnGold((int)npcX, (int)npcY,r);}\r\n                wasAttacked = false;\r\n                super.update(deltaTime);\r\n            }\r\n        }\r\n        if ((Scene.instance.timeOfDay)/(Scene.instance.dayLength)>0.5) {\r\n            target.x = tempCreationPoint.x;\r\n            atFarm = false;\r\n            workTime = 0;\r\n            work = false;\r\n            flee = true;\r\n            npcBitmap = idleSprite;\r\n        }\r\n        if (work) {\r\n            workTime += deltaTime;\r\n            npcBitmap = workingSprite;\r\n        }\r\n        else{\r\n            npcBitmap = idleSprite;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(revision 22a08d49ccee6ebfdcbe358ac28f478e8c7d64fd)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Farmers.java	(date 1604976398869)
@@ -49,7 +49,7 @@
     public void update(float deltaTime) {
         if(((Scene.instance.timeOfDay)/(Scene.instance.dayLength) > 0) && ((Scene.instance.timeOfDay)/(Scene.instance.dayLength) < 0.5) && alive) {
             if (!wasAttacked) {
-                if (Math.abs(GameView.instance.player.position.x - npcX) < 300 && Math.abs(GameView.instance.player.position.y - npcY)< GameView.instance.screenHeight/2) {
+                if (Math.abs(GameView.instance.player.position.x - npcX) < 300 && Math.abs(GameView.instance.player.position.y - npcY)< GameView.instance.screenHeight/3) {
                     flee = true;
                     work = false;
                     target.x = (int) (npcX + (-(Math.signum(GameView.instance.player.position.x - npcX)) * 1500));
@@ -70,7 +70,7 @@
                     }
                 }
             } else {
-                if (Math.abs(GameView.instance.player.position.x - npcX) < 300) {
+                if (Math.abs(GameView.instance.player.position.x - npcX) < 300 && GameView.instance.player.position.y > GameView.instance.screenHeight / 3) {
                     flee = true;
                     work = false;
                     target.x = (int) (npcX + (-(Math.signum(GameView.instance.player.position.x - npcX)) * 1500));
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.ColorFilter;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.graphics.RectF;\r\n\r\npublic class NPC {\r\n    public Bitmap npcBitmap;\r\n    public float npcX,npcY,npcMaxHP,npcHp,npcWidth,npcHeight;\r\n    public Rect npcRect, npcCollider;\r\n    public float npcSpeed;\r\n    public Boolean alive = false;\r\n    public Boolean active = false;\r\n    public Point movement;\r\n    public Point target = new Point();\r\n    public float npcFleeSpeed;\r\n    public boolean flee = false;\r\n    public ActionController damagePeriod;\r\n    public int direction;\r\n    public int countdown;\r\n    public int afterLife;\r\n    double random;\r\n    public Point tempCreationPoint = new Point();\r\n    public Point CreationPoint = new Point();\r\n    public Paint NpcPain = new Paint();\r\n    ColorFilter colorFilter = new LightingColorFilter(Color.parseColor(\"#40000000\"),0);\r\n    public NPC (float speed, int maxHP, int width,int height) {\r\n        npcX = 0;\r\n        npcY = 0;\r\n        npcMaxHP = maxHP;\r\n        npcHp = maxHP;\r\n        npcSpeed = speed*(float)(Math.random()+4)/5;\r\n        npcFleeSpeed = (float) ((Math.random()*npcSpeed)+(npcSpeed*3));\r\n        npcWidth = width;\r\n        npcHeight = height;\r\n        npcRect = new Rect((int)npcX,(int)npcY,(int)(width+npcX),(int)(height+npcY));\r\n        npcCollider = new Rect((int)npcX,(int)npcY,(int)(width+npcX),(int)(height+npcY));\r\n        damagePeriod = new ActionController(0,5000,5000);\r\n        random = Math.random();\r\n    }\r\n    public void spawn (int spawnX, int spawnY){\r\n        npcHp = npcMaxHP;\r\n        npcX = spawnX;\r\n        npcY = (int) GameView.instance.groundLevel-npcRect.height();\r\n        tempCreationPoint.x = (int)npcX;\r\n        tempCreationPoint.y = (int)npcY;\r\n        CreationPoint.x = spawnX;\r\n        CreationPoint.y = spawnY;\r\n        target.x = (int)npcX;\r\n        alive = true;\r\n        active = true;\r\n        flee = false;\r\n    }\r\n    public  void OnDamage () {\r\n        if(Math.random() < 0.1 && alive) {\r\n            FirePool.instance.spawnFire(npcX + ((float)Math.random()-0.5f)*npcWidth/2, npcY+npcHeight);\r\n        }\r\n        damagePeriod.triggerAction();\r\n        npcHp-=1*GameView.instance.player.attack;\r\n        if (npcHp<=0){\r\n            death();\r\n        }\r\n    }\r\n    public void death(){\r\n        alive = false;\r\n    }\r\n    float distTravel = 0;\r\n\r\n    public void draw(Canvas canvas){\r\n        if(npcBitmap!=null) {\r\n            Matrix matrix = new Matrix();\r\n            int top = (int) (npcRect.top + Math.sin(distTravel / 4 + random * Math.PI * 2) * 3);\r\n            int left = npcRect.left;\r\n            int right = left + npcRect.width();\r\n            int bottom = top + npcRect.height();\r\n            RectF tempRect = new RectF(0, 0, npcBitmap.getWidth(), npcBitmap.getHeight());\r\n            RectF destTempRect;\r\n            destTempRect = new RectF(left, top, right, bottom);\r\n            matrix.setRectToRect(tempRect, destTempRect, Matrix.ScaleToFit.FILL);\r\n            if (alive) {\r\n                matrix.postScale(direction, 1, destTempRect.centerX(), destTempRect.centerY());\r\n                canvas.drawBitmap(npcBitmap, matrix, Scene.instance.frontPaint);\r\n            } else {\r\n                matrix.postRotate(90, destTempRect.centerX(), destTempRect.centerY());\r\n                canvas.drawBitmap(npcBitmap, matrix, NpcPain);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public  boolean there = false;\r\n    public void moveToTarget(float deltaTime){\r\n        if (Math.abs(target.x-npcX) > 5){\r\n            if (!flee){\r\n                npcX+=direction*npcSpeed*deltaTime;\r\n                distTravel+=npcSpeed*deltaTime;\r\n            } else {\r\n                npcX+=direction*npcFleeSpeed*deltaTime;\r\n                distTravel+=npcFleeSpeed*deltaTime;\r\n            }\r\n        }\r\n        else {\r\n            distTravel = 0;\r\n        }\r\n    }\r\n    public void update(float deltaTime){\r\n        if (!alive){\r\n            afterLife+=deltaTime;\r\n            if (afterLife >= 10000){\r\n                active = false;\r\n                afterLife = 0;\r\n            }else {\r\n                if (Math.abs(GameView.instance.player.position.x-npcX) < 100 && Math.abs(GameView.instance.player.position.y-npcY) < 100) {\r\n                    if (GameView.instance.player.health < GameView.instance.player.maxHealth){\r\n                        GameView.instance.player.health+=npcMaxHP/20;\r\n                        active = false;\r\n                        afterLife = 0;\r\n                        if (GameView.instance.player.health > GameView.instance.player.maxHealth){\r\n                            GameView.instance.player.health = GameView.instance.player.maxHealth;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            npcY = (int) GameView.instance.groundLevel-npcRect.height()+npcRect.height()/3;\r\n            NpcPain.setColorFilter(colorFilter);\r\n        }else {\r\n            npcY = (int) GameView.instance.groundLevel-npcRect.height();\r\n            NpcPain.setColorFilter(null);\r\n        countdown+=deltaTime;\r\n            if (Math.abs(target.x-npcX)>1){\r\n                direction = (int) Math.signum(target.x-npcX);\r\n            }\r\n            moveToTarget(deltaTime);\r\n\r\n        }\r\n        npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),(int)npcY);\r\n    }\r\n\r\n\r\n    public  void  physics(float deltaTime) {\r\n        npcCollider = new Rect((int)npcX, (int)npcY, (int)(npcX + npcRect.width()), (int)(npcY + npcRect.height()));\r\n        //System.out.println(\"npcphysics\");\r\n        try {\r\n            if (GameView.instance.player.fireBreath.collision(npcCollider) && !damagePeriod.performing) {\r\n                //System.out.println(npcHp);\r\n                OnDamage();\r\n            }\r\n        }\r\n        catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void idle(int boundry,boolean lessTen){\r\n        if (countdown >= Math.random()*5000+10000){\r\n            if (lessTen) {\r\n                flee = false;\r\n                double targetDistance = (Math.random() - 0.5) * boundry;\r\n                target.x = (int) (tempCreationPoint.x + targetDistance);\r\n                countdown = 0;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java	(revision 22a08d49ccee6ebfdcbe358ac28f478e8c7d64fd)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/NPC.java	(date 1604976399671)
@@ -133,12 +133,11 @@
         }else {
             npcY = (int) GameView.instance.groundLevel-npcRect.height();
             NpcPain.setColorFilter(null);
-        countdown+=deltaTime;
+            countdown+=deltaTime;
             if (Math.abs(target.x-npcX)>1){
                 direction = (int) Math.signum(target.x-npcX);
             }
             moveToTarget(deltaTime);
-
         }
         npcRect.offsetTo((int) (npcX+GameView.instance.cameraDisp.x),(int)npcY);
     }
@@ -159,7 +158,7 @@
     }
 
     public void idle(int boundry,boolean lessTen){
-        if (countdown >= Math.random()*5000+10000){
+        if (countdown >= Math.random()*5000){
             if (lessTen) {
                 flee = false;
                 double targetDistance = (Math.random() - 0.5) * boundry;
Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage mnm.bcs106.yoobeecolleges.dragon;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.LightingColorFilter;\r\nimport android.graphics.Paint;\r\nimport android.util.AttributeSet;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.widget.Button;\r\n\r\n//-----------------------------------------------------------------------------------------------------------\r\n//Game engine\r\n//Handles logic, physics and graphics\r\n//-----------------------------------------------------------------------------------------------------------\r\n\r\npublic class GameView extends SurfaceView implements Runnable {\r\n    public static GameView instance;\r\n    int screenWidth, screenHeight, cameraSize;\r\n    Vector2 screenCenter;\r\n\r\n\r\n    //final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds\r\n    final float fixedDeltaTime = (int) (1000 / 90); // in milliseconds\r\n    public float timeScale = 1;\r\n    float deltaTime = fixedDeltaTime;\r\n\r\n    //Physics\r\n    public float groundLevel, upperBound, gravity = 0.3f;\r\n    int physicsIterations = 5;\r\n    Vector2 cameraDisp = Vector2.zero;\r\n\r\n    //Projectile\r\n    int projectileIndex = 0;//Next projectile in array to spawn\r\n    float shootSpeedVariance=0.1f, shootDirectionVariance = 10f;//Error in shooting speed and direction\r\n\r\n    //Logic\r\n    boolean isRunning = false;\r\n    Thread gameThread, drawThread;\r\n    //WaveController waveController;//Controls when enemies spawn\r\n    int enemyIndex = 0;//Next enemy in array to spawn\r\n    Vector2 moveBy;\r\n\r\n    //Scene\r\n    Scene scene;\r\n\r\n\r\n    //Game objects\r\n    //Game objects\r\n    public Dragon player;\r\n    GameObject ground;\r\n    NPC_Pool npc_pool;\r\n    GoldPool goldPool;\r\n    ProjectilePool projectilePool;\r\n    FirePool firePool;\r\n    Lair lair;\r\n    Fortress fortress;\r\n    Hud hud;\r\n\r\n    //Drawing\r\n    SurfaceHolder holder;\r\n    Paint back = new Paint();\r\n    SpriteManager spriteManager;\r\n    boolean isDrawing = true;\r\n\r\n    public GameView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    public GameView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Initialization\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    void init(){\r\n        instance = this;\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        screenHeight = displayMetrics.heightPixels;\r\n        screenWidth = displayMetrics.widthPixels;\r\n        cameraSize = (int) (screenWidth);\r\n        screenCenter = new Vector2(screenWidth/2,screenHeight/2);\r\n        back.setColor(Color.WHITE);\r\n        holder = getHolder();\r\n\r\n        groundLevel = screenHeight*7/10;\r\n\r\n        spriteManager = new SpriteManager();\r\n        //Init scene\r\n\r\n        scene = new Scene();\r\n\r\n        //Player gameobject\r\n        Bitmap playerSprite = BitmapFactory.decodeResource(this.getResources(), R.drawable.empty);\r\n        player = new Dragon(playerSprite,0.5f,0.9f,screenHeight/20,screenHeight/20);\r\n        player.setDamagedSound(SoundEffects.DAMAGE);\r\n        player.setDestroyedSound(SoundEffects.DEATH);\r\n\r\n        lair = new Lair();\r\n\r\n\r\n        npc_pool = new NPC_Pool();\r\n\r\n        goldPool = new GoldPool();\r\n        projectilePool = new ProjectilePool();\r\n        firePool = new FirePool();\r\n\r\n\r\n\r\n        hud = new Hud();\r\n\r\n\r\n\r\n\r\n        fortress = new Fortress( screenWidth*2, (int)groundLevel, true);\r\n        //npc_pool.spawnThiefs((int)fortress.x ,(int)groundLevel,1);\r\n        //npc_pool.spawnDragonLayers((int)fortress.x ,(int)groundLevel,1);\r\n        //npc_pool.spawnWizard((int)fortress.x ,(int)groundLevel,1);\r\n        //npc_pool.spawnTribute((int)fortress.x ,(int)groundLevel,500);\r\n        Game.instance.gameOver = false;\r\n\r\n        resume();\r\n\r\n    }\r\n\r\n    Vector2 randomPosition(){\r\n        Vector2 random = Vector2.getRandom();\r\n        random.x *= ground.width*0.3f;\r\n        random.y *= ground.height*0.3f;\r\n        return ground.position.add(random);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game loop\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    float totalFrame, numberFrame;\r\n    public void resume() {\r\n        isRunning = true;\r\n        gameThread = new Thread(this);\r\n        gameThread.start();\r\n    }\r\n\r\n    public void pause() {\r\n        isRunning = false;\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                gameThread.join();//execute completely and then stop\r\n                retry = false;\r\n            } catch (Exception e) {\r\n                gameThread.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        while (isRunning) {\r\n\r\n            long started = System.currentTimeMillis();\r\n            //Apply physics calculations per frame\r\n            for (int i = 0; i < physicsIterations; i++) {\r\n                physics();\r\n            }\r\n            long physicsTime = System.currentTimeMillis();\r\n            //System.out.println( \"physics \" + (physicsTime - started));\r\n\r\n            //Apply game logic to game objects\r\n\r\n            update();\r\n            long updateTime = System.currentTimeMillis();\r\n            //System.out.println( \"update \" + (updateTime-physicsTime));\r\n            if(isDrawing) {\r\n                draw();\r\n            }\r\n            long drawTime = System.currentTimeMillis() - updateTime;\r\n            //System.out.println( \"draw main \" + drawTime);\r\n            totalFrame += drawTime;\r\n            numberFrame++;\r\n            //System.out.println(\"average draw \" + totalFrame/numberFrame);\r\n\r\n            //If the time between frames does not match the target FPS, delay or skip to match\r\n\r\n            deltaTime = (System.currentTimeMillis() - started);\r\n            int lag = (int) (fixedDeltaTime/timeScale - deltaTime);\r\n\r\n            //System.out.println(deltaTime + \" \" + fixedDeltaTime + \" \" + lag);\r\n            if (lag > 0) {\r\n                try {\r\n                    gameThread.sleep(lag);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            while (lag < 0) {\r\n                lag += fixedDeltaTime/timeScale;\r\n                //Apply physics calculations per frame\r\n                for (int i = 0; i < physicsIterations; i++) {\r\n                    physics();\r\n                }\r\n                //Apply game logic to game objects\r\n                update();\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Graphics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n\r\n    private void draw() {\r\n        Canvas canvas = new Canvas();\r\n        try {\r\n            canvas = holder.lockCanvas(null);\r\n        }\r\n        catch (Exception e){\r\n\r\n        }\r\n        if (canvas != null) {\r\n            //90\r\n            //canvas.drawRect(0, 0, screenWidth * 1.2f, screenHeight, back);\r\n            scene.drawBackground(canvas);//40\r\n            lair.draw(canvas);//80\r\n            fortress.draw(canvas);//90\r\n            projectilePool.draw(canvas);//80\r\n\r\n            npc_pool.draw(canvas);//90\r\n            goldPool.draw(canvas);//\r\n            player.draw(canvas);//80\r\n            firePool.draw(canvas);\r\n            scene.drawForeground(canvas);//\r\n\r\n\r\n            hud.draw(canvas);\r\n            holder.unlockCanvasAndPost(canvas);\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Physics\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void physics() {\r\n        cameraDisp.x = -player.position.x+screenWidth/2;\r\n        if(!Game.instance.gameOver) {\r\n\r\n            npc_pool.physics(fixedDeltaTime);\r\n            fortress.physics(deltaTime);\r\n            //Enemy motion\r\n            if (!player.destroyed) {\r\n                goldPool.physics(fixedDeltaTime / physicsIterations);\r\n                projectilePool.physics(fixedDeltaTime / physicsIterations);\r\n                player.physics(fixedDeltaTime / physicsIterations);\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    //Game logic\r\n    //-----------------------------------------------------------------------------------------------------------\r\n    private void update() {\r\n        if(player.visible){\r\n            player.update(fixedDeltaTime);\r\n            scene.update(fixedDeltaTime);\r\n            npc_pool.update(fixedDeltaTime);\r\n            projectilePool.update(fixedDeltaTime);\r\n            //System.out.println(fixedDeltaTime +\" \"+ deltaTime);\r\n            goldPool.update(fixedDeltaTime);\r\n            fortress.update(fixedDeltaTime);\r\n            hud.update(fixedDeltaTime);\r\n            lair.update(fixedDeltaTime);\r\n            firePool.update(fixedDeltaTime);\r\n        }\r\n        else{\r\n            if(!Game.instance.gameOver) {\r\n                Game.instance.showGameOver = true;\r\n            }\r\n        }\r\n    }\r\n    public void movePlayerBy(Vector2 dv){\r\n\r\n        if(dv!=null){\r\n            this.moveBy = new Vector2(dv.x,dv.y);\r\n            player.moveBy(moveBy.multiply(player.maxMoveSpeed));\r\n\r\n        }\r\n        else {\r\n            player.moveBy(dv);\r\n        }\r\n    }\r\n\r\n    public float getGroundLevel(){\r\n        return  groundLevel;\r\n    }\r\n    public void breathFire(boolean breathingFire){\r\n\r\n        player.breathingFire = breathingFire;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(revision 22a08d49ccee6ebfdcbe358ac28f478e8c7d64fd)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/GameView.java	(date 1604976415082)
@@ -25,8 +25,8 @@
     Vector2 screenCenter;
 
 
-    //final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds
-    final float fixedDeltaTime = (int) (1000 / 90); // in milliseconds
+    final float fixedDeltaTime = (int) (1000 / Game.instance.refreshRating); // in milliseconds
+//    final float fixedDeltaTime = (int) (1000 / 90); // in milliseconds
     public float timeScale = 1;
     float deltaTime = fixedDeltaTime;
 
