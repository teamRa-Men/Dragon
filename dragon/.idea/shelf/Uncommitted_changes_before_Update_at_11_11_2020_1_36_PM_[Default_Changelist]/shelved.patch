Index: app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mnm.bcs106.yoobeecolleges.dragon;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.util.Log;\r\n\r\nimport java.net.SocketTimeoutException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class Fortress extends Foundation {\r\n\r\n\r\n    //All the stuff the fortress needs and can do;\r\n\r\n    int lv;\r\n\r\n    int maxHealth = 500;\r\n\r\n    int currentGold;\r\n    int maxGold;\r\n    public int goldRate = 15;\r\n\r\n    int currentTilesLeft;\r\n    int currentTilesRight;\r\n    int maxTiles = 8;\r\n\r\n    public Point creationPoint = new Point();\r\n    float attackRange = (1f/2);\r\n\r\n    float countdown = 0;\r\n    int attack = 0;\r\n\r\n    ArrayList<Foundation> currentBuildingsRight = new ArrayList<Foundation>();\r\n    ArrayList<Foundation> currentBuildingsLeft = new ArrayList<Foundation>();\r\n    int maxBuildings;\r\n\r\n    //number of buildings in the village/town\r\n\r\n    public int currentTownInhabitants;\r\n    public int maxTownInhabitants; // defined by the houses/farms\r\n\r\n    //public Foundation[] buildings = new Foundation[5];\r\n\r\n    ArcherTower archertower;\r\n    boolean hasTaxed = false;\r\n\r\n    boolean hasFarm = false;\r\n    // attack function\r\n    public static int tileNr = 3;\r\n\r\n    float townFear;\r\n\r\n    ArrayList<String> BD = new ArrayList<>();\r\n    boolean muchFarms = true;\r\n    boolean muchFear = false;\r\n    int tower = 0;\r\n\r\n    boolean summonedWizard = false;\r\n    boolean surrender = false;\r\n\r\n    Bitmap flag;\r\n    int flagy;\r\n\r\n    //Fortress constructor, used when calling Fortress();\r\n\r\n    //this specific Fortress\r\n    public Fortress(int x, int y, boolean isStanding, GameView activity) {\r\n        super(x, y, tileNr, isStanding, activity);\r\n        buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress1\");\r\n        height = width * buildingImage.height() / buildingImage.width();\r\n\r\n        BD.add(\"House\");\r\n        BD.add(\"House\");\r\n        BD.add(\"House\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n        BD.add(\"Farm\");\r\n\r\n\r\n        Random r = new Random();\r\n        x = r.nextInt();\r\n        buildingType = 1;\r\n        currentGold = 150;\r\n\r\n        maxBuildings = 5;\r\n        maxGold = 400;\r\n        lv = 0;\r\n\r\n        Farmers newFarmer = GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);\r\n    }\r\n\r\n    //new test with arraylists works pretty much, tiles and buildings still individual from each other\r\n\r\n    public void update(float deltaTime) {\r\n        if (creationPoint.y != (int)(GameView.instance.groundLevel - height*3/4) || creationPoint.x != x+width/2){\r\n            creationPoint.x = x+width/2;\r\n            creationPoint.y = (int)(GameView.instance.groundLevel - height/2);\r\n        }\r\n\r\n        /*System.out.println(creationPoint.x);\r\n        System.out.println(GameView.instance.player.position.x);\r\n        System.out.println(GameView.instance.player.position.x-creationPoint.x);\r\n        System.out.println(GameView.instance.cameraSize*attackRange);*/\r\n\r\n        int currentGold1 = currentGold;\r\n\r\n        if (currentGold < maxGold) {\r\n\r\n            // MONEY INCOME\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) < 0.2\r\n                    && (!hasTaxed)) {\r\n\r\n                goldRate = 15;\r\n\r\n                for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n                    goldRate = currentBuildingsRight.get(i).goldRate + goldRate;\r\n                }\r\n\r\n                for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n                    goldRate = currentBuildingsLeft.get(i).goldRate + goldRate;\r\n                }\r\n\r\n\r\n                currentGold = currentGold + (int) (goldRate * 1.2*GameView.instance.timeScale);\r\n\r\n\r\n                if (currentGold > maxGold) {\r\n                    currentGold = currentGold - (currentGold - maxGold);\r\n                }\r\n\r\n                for (int i = 0; i < BD.size(); i++) {\r\n                    System.out.print(BD.get(i) + \", \");\r\n                }\r\n                System.out.println(\"Town's Fear :\" + townFear);\r\n\r\n                hasTaxed = true;\r\n            }\r\n\r\n            if ((Scene.instance.timeOfDay) / (Scene.instance.dayLength) > 0.7) hasTaxed = false;\r\n\r\n            if (currentGold != currentGold1) {\r\n                System.out.println(\"Goldrate : \" + goldRate);\r\n                System.out.println(\"Gold : \" + currentGold);\r\n            }\r\n        }\r\n\r\n        //=======================================================================================//\r\n\r\n        //Buildings\r\n\r\n        //=======================================================================================//\r\n\r\n\r\n        //System.out.println((int)(House.cost*((lv*1.75)+1)));\r\n\r\n        if (((currentBuildingsRight.size() + currentBuildingsLeft.size()) < maxBuildings)) {\r\n            spawnRandomBuilding();\r\n        }\r\n\r\n        tower = 0;\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n            if (currentBuildingsRight.get(i).buildingType == 4)\r\n                tower++;\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n            if (currentBuildingsLeft.get(i).buildingType == 4)\r\n                tower++;\r\n        }\r\n\r\n        //  ==       =====   ====        ==           =====\r\n        //  ==        ==      =          ==           =============\r\n        //  ==         ==    =      =============         ==================\r\n        //  ==          ==  =            ==           ===============\r\n        //  ========     ===             ==           ===\r\n\r\n        if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold / 10 * 9))\r\n                && lv == 0) {\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 300;\r\n            maxBuildings = 12;\r\n\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress2\");\r\n\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize * tileNr) + (currentTilesRight) * tilesize, y, true, activity));\r\n            currentTilesRight += 1;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft) * tilesize - ArcherTower.tileNr * tilesize, y, true, activity));\r\n            currentTilesLeft += 1;\r\n        }\r\n\r\n        if ((((currentBuildingsRight.size() + currentBuildingsLeft.size()) >= maxBuildings) || (currentTilesLeft + currentTilesRight >= 8))\r\n                && (currentGold >= (maxGold / 10 * 9))\r\n                && lv == 1) {\r\n\r\n            lv++;\r\n            maxGold = maxGold * 4 + 600;\r\n            maxBuildings = 18;\r\n\r\n            this.buildingImage = SpriteManager.instance.getBuildingSprite(\"Fortress3\");\r\n\r\n\r\n            currentBuildingsRight.add(new ArcherTower(x + (tilesize * tileNr) + (currentTilesRight) * tilesize, y, true, activity));\r\n            currentTilesRight += 1;\r\n\r\n            currentBuildingsLeft.add(new ArcherTower(x - (currentTilesLeft) * tilesize - ArcherTower.tileNr * tilesize, y, true, activity));\r\n            currentTilesLeft += 1;\r\n        }\r\n\r\n        //====    =====  =====     =     ==  ====    ============================\r\n        //=   =   ==     =    =   = =    ==  =   =   ============================\r\n        //====    ==     =====   =====   ==  ====    ============================\r\n        //=   ==  =====  =      =     =  ==  =   ==  ============================\r\n\r\n        float tempfear;\r\n        if (!isStanding) {\r\n            repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n        }\r\n\r\n        else {\r\n            boolean repairingRight = false, repairingLeft = false;\r\n            tempfear = 0;\r\n\r\n            //RIGHT SIDE\r\n            for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n                currentBuildingsRight.get(i).update(deltaTime);\r\n\r\n                //repairing\r\n                if (!repairingRight && !currentBuildingsRight.get(i).isStanding) {\r\n\r\n                    if (currentBuildingsRight.get(i).buildingType == 2) {\r\n\r\n                        if ((townFear - 4) / 10 > tower / 2 && lv > 0) {\r\n                            System.out.println(\"converting house -> tower R\");\r\n                            int bx = currentBuildingsRight.get(i).x;\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx, y, true, activity));\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx, y, false, activity));\r\n                            currentBuildingsRight.get(i).health = 0;\r\n                        }\r\n                    }\r\n\r\n                    else if(currentBuildingsRight.get(i).buildingType == 4){\r\n\r\n                        if (townFear/10 < 2*lv && tower > 6) {\r\n                            System.out.println(\"converting tower -> house R\");\r\n                            int bx = currentBuildingsRight.get(i).x;\r\n                            currentBuildingsRight.set(i, new ArcherTower(bx,y,true,activity));\r\n                        }\r\n                    }\r\n\r\n                    currentBuildingsRight.get(i).repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n                    repairingRight = true;\r\n\r\n                }\r\n\r\n                //gathering fear\r\n                tempfear += currentBuildingsRight.get(i).fear;\r\n            }\r\n\r\n            //LEFT SIDE\r\n            for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n                currentBuildingsLeft.get(i).update(deltaTime);\r\n\r\n                //repairing\r\n                if (!repairingLeft && !currentBuildingsLeft.get(i).isStanding) {\r\n\r\n\r\n                    if (currentBuildingsLeft.get(i).buildingType == 2) {\r\n                        System.out.println(\"this is a house L\");\r\n                        if ((townFear - 4) / 10 > tower / 2 && lv > 0) {\r\n                            System.out.println(\"converting house -> tower L\");\r\n                            int bx = currentBuildingsLeft.get(i).x;\r\n                            currentBuildingsLeft.set(i, new ArcherTower(bx, y, false, activity));\r\n                            currentBuildingsLeft.get(i).health = 0;\r\n                        }\r\n                    }\r\n\r\n                    else if(currentBuildingsLeft.get(i).buildingType == 4){\r\n\r\n                        if (townFear/10 < 2*lv && tower > 6) {\r\n                            System.out.println(\"converting tower -> house L\");\r\n                            int bx = currentBuildingsLeft.get(i).x;\r\n                            currentBuildingsLeft.set(i, new ArcherTower(bx,y,true,activity));\r\n                        }\r\n                    }\r\n                }\r\n                currentBuildingsLeft.get(i).repair((int) (currentTownInhabitants / 5) + 1, deltaTime);\r\n                repairingLeft = true;\r\n\r\n                tempfear += currentBuildingsLeft.get(i).fear;\r\n            }\r\n\r\n            //gathering fear\r\n            townFear = (tempfear / (currentBuildingsLeft.size() + currentBuildingsRight.size()));\r\n        }\r\n\r\n        //    =   ========  ==   ==\r\n        //   = =     ==     ==  ==\r\n        //  =====    ==     ====\r\n        // =     =   ==     ==  ===\r\n\r\n    if (inRange()) {\r\n        countdown+=GameView.instance.fixedDeltaTime;\r\n        System.out.println(countdown);\r\n        if (countdown > 1000) {\r\n\r\n            if (countdown > 1200 && attack == 0) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                 }\r\n\r\n            if (countdown > 1400 && attack == 1) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                }\r\n\r\n            if (countdown > 1600 && attack == 2) {\r\n                Attack();\r\n\r\n                attack += 1;\r\n                }\r\n\r\n            if (countdown >= 1800) {\r\n                countdown = 0;\r\n                attack = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        //spawning thief\r\n        if((townFear > 20 && lv != 0 && (currentGold < maxGold/2)) || (goldRate < 200 && lv != 0)){\r\n            GameView.instance.npc_pool.spawnThiefs(x, (int) GameView.instance.groundLevel,1);\r\n        }\r\n\r\n        //spawning dragonslayer\r\n        if(townFear > 30 && lv != 0){\r\n            GameView.instance.npc_pool.spawnDragonLayers(x, (int) GameView.instance.groundLevel, 1);\r\n        }\r\n\r\n        //spawning wizard\r\n        if(townFear > 35 && lv ==2 && !summonedWizard){\r\n            GameView.instance.npc_pool.spawnFarmers(x, (int) GameView.instance.groundLevel);\r\n            summonedWizard = true;\r\n        }\r\n\r\n        if(townFear > 50 && !surrender){\r\n            surrender = true;\r\n        }\r\n\r\n        Flagposition(deltaTime);\r\n    }\r\n\r\n\r\n    public void spawnRandomBuilding(){\r\n\r\n        double lr = (Math.random() - 0.5f);\r\n        int offset = 0;//tilesize/2;\r\n\r\n        ArrayList<Foundation> direction;\r\n        int directionTiles;\r\n\r\n        if(lr < 0){\r\n            direction = currentBuildingsLeft;\r\n        }\r\n        else{\r\n            direction = currentBuildingsRight;\r\n        }\r\n\r\n        int position;\r\n        if(direction ==  currentBuildingsLeft){\r\n            position = x-(currentTilesLeft*tilesize+offset);\r\n        }\r\n        else position = x + (tilesize*Fortress.tileNr) +currentTilesRight*tilesize + offset;\r\n\r\n        //////////////////////////////////////////////////////////////////\r\n        //deciding Building\r\n        //////////////////////////////////////////////////////////////////\r\n\r\n\r\n        Foundation building;\r\n        int frm = 0;\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            if(currentBuildingsRight.get(i).buildingType == 3)\r\n                frm++;\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            if(currentBuildingsLeft.get(i).buildingType == 3)\r\n                frm++;\r\n        }\r\n\r\n        if(goldRate < 100 && !muchFarms && frm < 5){BD.add(\"Farm\");BD.add(\"Farm\");BD.add(\"Farm\"); muchFarms = true;}\r\n        else if(goldRate >= 100 && muchFarms){BD.remove(\"Farm\");BD.remove(\"Farm\"); BD.remove(\"Farm\"); muchFarms = false;}\r\n\r\n        if(townFear >= 12 && !muchFear && lv>0){BD.add(\"Tower\");BD.add(\"Tower\");BD.add(\"Tower\");BD.add(\"Tower\"); muchFear = true;}\r\n        else if(townFear < 12 && muchFear){BD.remove(\"Tower\");BD.remove(\"Tower\");BD.remove(\"Tower\");BD.remove(\"Tower\"); muchFear = false;}\r\n\r\n        if(currentBuildingsRight.size() == 0 && currentBuildingsLeft.size() == 0){\r\n            if(direction == currentBuildingsLeft) {\r\n                position -= Farm.tileNr*tilesize;\r\n            }\r\n            building = new Farm(position,y,true,activity);\r\n            currentGold-=Farm.cost*((lv*1.50)+1);\r\n        }\r\n\r\n        else{\r\n            int random = (int)(-0.5+(Math.random()*BD.size()));\r\n\r\n            if(BD.get(random) == \"House\" && currentGold > House.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=House.tileNr*tilesize;\r\n                }\r\n                building = new House(position,y,true,activity);currentGold-=(int)(House.cost*((lv*1.75)+1));}\r\n\r\n            else if(BD.get(random) == \"Farm\" && currentGold > Farm.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=Farm.tileNr*tilesize;\r\n                }\r\n                building = new Farm(position,y,true,activity);currentGold-=(int)(Farm.cost*((lv*1.75)+1));}\r\n\r\n            else if(BD.get(random) == \"Tower\" && currentGold > ArcherTower.cost*(int)((lv*1.75)+1)){\r\n                if(direction == currentBuildingsLeft){\r\n                    position-=ArcherTower.tileNr*tilesize;\r\n                }\r\n                building = new ArcherTower(position,y,true,activity); currentGold-=(int)(ArcherTower.cost*((lv*1.75)+1));}\r\n            else return;\r\n        }\r\n\r\n        ///_______________________________________________///\r\n        //giving feedback to the Tiles right and Tiles left\r\n        ///===============================================///\r\n        if(direction == currentBuildingsLeft) {\r\n            currentTilesLeft += building.tileNr;\r\n        }\r\n        else {\r\n            currentTilesRight += building.tileNr;\r\n        }\r\n        direction.add(building);\r\n    }\r\n\r\n    public void Flagposition(float deltaTime){\r\n\r\n        countdown+=deltaTime;\r\n        int flagf = 0;\r\n\r\n\r\n        // replace with sprite animation class\r\n        if (countdown >= 0 && flagf == 0) {\r\n            flag = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagf1);\r\n            flagf += 1;\r\n        }\r\n\r\n        if (countdown >= 200 && flagf == 1) {\r\n            flag = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagf2);\r\n            flagf += 1;\r\n        }\r\n\r\n        if (countdown >= 400 && flagf == 2) {\r\n            flag = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagf3);\r\n            flagf = 0;\r\n        }\r\n\r\n        if(fear < 10){\r\n            flagy = (int)GameView.instance.groundLevel-((tilesize*3)/5*4);\r\n        }\r\n\r\n        if(fear > 10){\r\n            flagy = (int)GameView.instance.groundLevel-tilesize*2;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas c) {\r\n        super.draw(c);\r\n\r\n        Bitmap flagpole = BitmapFactory.decodeResource(GameView.instance.getResources(), R.drawable.flagpole);\r\n        flagpole = Bitmap.createScaledBitmap(flagpole, tilesize, tilesize*2, false);\r\n\r\n        for (int i = 0; i < currentBuildingsLeft.size(); i++) {\r\n\r\n            if (currentBuildingsLeft.get(i) != null) {\r\n\r\n                currentBuildingsLeft.get(i).draw(c);\r\n\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < currentBuildingsRight.size(); i++) {\r\n\r\n            if (currentBuildingsRight.get(i) != null) {\r\n\r\n                currentBuildingsRight.get(i).draw(c);\r\n            }\r\n        }\r\n        c.drawBitmap(flagpole, x+GameView.instance.cameraDisp.x+tilesize*3,(int)(GameView.instance.groundLevel-flagpole.getHeight()),null);\r\n        c.drawBitmap(flag,x+GameView.instance.cameraDisp.x+tilesize*3,flagy,null);\r\n    }\r\n\r\n    public void position(Fortress f) {\r\n\r\n    }\r\n\r\n    /*public void CombList(){\r\n\r\n        ArrayList <Foundation> townassets = new ArrayList<>();\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            townassets.add(currentBuildingsRight.get(i));\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            townassets.add(currentBuildingsLeft.get(i));\r\n        }\r\n      }*/\r\n\r\n    public void physics(float deltaTime){\r\n        super.physics(deltaTime);\r\n\r\n        for(int i = 0; i < currentBuildingsLeft.size(); i++){\r\n            currentBuildingsLeft.get(i).physics(deltaTime);\r\n        }\r\n\r\n        for(int i = 0; i < currentBuildingsRight.size(); i++){\r\n            currentBuildingsRight.get(i).physics(deltaTime);\r\n        }\r\n    }\r\n\r\n    // calculates if the dragon is in range\r\n    public boolean inRange(){\r\n        //System.out.println(\"inRange\");\r\n        if (Math.abs(GameView.instance.player.position.x-creationPoint.x)<GameView.instance.cameraSize*attackRange){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //shooting an arrow at target\r\n    public void Attack(){\r\n        float randomx = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/10;\r\n        float randomy = (float)(Math.random()-0.5)*attackRange*GameView.instance.cameraSize/5;\r\n        Vector2 target = GameView.instance.player.aimFor();\r\n        float dx = target.x-creationPoint.x;\r\n        float dy =target.y-creationPoint.y;\r\n        float l= (float)Math.sqrt(dx*dx+dy*dy);\r\n        dx = dx/l-((float)Math.random()-0.5f)/4;\r\n        dy = dy/l-(float)Math.random()/4;\r\n        ProjectilePool.instance.shootArrow(creationPoint.x-width/4, creationPoint.y+height/8, 1, dx, dy, 2);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//TODO:\r\n//      Conditional Building output :\r\n//      Fortress size : 4 tiles: done\r\n//      Fortress Attacking :\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(revision 5abba64a66825dc9a2780940adcf9ff8f455c872)
+++ app/src/main/java/mnm/bcs106/yoobeecolleges/dragon/Fortress.java	(date 1604873820996)
@@ -127,8 +127,8 @@
                     goldRate = currentBuildingsLeft.get(i).goldRate + goldRate;
                 }
 
-
-                currentGold = currentGold + (int) (goldRate * 1.2*GameView.instance.timeScale);
+                if(surrender) currentGold = currentGold + (int) (goldRate/10*2 * 1.2*GameView.instance.timeScale);
+                else currentGold = currentGold + (int) (goldRate * 1.2*GameView.instance.timeScale);
 
 
                 if (currentGold > maxGold) {
@@ -345,7 +345,7 @@
         }
 
         //spawning dragonslayer
-        if(townFear > 30 && lv != 0){
+        if(townFear > 30 && lv != 0 && (Scene.instance.day%4 == 0)){
             GameView.instance.npc_pool.spawnDragonLayers(x, (int) GameView.instance.groundLevel, 1);
         }
 
@@ -360,6 +360,12 @@
         }
 
         Flagposition(deltaTime);
+
+        if(surrender){
+            int tributegold = goldRate/8;
+            GameView.instance.npc_pool.spawnTribute((int)x ,(int)GameView.instance.groundLevel,goldRate/10*8);
+
+        }
     }
 
 
